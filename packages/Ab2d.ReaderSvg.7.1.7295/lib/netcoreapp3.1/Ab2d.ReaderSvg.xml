<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ab2d.ReaderSvg</name>
    </assembly>
    <members>
        <member name="T:Ab2d.Licensing.ReaderSvg.LicenseHelper">
            <summary>
            LicenseHelper class defines the <see cref="M:Ab2d.Licensing.ReaderSvg.LicenseHelper.SetLicense(System.String,System.String,System.String)"/> method that can be called to set the license data.
            </summary>
        </member>
        <member name="M:Ab2d.Licensing.ReaderSvg.LicenseHelper.SetLicense(System.String,System.String,System.String)">
            <summary>
            SetLicense method can be called to activate the commercial license or extend the evaluation.
            The parameter values for the commercial value can be get from the User Account web page.
            </summary>
            <param name="licenseOwner">license owner</param>
            <param name="licenseType">type of the license</param>
            <param name="license">license text</param>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.SvgFileLoadedEventArgs">
            <summary>
            SvgFileLoadedEventArgs is used for SvgFileLoaded event on SvgViewbox and SvgDrawing.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.SvgFileLoadedEventArgs.SvgFileUri">
            <summary>
            Gets an Uri of the svg that was read.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.SvgFileLoadedEventArgs.ReadSvgFile">
            <summary>
            Gets the Viewbox (for SvgViewbox) or Image (for SvgDrawing) that contains the read svg file.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.SvgFileLoadedEventArgs.UserReaderSvg">
            <summary>
            Gets an instance of the Ab2d.ReaderSvg that is used to read the svg file.
            </summary>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.SvgFileLoadedEventArgs.#ctor(System.Uri,System.Windows.FrameworkElement,Ab2d.ReaderSvg)">
            <summary>
            Constructor
            </summary>
            <param name="svgFileUri">svgFileUri</param>
            <param name="readSvgFile">readSvgFile</param>
            <param name="userReaderSvg">userReaderSvg</param>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.SvgFileLoadingEventArgs">
            <summary>
            SvgFileLoadingEventArgs is used for SvgFileLoading event on SvgViewbox and SvgDrawing.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.SvgFileLoadingEventArgs.SvgFileUri">
            <summary>
            Gets an Uri of the svg that was read.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.SvgFileLoadingEventArgs.SvgFileStream">
            <summary>
            Gets or sets a Stream that will be used to read the svg file. The SvgFileStream can be changed in the event handler to change the read svg file.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.SvgFileLoadingEventArgs.UserReaderSvg">
            <summary>
            Gets an instance of the Ab2d.ReaderSvg that is used to read the svg file.
            </summary>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.SvgFileLoadingEventArgs.#ctor(System.Uri,System.IO.Stream,Ab2d.ReaderSvg)">
            <summary>
            Constructor
            </summary>
            <param name="svgFileUri">svgFileUri</param>
            <param name="svgFileStream">svgFileStream</param>
            <param name="userReaderSvg">userReaderSvg</param>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.GeometrySettings">
            <summary>
            Geometry Settings used to define how the geometry is read with ReadGeometry method.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.IsFrozen">
            <summary>
            If true Freeze = True is added to the geometry. This improves performance but makes objects unchangeable.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.ConvertToStreamGeometry">
            <summary>
            If true all geometry objects are converted to StreamGeometry for better performance.
            Note the if <see cref="P:Ab2d.Common.ReaderSvg.GeometrySettings.CombineGeometries"/> is true, geometries are always converted into StreamGeometry regardless of ConvertToStreamGeometry.
            </summary>
            <remarks>
            The StreamGeometry object is a light-weight alternative to PathGeometry for creating geometric shapes. Use a StreamGeometry when you need to describe a complex geometry. StreamGeometry is optimized for handling many PathGeometry objects and performs better when compared to using many individual PathGeometry objects. 
            </remarks>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.ForceCounterClockWisePointsOrder">
            <summary>
            In some cases the polylines are defined in clock wise direction and this can produce a holes in the geometry. Setting this property to true prevents such problems.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.CombineGeometries">
            <summary>
            If true the geometries with the same pen and brush are combined into one geometry. This can improve the performance significantly. For fine tuning which geometries are combined see also <see cref="P:Ab2d.Common.ReaderSvg.GeometrySettings.CombineElementWithPenAndBrush"/> and <see cref="P:Ab2d.Common.ReaderSvg.GeometrySettings.CombineAllSameIntoOneGeometry"/>.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.CombineElementWithPenAndBrush">
            <summary>
            By default CombineElementWithPenAndBrush is false and this means that only elements that have only pen or only brush set are defined.
            If an element had both pen and brush defined it is not combined. This prevents problems when elements are overlapping - elements in front can cover some part of background elements.
            If CombineElementWithPenAndBrush is set to true, than such elements are combined which leads to better performance, but can produce some anomalies if elements are overlapping.
            NOTE: CombinePreserveElementsOrder is used only when <see cref="P:Ab2d.Common.ReaderSvg.GeometrySettings.CombineGeometries"/> is set to true.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.CombineAllSameIntoOneGeometry">
            <summary>
            If true than all elements with same pen or brush are combined into one geometry regardless of the elements position.
            For example we have 3 elements: A, B, C. If A and C have the same pen and brush, and CombineAllSameIntoOneGeometry is true,
            than A and C are combined, regardless of the B element. If CombineAllSameIntoOneGeometry is false, than the A and C are not combined.
            Set this CombineAllSameIntoOneGeometry to true if elements are not overlapping. 
            NOTE: CombineAllSameIntoOneGeometry is used only when <see cref="P:Ab2d.Common.ReaderSvg.GeometrySettings.CombineGeometries"/> is set to true.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.GeometryTextExport">
            <summary>
            Gets or sets an enum that specifies how text is exported into geometry objects (default value is GlyphRun).
            </summary>
            <remarks>
            <para>
            When objects are read as shapes, the text is usually represented with TextBlock elements. When text is read as geometries the text can be represented with GlyphRun.
            </para>
            <para>
            But using GlyphRun has a big disadvantage when the read drawing is exported into xaml. The only way to set the font that is used by the GlyphRun object is by providing a file path and name to the font file. 
            This makes the exported xaml not very portable to other computers.
            </para>
            <para>
            To overcome this problem it is possible to set the <b>GeometryTextExport</b> value to PathGeometry. It means that all texts will be converted into PathGeometry and are therefore fully portable to any computer.  
            </para>
            <para>
            It is also possible to skip all texts from the read geometry.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.IgnoreRootElementSize">
            <summary>
            Gets or sets a Boolean that specifies if the size specified with root element is not used to create geometry objects. Default value is false.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.ResourcesCountLimit">
            <summary>
            Defines if the pens and brushed are written into resources./>
            If ResourcesCountLimit is equal or less than 0 than resources are not used.
            If ResourcesCountLimit is 1 than all pens and brushes are written to resources.
            If ResourcesCountLimit is 2 (or higher) than all pens and brushes that are used 2 (or more) times are written to resources.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.ResourcesBrushStartIndex">
            <summary>
            Start index used with <see cref="P:Ab2d.Common.ReaderSvg.GeometrySettings.ResourcesSolidColorBrushKeyFormatString"/>.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.ResourcesPenStartIndex">
            <summary>
            Start index used with <see cref="P:Ab2d.Common.ReaderSvg.GeometrySettings.ResourcesPenKeyFormatString"/>
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.ResourcesSolidColorBrushKeyFormatString">
            <summary>
            Format string used to format the SolidColorBrush resource keys.
            Default value is "Brush{0}"
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.ResourcesPenKeyFormatString">
            <summary>
            Format string used to format the Pen resource keys.
            Default value is "Pen{0}"
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.ResolveResourceKey">
            <summary>
            Callback to customize the resource key names used in GetXaml when <see cref="P:Ab2d.Common.ReaderSvg.GeometrySettings.ResourcesCountLimit"/> is bigger than 0.
            </summary>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.GeometrySettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.GeometrySettings.SetDefault">
            <summary>
            Sets default values - no optimization
            </summary>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.GeometrySettings.SetOptimizationPercentage(System.Int32)">
            <summary>
            Gets <see cref="T:Ab2d.Common.ReaderSvg.GeometrySettings"/> from percentage (0 - means fully usable and changeable, 100 - means best performance).
            Note: For values above 50 it is possible that there are some anomalies on the image because of have geometry optimization - please check the image before exporting.
            </summary>
            <param name="percentage">0 - means fully usable and changeable, 100 - means best performance</param>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.GeometrySettings.FromOptimizationPercentage(System.Int32)">
            <summary>
            Gets <see cref="T:Ab2d.Common.ReaderSvg.GeometrySettings"/> from percentage (0 - means fully usable and changeable, 100 - means best performance).
            Note: For values above 50 it is possible that there are some anomalies on the image because of have geometry optimization - please check the image before exporting       
            </summary>
            <param name="percentage">0 - means fully usable and changeable, 100 - means best performance</param>
            <returns>GeometrySettings</returns>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.NoOptimization">
            <summary>
            Gets <see cref="T:Ab2d.Common.ReaderSvg.GeometrySettings"/> for best flexibility (no optimization) - all the objects can be changed and also each no pens and brushes are shared between geometries so they can be changed individually.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.BasicOptimization">
            <summary>
            Gets <see cref="T:Ab2d.Common.ReaderSvg.GeometrySettings"/> with some basic optimization - same objects are combines in a safe matter so there should be no anomalies.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.AdvancedOptimization">
            <summary>
            Gets <see cref="T:Ab2d.Common.ReaderSvg.GeometrySettings"/> with advanced optimization - many objects are combines.
            Note that it is possible that because of optimization it is possible that some anomalies appear on image.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.GeometrySettings.FullOptimization">
            <summary>
            Gets <see cref="T:Ab2d.Common.ReaderSvg.GeometrySettings"/> for best performance - many objects are combines.
            Note that it is possible that because of optimization it is possible that some anomalies appear on image.
            </summary>
        </member>
        <member name="E:Ab2d.Common.ReaderSvg.GeometrySettings.PropertyChanged">
            <summary>
            Occurs when a property value changes
            </summary>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.GeometrySettings.OnPropertyChanged(System.String)">
            <summary>
            OnPropertyChanged
            </summary>
            <param name="propertyName">propertyName</param>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.GeometryTextExportType">
            <summary>
            GeometryTextExportType enum describes how the text is exported into geometry objects.
            </summary>
        </member>
        <member name="F:Ab2d.Common.ReaderSvg.GeometryTextExportType.RemoveText">
            <summary>
            Text is removed from geometry.
            </summary>
        </member>
        <member name="F:Ab2d.Common.ReaderSvg.GeometryTextExportType.GlyphRun">
            <summary>
            GlyphRun is used to define the text.
            </summary>
        </member>
        <member name="F:Ab2d.Common.ReaderSvg.GeometryTextExportType.PathGeometry">
            <summary>
            Text is converted into Path.
            </summary>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.TrueTransform.TransformHelper.TransformSize(System.Windows.Media.Transform,System.Windows.Size)">
            <summary>
            Transforms a Size with checking if Width or Height is Nan and preserving it
            </summary>
            <param name="transformation"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.ResolveResourceKeyDelegate">
            <summary>
            ResolveResourceKeyDelegate is used to customize the resource key names used in GetXaml method when UseResources property is set to true and ReadGeometry method was used.
            </summary>
            <param name="resource">resource</param>
            <param name="recommendedKey">recommendedKey</param>
            <returns>key name that will be used</returns>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.ResolveImagePathDelegate">
            <summary>
            ResolveImagePathDelegate is used to specify the path where the image will be saved
            </summary>
            <param name="imageToResolve">imageToResolve</param>
            <returns>path where the image will be saved</returns>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings">
            <summary>
            BaseXamlWriterSettings is a base class that defines settings for GetXaml method.
            To get xaml for WPF use <see cref="T:Ab2d.Common.ReaderSvg.WpfXamlWriterSettings"/>. For Silverlight use <see cref="T:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings"/>.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.ResolveImagePath">
            <summary>
            Callback to set the path where the image will be saved
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.NamedObjects">
            <summary>
            Gets or sets NamedObjects dictionary with names (as keys) of the objects (as values). The defined names will be used to name the objects.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.XamlNamespace">
            <summary>
            Gets or sets XamlNamespace
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.RootObject">
            <summary>
            Gets or sets a string to specify a custom root object. If null or empty the last read object will be set as root object. (example values: "UserControl" or "Window").
            </summary>
            <remarks>
            <para>
            RootObject specifies the object that will be used as a root objects in the returned xaml. 
            </para>
            <para>
            If null or empty the last read object will be set as root object.
            </para>
            <para>
            With setting the <b>RootObject</b> a custom object can be used as a root object. For example "UserControl" or "Window".
            </para>
            <para>
            It is also possible to specify more then one root object - for example "UserControl;Grid;Grid". This will use UserControl as a root object and than add Grid as its child. The read objects will be then added to the Grid.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.StartComment">
            <summary>
            Gets or sets start comment
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.IndentStep">
            <summary>
            Gets or sets indent step - default value is 4
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.StartIndent">
            <summary>
            Gets or sets indent value used on root element.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.FullNumberFormatString">
            <summary>
            Gets full NumberFormatString - for example "{0:0.###}". To set the number format use NumberFormatString property.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.NumberFormatString">
            <summary>
            Gets or sets NumberFormatString - for example 0.00 for 2 decimals or 0.## for 2 decimals if not 0. Empty string means unlimited number of decimals.
            Default value is 0.###
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.WriteElementNames">
            <summary>
            Gets or sets a Boolean that specifies if element names are written to the xaml string. Default value is true.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.WriteRootObjectResouceKey">
            <summary>
            Gets or sets whether the xaml is written to a ResourceDictionary
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.RootElementKeyValue">
            <summary>
            Gets or sets Key value for the root element.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.IsResourceDictionary">
            <summary>
            Gets or sets whether the xaml is written to a ResourceDictionary
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.MaxDataTextLength">
            <summary>
            Gets or sets the maximum length of texts used for Path's Data, PointCollection, etc. If data text is largest than MaxDataTextLength, the data text is truncated and "..." is added to the end of text.
            Default value is 0, which does not limits the data text length.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.UseColorNames">
            <summary>
            If true (default) known colors are written by their name (Black). If false a hexedecimal ARGB display is used (0xFF000000).
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.DefaultImageUriFormatString">
            <summary>
            Gets or sets the format string that is used to write image's uri when ResolveImagePath delegate is not used. Default value is "image_{0}.{1}".
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.NameFormatString">
            <summary>
            Gets or sets a format string that is used to format object names. NameFormatString can be used to add suffix or prefix to the names - for example "Prefix_{0}_suffix". When NameFormatString is null or empty the name without any prefix or suffix is used.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.UseCanvasPositionForTranslateTransform">
            <summary>
            Gets or sets a Boolean that specifies if Canvas.Left and Canvas.Top are used instead of RenderTransform or LayoutTransform that are only translate transformations.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.WriteTransformationsAsElement">
            <summary>
            Gets or sets a Boolean that specifies if the transformations are written as inner elements or as attributes.
            </summary>
            <remarks>
            <para>
            If <b>WriteTransformationsAsElement</b> is <b>true</b> than the transformations are written as inner elements. For example:
            </para>
            <para>
            &lt;Canvas&gt;<br/>
                &lt;RenderTransform&gt;<br/>
                    &lt;MatrixTransform Matrix="1 0 0 1 10 20"/&gt;<br/>
                &lt;/RenderTransform&gt;<br/>
                ...
            </para>
            <para>
            If <b>WriteTransformationsAsElement</b> is <b>false</b> than the transformations are written as attributes. For example:
            </para>
            <code lang="xaml">
            &lt;Canvas RenderTransform="1 0 0 10 20"...
            </code>
            <para>
            <b>NOTE:</b><br/>
            For Silverlight projects the visual designer in Visual Studio 2010 and Expression Blend may not parse transformations as attributes correctly! It works correctly for WPF projects. So for Silverlight projects it is recommended to write transformations as elements.
            </para>
            </remarks>
        </member>
        <member name="F:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.DefaultXamlNamespaceDeclaration">
            <summary>
            Default Xaml Namespace declaration
            </summary>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.IResourceXamlWriterSettings">
            <summary>
            IResourceXamlWriterSettings interface is used to specify setting that tell Xaml Writer how to write Pens and Brushes as resources.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.IResourceXamlWriterSettings.ResourcesCountLimit">
            <summary>
            Defines if the pens and brushed are written into resources.
            If ResourcesCountLimit is equal or less than 0 than resources are not used.
            If ResourcesCountLimit is 1 than all pens and brushes are written to resources.
            If ResourcesCountLimit is 2 (or higher) than all pens and brushes that are used 2 (or more) times are written to resources.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.IResourceXamlWriterSettings.ResourcesBrushStartIndex">
            <summary>
            Start index used with <see cref="P:Ab2d.Common.ReaderSvg.IResourceXamlWriterSettings.ResourcesSolidColorBrushKeyFormatString"/>.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.IResourceXamlWriterSettings.ResourcesPenStartIndex">
            <summary>
            Start index used with <see cref="P:Ab2d.Common.ReaderSvg.IResourceXamlWriterSettings.ResourcesPenKeyFormatString"/>
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.IResourceXamlWriterSettings.ResourcesSolidColorBrushKeyFormatString">
            <summary>
            Format string used to format the SolidColorBrush resource keys.
            Default value is "Brush{0}"
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.IResourceXamlWriterSettings.ResourcesPenKeyFormatString">
            <summary>
            Format string used to format the Pen resource keys.
            Default value is "Pen{0}"
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.IResourceXamlWriterSettings.ResolveResourceKey">
            <summary>
            Callback to customize the resource key names used in GetXaml when <see cref="P:Ab2d.Common.ReaderSvg.IResourceXamlWriterSettings.ResourcesCountLimit"/> is bigger than 0.
            </summary>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings">
            <summary>
            SilverlightXamlWriterSettings defines settings for use with GetXaml method to get xaml defined for Silverlight.
            </summary>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.SilverlightVersionType">
            <summary>
            SilverlightVersionType defines the supported Silverlight versions
            </summary>
        </member>
        <member name="F:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.SilverlightVersionType.Silverlight_1">
            <summary>
            Silverlight 1.0 and 1.1
            </summary>
        </member>
        <member name="F:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.SilverlightVersionType.Silverlight_2">
            <summary>
            Silverlight 2.0
            </summary>
        </member>
        <member name="F:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.SilverlightVersionType.Silverlight_3">
            <summary>
            Silverlight 3.0
            </summary>
        </member>
        <member name="F:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.SilverlightVersionType.Silverlight_4">
            <summary>
            Silverlight 4.0
            </summary>
        </member>
        <member name="F:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.SilverlightVersionType.Silverlight_5">
            <summary>
            Silverlight 5.0
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.SilverlightVersion">
            <summary>
            Gets or sets the Silverlight version.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.IsSizeSetToPathElement">
            <summary>
            Gets of sets a Boolean that specifies if Width and Height are set to Path elements.
            This is a workaround for Visual Studio 2010 designer bug - without Width and Height set, the Path is not displayed in designer.
            Default value is true.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.FallbackBrush">
            <summary>
            Gets or sets a Brush that is used for Silverlight XAML instead of VisualBrush (default value is Brushes.White).
            </summary>
            <remarks>
            <para>
            When an element is using a VisualBrush it cannot be used in Silverlight. The FallbackBrush property is used to define the Brush that is used instead. The default value is Brushes.White.
            </para>
            </remarks>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.#ctor(Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.SilverlightVersionType)">
            <summary>
            Constructor
            </summary>
            <param name="silverlightVersion">silverlight version</param>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="silverlightVersion">silverlightVersion</param>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.WinRtXamlWriterSettings">
            <summary>
            WinRtXamlWriterSettings defines settings for use with GetXaml method to get XAML defined for Windows Runtime (Windows Store applications).
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.WinRtXamlWriterSettings.IsSizeSetToPathElement">
            <summary>
            Gets of sets a Boolean that specifies if Width and Height are set to Path elements.
            This is a workaround for Visual Studio 2010 designer bug - without Width and Height set, the Path is not displayed in designer.
            Default value is true.
            </summary>
        </member>
        <member name="P:Ab2d.Common.ReaderSvg.WinRtXamlWriterSettings.FallbackBrush">
            <summary>
            Gets or sets a Brush that is used for Windows Runtime XAML instead of brushes that are not supported in Windows Runtime (for example VisualBrush or RadialGradientBrush). Default value is Brushes.White.
            </summary>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.WinRtXamlWriterSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Ab2d.Common.ReaderSvg.WpfXamlWriterSettings">
            <summary>
            WpfXamlWriterSettings defines settings for use with GetXaml method to get xaml defined for WPF.
            </summary>
        </member>
        <member name="M:Ab2d.Common.ReaderSvg.WpfXamlWriterSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Ab2d.Controls.SvgDrawing">
            <summary>
            SvgDrawing is a Viewbox control that shows elements defined in svg file as WPF geometry drawing objects.
            The source of svg file is set by <see cref="P:Ab2d.Controls.SvgDrawing.Source"/> or <see cref="P:Ab2d.Controls.SvgDrawing.SourceStream"/> properties.
            </summary>
            <remarks>
            <para>
            The difference between SvgDrawing and <see cref="T:Ab2d.Controls.SvgViewbox"/> is that SvgViewbox gets objects as Shapes (Canvas, Path, Polyline, etc) and SvgDrawing produces Drawings (DrawingGeometry, StreamGeometry, etc).
            Drawings have better performance and lower memory consumption, but Shapes support more functionality - layout, focus, mouse events, etc.
            </para>
            <para>
            For more information about reading geometers see <see cref="M:Ab2d.ReaderSvg.ReadGeometry(System.String,Ab2d.Common.ReaderSvg.GeometrySettings)"/>.
            </para>
            <para>
            For more information about setting the optimization percent see <see cref="M:Ab2d.Common.ReaderSvg.GeometrySettings.FromOptimizationPercentage(System.Int32)"/>.
            </para>
            <para>
            SvgViewbox can be used in xaml. If you would like to read svg file in code and need some more advanced features and options please use <see cref="T:Ab2d.ReaderSvg"/>
            </para>
            <para>To read the svg file set <see cref="P:Ab2d.Controls.SvgDrawing.Source"/> property. It supports the Pack URI (see also "http://msdn2.microsoft.com/en-us/library/aa970069.aspx#Site_of_Origin_File_Pack_URIs"). Here are some of the example Sources that can be used to read svg file from various locations:</para>
            <list type="table">
                <listheader>
                    <term>URI string</term>
                    <description>Description</description>
            	</listheader>
                <item>
                    <term>Subfolder/ResourceFile.svg</term>
                    <description>Reads ResourceFile.svg from the application resources (embeded in the assembly) under Subfolder - set the file's Build Action to Resource</description>
                </item>
                <item>
                    <term>pack://application:,,,/Subfolder/ResourceFile.svg</term>
                    <description>Same as previous but this time with full pack URI</description>
                </item>
                <item>
                    <term>ContentFile.svg</term>
                    <description>Reads ContentFile.svg from the same folder as the application is running - set the file's Build Action to Content</description>
                </item>
                <item>
                    <term>pack://application:,,,/ReferencedAssembly;component/ResourceFile.svg</term>
                    <description>Reads ResourceFile.svg from the ReferencedAssembly resources.</description>
                </item>
                <item>
                    <term>pack://siteoforigin:,,,/File.svg</term>
                    <description>Reads File.svg from the same folder as the application is running - this is a loose file that means it is not included in the project</description>
                </item>
                <item>
                    <term>c:\images\File.svg</term>
                    <description>Reads File.svg from the specified file on the disk</description>
                </item>                    
                <item>
                    <term>http://www.mysite.com/images/File.svg</term>
                    <description>Reads File.svg from specified url location</description>
                </item>                    
            </list>
            <para>When using in code create new Uri with on of the above strings and set it to Source property.</para> 
            </remarks>
            <example>
            The following example shows myClipart.svg inside a Grid (the svg file's BuildAction is set to Resource). The svg file is read as Drawing that is fully optimized for better performance (if animated).
            <code lang="xml">
            &lt;Window x:Class="Ab2d.ReaderSvgSample"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ab2d="clr-namespace:Ab2d.Controls;assembly=Ab2d.ReaderSvg"
                    Title="Window1" Height="500" Width="500"/&gt;
                 &lt;Grid&gt;
                     &lt;ab2d:SvgDrawing Name="mySvgDrawing" Source="myClipart.svg"
                                      OptimizationPercent="100" Stretch="Uniform"/&gt;  
                 &lt;/Grid&gt;
            &lt;/Window>
            </code>
            <para>
            The following example shows how to read svg file from stream:
            </para>
            <code lang="C#">
            var streamResourceInfo = Application.GetResourceStream(new Uri("pack://application:,,,/Resources/home1.svg"));
            if (streamResourceInfo != null)
            {
                var mySvgImage = new Ab2d.Controls.SvgDrawing();
                mySvgImage.SourceStream = streamResourceInfo.Stream;
                mySvgImage.Width = 200;
                mySvgImage.Height = 100;
                
                myStackPanel.Controls.Add(mySvgImage);
            }
            </code>     
            </example>    
        </member>
        <member name="E:Ab2d.Controls.SvgDrawing.SvgFileLoading">
            <summary>
            Occurs before the reading of svg file is started.
            </summary>
        </member>
        <member name="E:Ab2d.Controls.SvgDrawing.SvgFileLoaded">
            <summary>
            Occurs when the reading of svg file is completed.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.SvgDrawing.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.SvgDrawing.OnCreateAutomationPeer">
            <summary>
            OnCreateAutomationPeer
            </summary>
            <returns>AutomationPeer</returns>
        </member>
        <member name="P:Ab2d.Controls.SvgDrawing.OptimizationPercent">
            <summary>
            Gets or sets the geometry optimization percent. 0 means no optimization, 100 means full optimization.
            </summary>
            <remarks>
            For more information see <see cref="M:Ab2d.Common.ReaderSvg.GeometrySettings.FromOptimizationPercentage(System.Int32)"/>.
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.SvgDrawing.Source">
            <summary>
            Gets or sets the Source of the svg or svgz file
            </summary>
        </member>
        <member name="P:Ab2d.Controls.SvgDrawing.SourceStream">
            <summary>
            Stream that is used to read svg file. When this property is set (not null) it is used instead of <see cref="P:Ab2d.Controls.SvgDrawing.Source"/> property.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.SvgDrawing.Stretch">
            <summary>
            Gets or sets the SvgDrawing.Windows.Media.Stretch
            mode, which determines how content fits into the available space.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.SvgDrawing.StretchDirection">
            <summary>
            Gets or sets the System.Windows.Controls.StretchDirection, which determines
            how scaling is applied to the contents of a SvgDrawing.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.SvgDrawing.InnerReaderSvg">
            <summary>
            Gets the ReaderSvg that was used to read the svg or svgz file.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.SvgDrawing.InnerImage">
            <summary>
            Gets the Image returned by last read with ReaderSvg.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.SvgDrawing.AutoSize">
            <summary>
            If true (default) the size of main canvas is calculated from the size of all inner objects. This means that the returned objects will be just as big as its contain objects.
            If false the size of svg element is used for the size of main canvas. This is useful for example if you were working on a Letter area and would like to preserve the position of objects inside the Letter.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.SvgDrawing.NamedObjectsSource">
            <summary>
            Gets or sets one of the <see cref="T:Ab2d.ReaderSvg.NamedObjectsSourceType"/> as the source to get the object's name. Default value is NamedObjectsSourceType.Auto.
            </summary>
            <remarks>
            <para>
            The name is used to fill the <see cref="P:Ab2d.ReaderSvg.NamedObjects"/> dictionary or as the Name property in the exported XAML.
            The names can be get from the id attribute of the svg element or from the title element. Usually names are set from id attribute. But some applications (for example Microsoft Visio) do not allow to change id attribute but instead set the title element.
            </para>
            <para>
            Setting NamedObjectsSource to Title or TitleIfExist (Id is used if title does not exist) is useful so users can specify the name of the created WPF elements in the application that created the svg file.
            </para>
            <para>
            By default NamedObjectsSource is set to <b>Auto</b>. This means that ReaderSvg tries to define the source of the name with checking which application created the svg file - for example for files created in Microsoft Visio the TitleIfExist is used internally.
            </para>
            <para>
            Note that the name must start with a letter or underscore and can contain only letters, digits, or underscores. If this is not the case than the name is corrected by ReaderSvg (underscores are used instead of irregular characters).
            </para>
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.SvgDrawing.SourceProperty">
            <summary>
            SourceProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.SvgDrawing.SourceStreamProperty">
            <summary>
            SourceProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.SvgDrawing.OptimizationPercentProperty">
            <summary>
            OptimizationPercentProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.SvgDrawing.StretchDirectionProperty">
            <summary>
            StretchDirectionProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.SvgDrawing.StretchProperty">
            <summary>
            StretchProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.SvgDrawing.AutoSizeProperty">
            <summary>
            AutoSizeProperty
            </summary>
        </member>
        <member name="M:Ab2d.Controls.SvgDrawing.ReadSvg(System.Uri,System.Int32)">
            <summary>
            Reads svg or svgz file from sourceUri and with optimizationPercent
            </summary>
            <param name="sourceUri">sourceUri</param>
            <param name="optimizationPercent">optimizationPercent</param>
        </member>
        <member name="M:Ab2d.Controls.SvgDrawing.ReadSvg(System.Uri,System.IO.Stream,System.Int32)">
            <summary>
            Reads svg file from sourceUri or sourceStream and with the specified optimizationPercent
            </summary>
            <param name="sourceUri">sourceUri</param>
            <param name="sourceStream">sourceStream</param>
            <param name="optimizationPercent">optimizationPercent</param>
        </member>
        <member name="M:Ab2d.Controls.SvgDrawing.OnSvgFileLoading(System.Uri,System.IO.Stream)">
            <summary>
            OnSvgFileLoading is called before the svg file is read. The method can be overridden in derived class.
            </summary>
            <param name="svgFileUri">svg file Uri</param>
            <param name="svgFileStream">Stream that will be used to read the svg file</param>
            <returns>Stream that will be used to read the svg file</returns>
        </member>
        <member name="M:Ab2d.Controls.SvgDrawing.OnSvgFileLoaded(System.Uri,System.Windows.Controls.Image)">
            <summary>
            OnSvgFileLoaded is called after the svg file has been read. The method can be overridden in derived class.
            </summary>
            <param name="svgFileUri">svg file Uri</param>
            <param name="readSvgFile">Image with read svg file</param>
        </member>
        <member name="M:Ab2d.Controls.SvgDrawing.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Ab2d.Controls.SvgDrawing.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Ab2d.Controls.SvgDrawing.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            OnRender
            </summary>
            <param name="dc"></param>
        </member>
        <member name="T:Ab2d.Controls.SvgDrawingAutomationPeer">
            <summary>
            SvgDrawingAutomationPeer class used for UI Automation
            </summary>
        </member>
        <member name="M:Ab2d.Controls.SvgDrawingAutomationPeer.#ctor(Ab2d.Controls.SvgDrawing)">
            <summary>
            Constructor
            </summary>
            <param name="owner">owner</param>
        </member>
        <member name="M:Ab2d.Controls.SvgDrawingAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            GetAutomationControlTypeCore
            </summary>
            <returns>AutomationControlType</returns>
        </member>
        <member name="M:Ab2d.Controls.SvgDrawingAutomationPeer.GetClassNameCore">
            <summary>
            GetClassNameCore
            </summary>
            <returns>SvgDrawing</returns>
        </member>
        <member name="T:Ab2d.Controls.SvgViewbox">
            <summary>
            SvgViewbox is a Viewbox control that shows elements defined in svg file as WPF Shapes in a Viewbox control.
            The source of svg file is set by <see cref="P:Ab2d.Controls.SvgViewbox.Source"/> or <see cref="P:Ab2d.Controls.SvgViewbox.SourceStream"/> properties.
            </summary>
            <remarks>
            <para>SvgViewbox is using <see cref="T:Ab2d.ReaderSvg"/> library to read the svg file and convert it into WPF elements. </para>
            <para>To read the svg file set <see cref="P:Ab2d.Controls.SvgViewbox.Source"/> or <see cref="P:Ab2d.Controls.SvgViewbox.SourceStream"/> property. 
            It supports the Pack URI (see also "http://msdn2.microsoft.com/en-us/library/aa970069.aspx#Site_of_Origin_File_Pack_URIs"). Here are some of the example Sources that can be used to read svg file from various locations:</para>
            <list type="table">
                <listheader>
                    <term>URI string</term>
                    <description>Description</description>
            	</listheader>
                <item>
                    <term>Subfolder/ResourceFile.svg</term>
                    <description>Reads ResourceFile.svg from the application resources (embeded in the assembly) under Subfolder - set the file's Build Action to Resource</description>
                </item>
                <item>
                    <term>pack://application:,,,/Subfolder/ResourceFile.svg</term>
                    <description>Same as previous but this time with full pack URI</description>
                </item>
                <item>
                    <term>ContentFile.svg</term>
                    <description>Reads ContentFile.svg from the same folder as the application is running - set the file's Build Action to Content</description>
                </item>
                <item>
                    <term>pack://application:,,,/ReferencedAssembly;component/ResourceFile.svg</term>
                    <description>Reads ResourceFile.svg from the ReferencedAssembly resources.</description>
                </item>
                <item>
                    <term>pack://siteoforigin:,,,/File.svg</term>
                    <description>Reads File.svg from the same folder as the application is running - this is a loose file that means it is not included in the project</description>
                </item>
                <item>
                    <term>c:\images\File.svg</term>
                    <description>Reads File.svg from the specified file on the disk</description>
                </item>                    
                <item>
                    <term>http://www.mysite.com/images/File.svg</term>
                    <description>Reads File.svg from specified url location</description>
                </item>                    
            </list>
            <para>When using in code create new Uri with on of the above strings and set it to Source property.</para>
            </remarks>
            <example>
            <para>
            The following example shows how to use SvgViewbox xaml.
            </para>
            <code lang="xaml">
            &lt;ab2d:SvgViewbox Source="Images/MyImage.svg" Width="200" Height="100"/&gt;
            </code>
            <para>
            The following example shows how to use SvgViewbox in code:
            </para>
            <code lang="C#">
            var mySvgImage = new Ab2d.Controls.SvgViewbox();
            mySvgImage.Source = new Uri("Images/MyImage.svg");
            mySvgImage.Width = 200;
            mySvgImage.Height = 100;
            
            myStackPanel.Controls.Add(mySvgImage);
            </code>
            <para>
            The following example shows how to read svg file from stream:
            </para>
            <code lang="C#">
            var streamResourceInfo = Application.GetResourceStream(new Uri("pack://application:,,,/Resources/home1.svg"));
            if (streamResourceInfo != null)
            {
                var mySvgImage = new Ab2d.Controls.SvgViewbox();
                mySvgImage.SourceStream = streamResourceInfo.Stream;
                mySvgImage.Width = 200;
                mySvgImage.Height = 100;
                
                myStackPanel.Controls.Add(mySvgImage);
            }
            </code>    
            </example>
        </member>
        <member name="E:Ab2d.Controls.SvgViewbox.SvgFileLoading">
            <summary>
            Occurs before the reading of svg file is started.
            </summary>
        </member>
        <member name="E:Ab2d.Controls.SvgViewbox.SvgFileLoaded">
            <summary>
            Occurs when the reading of svg file is completed.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.SvgViewbox.#ctor">
            <summary>
            Constructor for SvgViewbox.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.SvgViewbox.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="P:Ab2d.Controls.SvgViewbox.NamedObjects">
            <summary>
            Dictionary defined from elements in svg file. Elements ids are keys and its appropriate objects are values.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.SvgViewbox.Source">
            <summary>
            Source or the svg or svgz image.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.SvgViewbox.SourceStream">
            <summary>
            Stream that is used to read svg file. When this property is set (not null) it is used instead of <see cref="P:Ab2d.Controls.SvgViewbox.Source"/> property.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.SvgViewbox.AutoSize">
            <summary>
            If true (default) the size of main canvas is calculated from the size of all inner objects. This means that the returned objects will be just as big as its contain objects.
            If false the size of svg element is used for the size of main canvas. This is useful for example if you were working on a Letter area and would like to preserve the position of objects inside the Letter.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.SvgViewbox.NamedObjectsSource">
            <summary>
            Gets or sets one of the <see cref="T:Ab2d.ReaderSvg.NamedObjectsSourceType"/> as the source to get the object's name. Default value is NamedObjectsSourceType.Auto.
            </summary>
            <remarks>
            <para>
            The name is used to fill the <see cref="P:Ab2d.ReaderSvg.NamedObjects"/> dictionary or as the Name property in the exported XAML.
            The names can be get from the id attribute of the svg element or from the title element. Usually names are set from id attribute. But some applications (for example Microsoft Visio) do not allow to change id attribute but instead set the title element.
            </para>
            <para>
            Setting NamedObjectsSource to Title or TitleIfExist (Id is used if title does not exist) is useful so users can specify the name of the created WPF elements in the application that created the svg file.
            </para>
            <para>
            By default NamedObjectsSource is set to <b>Auto</b>. This means that ReaderSvg tries to define the source of the name with checking which application created the svg file - for example for files created in Microsoft Visio the TitleIfExist is used internally.
            </para>
            <para>
            Note that the name must start with a letter or underscore and can contain only letters, digits, or underscores. If this is not the case than the name is corrected by ReaderSvg (underscores are used instead of irregular characters).
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.SvgViewbox.InnerReaderSvg">
            <summary>
            Gets the ReaderSvg that was used to read the svg file. Useful to get the properties of ReaderSvg for example NamedObjects (gets the names of objects as defined in svg file)
            </summary>
        </member>
        <member name="F:Ab2d.Controls.SvgViewbox.SourceProperty">
            <summary>
            SourceProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.SvgViewbox.SourceStreamProperty">
            <summary>
            SourceProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.SvgViewbox.AutoSizeProperty">
            <summary>
            AutoSizeProperty
            </summary>
        </member>
        <member name="M:Ab2d.Controls.SvgViewbox.ReadSvg(System.Uri)">
            <summary>
            Reads svg file from sourceUri. This method can be overridden to provide reading svg files from some other source.
            </summary>
            <param name="sourceUri">sourceUri</param>
        </member>
        <member name="M:Ab2d.Controls.SvgViewbox.ReadSvg(System.Uri,System.IO.Stream)">
            <summary>
            Reads svg file from sourceUri or sourceStream.
            This method can be overridden to provide reading svg files from some other source.
            </summary>
            <param name="sourceUri">sourceUri</param>
            <param name="sourceStream">sourceStream</param>
        </member>
        <member name="M:Ab2d.Controls.SvgViewbox.OnSvgFileLoading(System.Uri,System.IO.Stream)">
            <summary>
            OnSvgFileLoading is called before the svg file is read. The method can be overridden in derived class.
            </summary>
            <param name="svgFileUri">svg file Uri</param>
            <param name="svgFileStream">Stream that will be used to read the svg file</param>
            <returns>Stream that will be used to read the svg file</returns>
        </member>
        <member name="M:Ab2d.Controls.SvgViewbox.OnSvgFileLoaded(System.Uri,System.Windows.Controls.Viewbox)">
            <summary>
            OnSvgFileLoaded is called after the svg file has been read. The method can be overriden in derived class.
            </summary>
            <param name="svgFileUri">svg file Uri</param>
            <param name="readSvgFile">Image with read svg file</param>
        </member>
        <member name="T:Ab2d.Controls.SvgViewboxAutomationPeer">
            <summary>
            SvgViewboxAutomationPeer class provides support for UI automation
            </summary>
        </member>
        <member name="M:Ab2d.Controls.SvgViewboxAutomationPeer.#ctor(Ab2d.Controls.SvgViewbox)">
            <summary>
            Constructor
            </summary>
            <param name="owner">SvgViewbox</param>
        </member>
        <member name="M:Ab2d.Controls.SvgViewboxAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            GetAutomationControlTypeCore
            </summary>
            <returns>AutomationControlType</returns>
        </member>
        <member name="M:Ab2d.Controls.SvgViewboxAutomationPeer.GetClassNameCore">
            <summary>
            GetClassNameCore
            </summary>
            <returns>SvgViewbox</returns>
        </member>
        <member name="T:Ab2d.GdiConverter.Common.GraphicPathType">
            <summary>
            See ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.NETFX30SDK4VS.1033/cpref11/html/P_System_Drawing_Drawing2D_GraphicsPath_PathTypes.htm
            </summary>
        </member>
        <member name="F:Ab2d.GdiConverter.Common.GraphicPathType.StartPoint">
            <summary>
            Indicates that the point is the start of a figure. 
            </summary>
        </member>
        <member name="F:Ab2d.GdiConverter.Common.GraphicPathType.LineEndpoint">
            <summary>
            Indicates that the point is one of the two endpoints of a line. 
            </summary>
        </member>
        <member name="F:Ab2d.GdiConverter.Common.GraphicPathType.ConrolPoint">
            <summary>
            Indicates that the point is an endpoint or control point of a cubic Bézier spline. 
            </summary>
        </member>
        <member name="F:Ab2d.GdiConverter.Common.GraphicPathType.GraphicPathTypePointTypeMask">
            <summary>
            Masks all bits except for the three low-order bits, which indicate the point type. 
            </summary>
        </member>
        <member name="F:Ab2d.GdiConverter.Common.GraphicPathType.GraphicPathMarkerPoint">
            <summary>
            Specifies that the point is a marker. 
            </summary>
        </member>
        <member name="F:Ab2d.GdiConverter.Common.GraphicPathType.LastPoint">
            <summary>
            Specifies that the point is the last point in a closed subpath (figure).
            </summary>
        </member>
        <member name="T:Ab2d.GdiPaint.GradientPaintServer">
            <summary>
            Summary description for PaintServer.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Attribute">
            <summary>
            Summary description for Attribute.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.CDataSection">
            <summary>
            Summary description for CDataSection.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Comment">
            <summary>
            Summary description for Comment.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssCharsetRule">
            <summary>
            The CSSCharsetRule interface represents a @charset rule in a CSS style sheet. The value of the encoding attribute does not affect the encoding of text data in the DOM objects; this encoding is always UTF-16. After a stylesheet is loaded, the value of the encoding attribute is the value found in the @charset rule. If there was no @charset in the original document, then no CSSCharsetRule is created. The value of the encoding attribute may also be used as a hint for the encoding used on serialization of the style sheet.
            The value of the @charset rule (and therefore of the CSSCharsetRule) may not correspond to the encoding the document actually came in; character encoding information e.g. in an HTTP header, has priority (see CSS document representation) but this is not reflected in the CSSCharsetRule.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssCharsetRule.#ctor(System.Text.RegularExpressions.Match,System.Object,System.Boolean,System.String[],Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            The constructor for CssCharSetRule
            </summary>
            <param name="match">The Regex match that found the charset rule</param>
            <param name="parent">The parent rule or parent stylesheet</param>
            <param name="readOnly">True if this instance is readonly</param>
            <param name="replacedStrings">An array of strings that have been replaced in the string used for matching. These needs to be put back use the DereplaceStrings method</param>
            <param name="origin">The type of CssStyleSheet</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssCharsetRule.Encoding">
            <summary>
            The encoding information used in this @charset rule
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssCharsetRule.Type">
            <summary>
            The type of the rule. The expectation is that binding-specific casting methods can be used to cast down from an instance of the CSSRule interface to the specific derived interface implied by the type.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedProperty">
            <summary>
            Used internally to store collected properties.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedProperty.Name">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedProperty.Specificity">
            <summary>
            The calculated specificity
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedProperty.Origin">
            <summary>
            The origin of the collected property.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedProperty.CssValue">
            <summary>
            The value of the property
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedProperty.Priority">
            <summary>
            The priority of the property, e.g. "important"
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration">
            <summary>
            Used internally for collection of styles for a specific element
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration.GetPropertyOrigin(System.String)">
            <summary>
            Returns the origin type of the collected property
            </summary>
            <param name="propertyName">The name of the property</param>
            <returns>The origin type</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration.GetPropertyPriority(System.String)">
            <summary>
            Used to retrieve the priority of a CSS property (e.g. the "important" qualifier) if the property has been explicitly set in this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>A string representing the priority (e.g. "important") if one exists. The empty string if none exists.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration.GetPropertyValue(System.String)">
            <summary>
            Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set.</returns>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration.Length">
            <summary>
            The number of properties that have been explicitly set in this declaration block. The range of valid indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration.CssText">
            <summary>
            The parsable textual representation of the declaration block (excluding the surrounding curly braces). Setting this attribute will result in the parsing of the new value and resetting of all the properties in the declaration block including the removal or addition of properties.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or a property is readonly.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration.Item(System.UInt64)">
            <summary>
            Used to retrieve the properties that have been explicitly set in this declaration block. The order of the properties retrieved using this method does not have to be the order in which they were set. This method can be used to iterate over all properties in this declaration block.
            The name of the property at this ordinal position. The empty string if no property exists at this position.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssFontFaceRule">
            <summary>
            The CSSFontFaceRule interface represents a @font-face rule in a CSS style sheet. The @font-face rule is used to hold a set of font descriptions.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssFontFaceRule.Parse(System.String@,System.Object,System.Boolean,System.String[],Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            Parses a string containging CSS and creates a CssFontFaceRule instance if found as the first content
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssFontFaceRule.#ctor(System.Text.RegularExpressions.Match,System.Object,System.Boolean,System.String[],Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            The constructor for CssFontFaceRule
            </summary>
            <param name="match">The Regex match that found the charset rule</param>
            <param name="parent">The parent rule or parent stylesheet</param>
            <param name="readOnly">True if this instance is readonly</param>
            <param name="replacedStrings">An array of strings that have been replaced in the string used for matching. These needs to be put back use the DereplaceStrings method</param>
            <param name="origin">The type of CssStyleSheet</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssFontFaceRule.Style">
            <summary>
            The declaration-block of this rule.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssFontFaceRule.Type">
            <summary>
            The type of the rule. The expectation is that binding-specific casting methods can be used to cast down from an instance of the CSSRule interface to the specific derived interface implied by the type.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssImportRule">
            <summary>
            The CSSImportRule interface represents a @import rule within a CSS style sheet. The @import rule is used to import style rules from other style sheets.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssImportRule.#ctor(System.Text.RegularExpressions.Match,System.Object,System.Boolean,System.String[],Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            The constructor for CssImportRule
            </summary>
            <param name="match">The Regex match that found the charset rule</param>
            <param name="parent">The parent rule or parent stylesheet</param>
            <param name="readOnly">True if this instance is readonly</param>
            <param name="replacedStrings">An array of strings that have been replaced in the string used for matching. These needs to be put back use the DereplaceStrings method</param>
            <param name="origin">The type of CssStyleSheet</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssImportRule.GetStylesForElement(System.Xml.XmlElement,System.String,Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList,Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration)">
            <summary>
            Used to find matching style rules in the cascading order
            </summary>
            <param name="elt">The element to find styles for</param>
            <param name="pseudoElt">The pseudo-element to find styles for</param>
            <param name="ml">The medialist that the document is using</param>
            <param name="csd">A CssStyleDeclaration that holds the collected styles</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssImportRule.StyleSheet">
            <summary>
            The style sheet referred to by this rule, if it has been loaded. The value of this attribute is null if the style sheet has not yet been loaded or if it will not be loaded (e.g. if the style sheet is for a media type not supported by the user agent).
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssImportRule.Media">
            <summary>
            A list of media types for which this style sheet may be used.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssImportRule.Href">
            <summary>
            The location of the style sheet to be imported. The attribute will not contain the "url(...)" specifier around the URI
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssImportRule.Type">
            <summary>
            The type of the rule. The expectation is that binding-specific casting methods can be used to cast down from an instance of the CSSRule interface to the specific derived interface implied by the type.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssMediaRule">
            <summary>
            The CSSMediaRule interface represents a @media rule in a CSS style sheet. A @media rule can be used to delimit style rules for specific media types.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssMediaRule.#ctor(System.Text.RegularExpressions.Match,System.Object,System.Boolean,System.String[],Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            The constructor for CssMediaRule
            </summary>
            <param name="match">The Regex match that found the charset rule</param>
            <param name="parent">The parent rule or parent stylesheet</param>
            <param name="readOnly">True if this instance is readonly</param>
            <param name="replacedStrings">An array of strings that have been replaced in the string used for matching. These needs to be put back use the DereplaceStrings method</param>
            <param name="origin">The type of CssStyleSheet</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssMediaRule.GetStylesForElement(System.Xml.XmlElement,System.String,Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList,Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration)">
            <summary>
            Used to find matching style rules in the cascading order
            </summary>
            <param name="elt">The element to find styles for</param>
            <param name="pseudoElt">The pseudo-element to find styles for</param>
            <param name="ml">The medialist that the document is using</param>
            <param name="csd">A CssStyleDeclaration that holds the collected styles</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssMediaRule.DeleteRule(System.UInt64)">
            <summary>
            Used to delete a rule from the media block.
            </summary>
            <param name="index">The index within the media block's rule collection of the rule to remove.</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the media rule list.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this media rule is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssMediaRule.InsertRule(System.String,System.UInt64)">
            <summary>
            Used to insert a new rule into the media block
            </summary>
            <param name="rule">The parsable text representing the rule. For rule sets this contains both the selector and the style declaration. For at-rules, this specifies both the at-identifier and the rule content.</param>
            <param name="index">The index within the media block's rule collection of the rule before which to insert the specified rule. If the specified index is equal to the length of the media blocks's rule collection, the rule will be added to the end of the media block.</param>
            <returns>The index within the media block's rule collection of the newly inserted rule.</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at the specified index, e.g., if an @import rule is inserted after a standard rule set or other at-rule.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INDEX_SIZE_ERR: Raised if the specified index is not a valid insertion point.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this media rule is readonly</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified rule has a syntax error and is unparsable</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssMediaRule.CssRules">
            <summary>
            A list of all CSS rules contained within the media block.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssMediaRule.Media">
            <summary>
            A list of media types for this rule
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssMediaRule.Type">
            <summary>
            The type of the rule. The expectation is that binding-specific casting methods can be used to cast down from an instance of the CSSRule interface to the specific derived interface implied by the type.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssPageRule">
            <summary>
            The CSSPageRule interface represents a @page rule within a CSS style sheet. The @page rule is used to specify the dimensions, orientation, margins, etc. of a page box for paged media.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssPageRule.#ctor(System.Text.RegularExpressions.Match,System.Object,System.Boolean,System.String[],Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            The constructor for CssPageRule
            </summary>
            <param name="match">The Regex match that found the charset rule</param>
            <param name="parent">The parent rule or parent stylesheet</param>
            <param name="readOnly">True if this instance is readonly</param>
            <param name="replacedStrings">An array of strings that have been replaced in the string used for matching. These needs to be put back use the DereplaceStrings method</param>
            <param name="origin">The type of CssStyleSheet</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssPageRule.SelectorText">
            <summary>
            The parsable textual representation of the page selector for the rule.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssPageRule.Style">
            <summary>
            The declaration-block of this rule.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssPageRule.Type">
            <summary>
            The type of the rule. The expectation is that binding-specific casting methods can be used to cast down from an instance of the CSSRule interface to the specific derived interface implied by the type.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveRgbValue.IsColorName(System.String)">
            <developer>scasquiov squerniovsqui</developer>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType">
            <summary>
            	The CssPrimativeType Enum Class contains the list of 
            	possible primative value types in CSS.  This class is an
            	extension of the CSS spec.  The CSS spec has a list of constants
            	instead of an enum class.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Unknown">
            <summary>
            The value is not a recognized CSS2 value. The value can only be obtained by using the cssText attribute.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Number">
            <summary>
            The value is a simple number. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Percentage">
            <summary>
            The value is a percentage. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Ems">
            <summary>
            The value is a length (ems). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Exs">
            <summary>
            The value is a length (exs). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Px">
            <summary>
            The value is a length (px). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Cm">
            <summary>
            The value is a length (cm). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Mm">
            <summary>
            The value is a length (mm). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.In">
            <summary>
            The value is a length (in). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Pt">
            <summary>
            The value is a length (pt). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Pc">
            <summary>
            The value is a length (pc). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Deg">
            <summary>
            The value is an angle (deg). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Rad">
            <summary>
            The value is an angle (rad). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Grad">
            <summary>
            The value is an angle (grad). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Ms">
            <summary>
            The value is a time (ms). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.S">
            <summary>
            The value is a time (s). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Hz">
            <summary>
            The value is a frequency (Hz). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.KHz">
            <summary>
            The value is a frequency (kHz). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Dimension">
            <summary>
            The value is a number with an unknown dimension. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.String">
            <summary>
            The value is a STRING. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Uri">
            <summary>
            The value is a URI. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Ident">
            <summary>
            The value is an identifier. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Attr">
            <summary>
            The value is a attribute function. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Counter">
            <summary>
            The value is a counter or counters function. The value can be obtained by using the getCounterValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.Rect">
            <summary>
            The value is a rect function. The value can be obtained by using the getRectValue method.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType.RgbColor">
            <summary>
            The value is a RGB color. The value can be obtained by using the getRGBColorValue method.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveValue">
            <summary>
            The CSSPrimitiveValue interface represents a single CSS value. This interface may be used to determine the value of a specific style property currently set in a block or to set a specific style property explicitly within the block. An instance of this interface might be obtained from the getPropertyCSSValue method of the CSSStyleDeclaration interface. A CSSPrimitiveValue object only occurs in a context of a CSS property.
            Conversions are allowed between absolute values (from millimeters to centimeters, from degrees to radians, and so on) but not between relative values. (For example, a pixel value cannot be converted to a centimeter value.) Percentage values can't be converted since they are relative to the parent value (or another property value). There is one exception for color percentage values: since a color percentage value is relative to the range 0-255, a color percentage value can be converted to a number; (see also the RGBColor interface).
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveValue.#ctor(System.Text.RegularExpressions.Match,System.Boolean)">
            <summary>
            Constructor called by CssValue.GetCssValue()
            </summary>
            <param name="match">A Regex that matches a CssPrimitiveValue</param>
            <param name="readOnly">Specifiec if this instance is read-only</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveValue.#ctor">
            <summary>
            Only for internal use
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveValue.SetFloatValue(Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType,System.Double)">
            <summary>
            A method to set the float value with a specified unit. If the property attached with this value can not accept the specified unit or the float value, the value will be unchanged and a DOMException will be raised.
            </summary>
            <param name="unitType">A unit code as defined above. The unit code can only be a float unit type (i.e. CSS_NUMBER, CSS_PERCENTAGE, CSS_EMS, CSS_EXS, CSS_PX, CSS_CM, CSS_MM, CSS_IN, CSS_PT, CSS_PC, CSS_DEG, CSS_RAD, CSS_GRAD, CSS_MS, CSS_S, CSS_HZ, CSS_KHZ, CSS_DIMENSION).</param>
            <param name="floatValue">The new float value.</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a float value.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveValue.GetFloatValue(Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType)">
            <summary>
            This method is used to get a float value in a specified unit. If this CSS value doesn't contain a float value or can't be converted into the specified unit, a DOMException is raised
            </summary>
            <param name="unitType">A unit code to get the float value. The unit code can only be a float unit type (i.e. CSS_NUMBER, CSS_PERCENTAGE, CSS_EMS, CSS_EXS, CSS_PX, CSS_CM, CSS_MM, CSS_IN, CSS_PT, CSS_PC, CSS_DEG, CSS_RAD, CSS_GRAD, CSS_MS, CSS_S, CSS_HZ, CSS_KHZ, CSS_DIMENSION).</param>
            <returns>The float value in the specified unit.</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a float value.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveValue.SetStringValue(Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType,System.String)">
            <summary>
            A method to set the string value with the specified unit. If the property attached to this value can't accept the specified unit or the string value, the value will be unchanged and a DOMException will be raised.
            </summary>
            <param name="stringType">A string code as defined above. The string code can only be a string unit type (i.e. CSS_STRING, CSS_URI, CSS_IDENT, and CSS_ATTR).</param>
            <param name="stringValue">The new string value</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveValue.GetStringValue">
            <summary>
            This method is used to get the string value. If the CSS value doesn't contain a string value, a DOMException is raised.
            Note: Some properties (like 'font-family' or 'voice-family') convert a whitespace separated list of idents to a string.
            </summary>
            <returns>The string value in the current unit. The current primitiveType can only be a string unit type (i.e. CSS_STRING, CSS_URI, CSS_IDENT and CSS_ATTR).</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveValue.GetCounterValue">
            <summary>
            This method is used to get the Counter value. If this CSS value doesn't contain a counter value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Counter interface
            </summary>
            <returns>The Counter value.</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Counter value (e.g. this is not CSS_COUNTER).</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveValue.GetRectValue">
            <summary>
            This method is used to get the Rect value. If this CSS value doesn't contain a rect value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Rect interface.
            </summary>
            <returns>The Rect value.</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a rect value.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveValue.GetRgbColorValue">
            <summary>
            This method is used to get the RGB color. If this CSS value doesn't contain a RGB color value, a DOMException is raised. Modification to the corresponding style property can be achieved using the RGBColor interface.
            </summary>
            <returns>the RGB color value.</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a rgb value.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveValue.PrimitiveType">
            <summary>
            The type of the value as defined by the constants specified above.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssRule.Origin">
            <summary>
            The origin stylesheet type of this rule
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssRule.ReadOnly">
            <summary>
            Specifies the read/write state of the instance
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssRule.GetStylesForElement(System.Xml.XmlElement,System.String,Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList,Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration)">
            <summary>
            Used to find matching style rules in the cascading order
            </summary>
            <param name="elt">The element to find styles for</param>
            <param name="pseudoElt">The pseudo-element to find styles for</param>
            <param name="ml">The medialist that the document is using</param>
            <param name="csd">A CssStyleDeclaration that holds the collected styles</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssRule.ResolveOwnerNode">
            <summary>
            Finds the owner node of this rule
            </summary>
            <returns>The owner XmlNode</returns>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssRule.ParentStyleSheet">
            <summary>
            The style sheet that contains this rule
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssRule.ParentRule">
            <summary>
            If this rule is contained inside another rule (e.g. a style rule inside an @media block), this is the containing rule. If this rule is not nested inside any other rules, this returns null
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssRule.Type">
            <summary>
            The type of the rule, as defined above. The expectation is that binding-specific casting methods can be used to cast down from an instance of the CSSRule interface to the specific derived interface implied by the type.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssRule.CssText">
            <summary>
            The parsable textual representation of the rule. This reflects the current state of the rule and not its initial value.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssRuleList">
            <summary>
            The CSSRuleList interface provides the abstraction of an ordered collection of CSS rules.
            The items in the CSSRuleList are accessible via an integral index, starting from 0.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssRuleList.#ctor(System.String@,System.Object,System.String[],Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            Constructor for CssRuleList
            </summary>
            <param name="parent">The parent rule or parent stylesheet</param>
            <param name="cssText">The CSS text containing the rules that will be in this list</param>
            <param name="replacedStrings">An array of strings that have been replaced in the string used for matching. These needs to be put back use the DereplaceStrings method</param>
            <param name="origin">The type of CssStyleSheet</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssRuleList.#ctor(System.String@,System.Object,System.String[],System.Boolean,Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            Constructor for CssRuleList
            </summary>
            <param name="parent">The parent rule or parent stylesheet</param>
            <param name="cssText">The CSS text containing the rules that will be in this list</param>
            <param name="readOnly">True if this instance is readonly</param>
            <param name="replacedStrings">An array of strings that have been replaced in the string used for matching. These needs to be put back use the DereplaceStrings method</param>
            <param name="origin">The type of CssStyleSheet</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssRuleList.GetStylesForElement(System.Xml.XmlElement,System.String,Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList,Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration)">
            <summary>
            Used to find matching style rules in the cascading order
            </summary>
            <param name="elt">The element to find styles for</param>
            <param name="pseudoElt">The pseudo-element to find styles for</param>
            <param name="ml">The medialist that the document is using</param>
            <param name="csd">A CssStyleDeclaration that holds the collected styles</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssRuleList.DeleteRule(System.UInt64)">
            <summary>
            Deletes a rule from the list
            </summary>
            <param name="index">The index of the rule to delete</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INDEX_SIZE_ERR</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssRuleList.Length">
            <summary>
            The number of CSSRules in the list. The range of valid child rule indices is 0 to length-1 inclusive
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssRuleList.Item(System.UInt64)">
            <summary>
                Used to retrieve a CSS rule by ordinal index. The order in this collection represents the order of the rules in the CSS style sheet. If index is greater than or equal to the number of rules in the list, this returns null
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssRuleType">
            <summary>
                The CssRuleType Enum Class contains the possible Rule Type
                Values.  This is an extension of the CSS spec.  The spec
                contains only a list of contstant in the CssRule Interface. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssRuleType.UnknownRule">
            <summary>
            The rule is a CSSUnknownRule.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssRuleType.StyleRule">
            <summary>
            The rule is a CSSStyleRule.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssRuleType.CharsetRule">
            <summary>
            The rule is a CSSCharsetRule.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssRuleType.ImportRule">
            <summary>
            The rule is a CSSImportRule.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssRuleType.MediaRule">
            <summary>
            The rule is a CSSMediaRule.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssRuleType.FontFaceRule">
            <summary>
            The rule is a CSSFontFaceRule.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssRuleType.PageRule">
            <summary>
            The rule is a CSSPageRule.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration">
            <summary>
            The CSSStyleDeclaration interface represents a single CSS declaration block. This interface may be used to determine the style properties currently set in a block or to set style properties explicitly within the block.
            While an implementation may not recognize all CSS properties within a CSS declaration block, it is expected to provide access to all specified properties in the style sheet through the CSSStyleDeclaration interface. Furthermore, implementations that support a specific level of CSS should correctly handle CSS shorthand properties for that level. For a further discussion of shorthand properties, see the CSS2Properties interface.
            This interface is also used to provide a read-only access to the computed values of an element. See also the ViewCSS interface.
            Note: The CSS Object Model doesn't provide an access to the specified or actual values of the CSS cascade
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.#ctor">
            <summary>
            The constructor used internally when collecting styles for a specified element
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.#ctor(System.String@,Ab2d.Internal.SvgDom.Dom.Css.CssRule,System.Boolean,Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            The constructor for CssStyleDeclaration
            </summary>
            <param name="css">The string to parse for CSS</param>
            <param name="parentRule">The parent rule or parent stylesheet</param>
            <param name="readOnly">True if this instance is readonly</param>
            <param name="origin">The type of CssStyleSheet</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.GetStylesForElement(Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration,System.Int32)">
            <summary>
            Used to find matching style rules in the cascading order
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.SetProperty(System.String,System.String,System.String)">
            <summary>
            Used to set a property value and priority within this declaration block
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <param name="value">The new value of the property.</param>
            <param name="priority">The new priority of the property (e.g. "important").</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.GetPropertyPriority(System.String)">
            <summary>
            Used to retrieve the priority of a CSS property (e.g. the "important" qualifier) if the property has been explicitly set in this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>A string representing the priority (e.g. "important") if one exists. The empty string if none exists.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.RemoveProperty(System.String)">
            <summary>
            Used to remove a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.GetPropertyCssValue(System.String)">
            <summary>
            Used to retrieve the object representation of the value of a CSS property if it has been explicitly set within this declaration block. This method returns null if the property is a shorthand property. Shorthand property values can only be accessed and modified as strings, using the getPropertyValue and setProperty methods.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns null if the property has not been set.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.GetPropertyValue(System.String)">
            <summary>
            Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set.</returns>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.ParentRule">
            <summary>
            The CSS rule that contains this declaration block or null if this CSSStyleDeclaration is not attached to a CSSRule.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.Length">
            <summary>
            The number of properties that have been explicitly set in this declaration block. The range of valid indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.CssText">
            <summary>
            The parsable textual representation of the declaration block (excluding the surrounding curly braces). Setting this attribute will result in the parsing of the new value and resetting of all the properties in the declaration block including the removal or addition of properties.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or a property is readonly.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssStyleDeclaration.Item(System.UInt64)">
            <summary>
            Used to retrieve the properties that have been explicitly set in this declaration block. The order of the properties retrieved using this method does not have to be the order in which they were set. This method can be used to iterate over all properties in this declaration block.
            The name of the property at this ordinal position. The empty string if no property exists at this position.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssStyleRule">
            <summary>
            The CSSStyleRule interface represents a single rule set in a CSS style sheet.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleRule.GetStylesForElement(System.Xml.XmlElement,System.String,Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList,Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration)">
            <summary>
            Used to find matching style rules in the cascading order
            </summary>
            <param name="elt">The element to find styles for</param>
            <param name="pseudoElt">The pseudo-element to find styles for</param>
            <param name="ml">The medialist that the document is using</param>
            <param name="csd">A CssStyleDeclaration that holds the collected styles</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssStyleRule.SelectorText">
            <summary>
            The textual representation of the selector for the rule set. The implementation may have stripped out insignificant whitespace while parsing the selector.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssStyleRule.CssText">
            <summary>
            The entire text of the CssStyleRule
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssStyleRule.Style">
            <summary>
            The declaration-block of this rule set.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssStyleRule.Type">
            <summary>
            The type of the rule. The expectation is that binding-specific casting methods can be used to cast down from an instance of the CSSRule interface to the specific derived interface implied by the type.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheet">
            <summary>
            The CSSStyleSheet interface is a concrete interface used to represent a CSS style sheet i.e., a style sheet whose content type is "text/css".
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheet.#ctor(System.Xml.XmlProcessingInstruction,Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            Constructor for CssStyleSheet
            </summary>
            <param name="pi">The XML processing instruction that references the stylesheet</param>
            <param name="origin">The type of stylesheet</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheet.#ctor(System.Xml.XmlElement,Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            Constructor for CssStyleSheet
            </summary>
            <param name="styleElement">The XML style element that references the stylesheet</param>
            <param name="origin">The type of stylesheet</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheet.#ctor(System.Xml.XmlNode,System.String,System.String,System.String,Ab2d.Internal.SvgDom.Dom.Css.CssRule,Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            Constructor for CssStyleSheet
            </summary>
            <param name="ownerNode">The node that owns this stylesheet. E.g. used for getting the BaseUri</param>
            <param name="href">The URL of the stylesheet</param>
            <param name="title">The title of the stylesheet</param>
            <param name="media">List of medias for the stylesheet</param>
            <param name="ownerRule">The rule (e.g. ImportRule) that referenced this stylesheet</param>
            <param name="origin">The type of stylesheet</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheet.GetStylesForElement(System.Xml.XmlElement,System.String,Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList,Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration)">
            <summary>
            Used to find matching style rules in the cascading order
            </summary>
            <param name="elt">The element to find styles for</param>
            <param name="pseudoElt">The pseudo-element to find styles for</param>
            <param name="ml">The medialist that the document is using</param>
            <param name="csd">A CssStyleDeclaration that holds the collected styles</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheet.DeleteRule(System.UInt64)">
            <summary>
            Used to delete a rule from the style sheet.
            </summary>
            <param name="index">The index within the style sheet's rule list of the rule to remove.</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the style sheet's rule list.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheet.InsertRule(System.String,System.UInt64)">
            <summary>
            Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
            </summary>
            <param name="rule">The parsable text representing the rule. For rule sets this contains both the selector and the style declaration. For at-rules, this specifies both the at-identifier and the rule content.</param>
            <param name="index">The index within the style sheet's rule list of the rule before which to insert the specified rule. If the specified index is equal to the length of the style sheet's rule collection, the rule will be added to the end of the style sheet.</param>
            <returns>The index within the style sheet's rule collection of the newly inserted rule.</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the style sheet's rule list.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at the specified index e.g. if an @import rule is inserted after a standard rule set or other at-rule.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified rule has a syntax error and is unparsable.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheet.CssRules">
            <summary>
            The list of all CSS rules contained within the style sheet. This includes both rule sets and at-rules.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheet.OwnerRule">
            <summary>
            If this style sheet comes from an @import rule, the ownerRule attribute will contain the CSSImportRule. In that case, the ownerNode attribute in the StyleSheet interface will be null. If the style sheet comes from an element or a processing instruction, the ownerRule attribute will be null and the ownerNode attribute will contain the Node.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType">
            <summary>
            The different types of CssStyleSheets
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType.UserAgent">
            <summary>
            The stylesheet is a user agent stylesheet
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType.Author">
            <summary>
            The stylesheet is a author stylesheet
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType.User">
            <summary>
            The stylesheet is a user stylesheet
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType.Inline">
            <summary>
            The styles comes from a inline style attribute
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType.Collector">
            <summary>
            Used internally for collection of styles for an element
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType.Unknown">
            <summary>
            Used internally for unknown properties
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssUnknownRule">
            <summary>
            The CSSUnknownRule interface represents an at-rule not supported by this user agent.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssUnknownRule.#ctor(System.Object,System.Boolean,System.String[],Ab2d.Internal.SvgDom.Dom.Css.CssStyleSheetType)">
            <summary>
            The constructor for CssUnknownRule
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssUnknownRule.Type">
            <summary>
            The type of the rule. The expectation is that binding-specific casting methods can be used to cast down from an instance of the CSSRule interface to the specific derived interface implied by the type.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssValue">
            <summary>
            The CSSValue interface represents a simple or a complex value. A CSSValue object only occurs in a context of a CSS property
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssValue.GetCssValue(System.String,System.Boolean)">
            <summary>
            Detects what kind of value cssText contains and returns an instance of the correct CssValue class
            </summary>
            <param name="cssText">The text to parse for a CSS value</param>
            <param name="readOnly">Specifies if this instance is read-only</param>
            <returns>The correct type of CSS value</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssValue.#ctor(Ab2d.Internal.SvgDom.Dom.Css.CssValueType,System.String,System.Boolean)">
            <summary>
            Constructor for CssValue
            </summary>
            <param name="type">The type of value</param>
            <param name="cssText">The entire content of the value</param>
            <param name="readOnly">Specifies if the instance is read-only</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssValue.#ctor">
            <summary>
            Only for internal use
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssValue.CssText">
            <summary>
            A string representation of the current value.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error (according to the attached property) or is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_MODIFICATION_ERR: Raised if the specified CSS string value represents a different type of values than the values allowed by the CSS property</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this value is readonly.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssValue.CssValueType">
            <summary>
            A code defining the type of the value as defined above
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssValueType">
            <summary>
                 The CssValueType Enum Class contains the possible Css Value
                 Types.  This is an extension to the CSS spec.  The spec has
                 a list of constants defined within the ICssValue Interface 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed> 
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssValueType.Inherit">
            <summary>
            The value is inherited and the cssText contains "inherit".
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssValueType.PrimitiveValue">
            <summary>
            The value is a primitive value and an instance of the CSSPrimitiveValue interface can be obtained by using binding-specific casting methods on this instance of the CSSValue interface.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssValueType.ValueList">
            <summary>
            The value is a CSSValue list and an instance of the CSSValueList interface can be obtained by using binding-specific casting methods on this instance of the CSSValue interface.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.CssValueType.Custom">
            <summary>
            The value is a custom value.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.CssXmlDocument">
            <summary>
            A XmlDocument with CSS support
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssXmlDocument.#ctor">
            <summary>
            Initializes a new instance of CssXmlDocument
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssXmlDocument.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of CssXmlDocument
            </summary>
            <param name="nt">The name table to use</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.CssXmlDocument.StyleSheets">
            <summary>
            All the stylesheets associated with this document
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssXmlDocument.AddStyleElement(System.String,System.String)">
            <summary>
            Adds a element type to be used as style elements (e.g. as in the HTML style element)
            </summary>
            <param name="ns">The namespace URI of the element</param>
            <param name="localName">The local-name of the element</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssXmlDocument.SetUserAgentStyleSheet(System.String)">
            <summary>
            Sets the user agent stylesheet for this document
            </summary>
            <param name="href">The URI to the stylesheet</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssXmlDocument.SetUserStyleSheet(System.String)">
            <summary>
            Sets the user stylesheet for this document
            </summary>
            <param name="href">The URI to the stylesheet</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssXmlDocument.GetOverrideStyle(System.Xml.XmlElement,System.String)">
            <summary>
            This method is used to retrieve the override style declaration for a specified element and a specified pseudo-element.
            </summary>
            <param name="elt">The element whose style is to be modified. This parameter cannot be null.</param>
            <param name="pseudoElt">The pseudo-element or null if none.</param>
            <returns>The override style declaration.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.CssXmlDocument.GetComputedStyle(System.Xml.XmlElement,System.String)">
            <summary>
            This method is used to get the computed style as it is defined in [CSS2].
            </summary>
            <param name="elt">The element whose style is to be computed. This parameter cannot be null.</param>
            <param name="pseudoElt">The pseudo-element or null if none.</param>
            <returns>The computed style. The CSSStyleDeclaration is read-only and contains only absolute values.</returns>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICounter">
            <summary>
            The Counter interface is used to represent any counter or 
            counters function value. This interface reflects the values 
            in the underlying style property.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>0</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICounter.Separator">
            <summary>
            This attribute is used for the separator of the nested counters.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICounter.ListStyle">
            <summary>
            This attribute is used for the style of the list.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICounter.Identifier">
            <summary>
            This attribute is used for the identifier of the counter.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssCharsetRule">
            <summary>
            The CSSCharsetRule interface represents a @charset rule in a
            CSS style sheet. The value of the encoding attribute does not
            affect the encoding of text data in the DOM objects; this 
            encoding is always UTF-16. After a stylesheet is loaded, the 
            value of the encoding attribute is the value found in the 
            @charset rule. If there was no @charset in the original 
            document, then no CSSCharsetRule is created. The value of the
            encoding attribute may also be used as a hint for the 
            encoding used on serialization of the style sheet. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>50</completed>	
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssCharsetRule.Encoding">
            <summary>
            The encoding information used in this @charset rule.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified encoding value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this encoding rule is readonly.</exception>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssFontFaceRule">
            <summary>
            The CSSFontFaceRule interface represents a @font-face rule 
            in a CSS style sheet. The @font-face rule is used to hold a 
            set of font descriptions. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>20</completed>	 
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssFontFaceRule.Style">
            <summary>
            The declaration-block of this rule.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssImportRule">
            <summary>
            The CSSImportRule interface represents a @import rule within 
            a CSS style sheet. The @import rule is used to import style 
            rules from other style sheets. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>	 
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssImportRule.StyleSheet">
            <summary>
            The style sheet referred to by this rule, if it has been loaded. The value of this attribute is null if the style sheet has not yet been loaded or if it will not be loaded (e.g. if the style sheet is for a media type not supported by the user agent).
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssImportRule.Media">
            <summary>
            A list of media types for which this style sheet may be used.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssImportRule.Href">
            <summary>
            The location of the style sheet to be imported. The attribute will not contain the "url(...)" specifier around the URI.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssMediaRule">
            <summary>
            The CSSMediaRule interface represents a @media rule in a CSS style sheet. A @media rule can be used to delimit style rules for specific media types
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>	 
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssMediaRule.DeleteRule(System.UInt64)">
            <summary>
            Used to delete a rule from the media block.
            </summary>
            <param name="index">The index within the media block's rule collection of the rule to remove.</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the media rule list.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this media rule is readonly</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssMediaRule.InsertRule(System.String,System.UInt64)">
            <summary>
            Used to insert a new rule into the media block.
            </summary>
            <param name="rule">The parsable text representing the rule. For rule sets this contains both the selector and the style declaration. For at-rules, this specifies both the at-identifier and the rule content.</param>
            <param name="index">The index within the media block's rule collection of the rule before which to insert the specified rule. If the specified index is equal to the length of the media blocks's rule collection, the rule will be added to the end of the media block.</param>
            <returns>The index within the media block's rule collection of the newly inserted rule</returns>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssMediaRule.CssRules">
            <summary>
            A list of all CSS rules contained within the media block.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssMediaRule.Media">
            <summary>
            A list of media types for this rule
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssPageRule">
            <summary>
            The CSSPageRule interface represents a @page rule within
            a CSS style sheet. The @page rule is used to specify the
            dimensions, orientation, margins, etc. of a page box for
            paged media. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>	
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssPageRule.Style">
            <summary>
            The declaration-block of this rule.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssPageRule.SelectorText">
            <summary>
            The parsable textual representation of the page selector for the rule.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly.</exception>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssPrimitiveValue">
            <summary>
            The CSSPrimitiveValue interface represents a single CSS value. 
            This interface may be used to determine the value of a specific
            style property currently set in a block or to set a specific 
            style property explicitly within the block. An instance of this 
            interface might be obtained from the getPropertyCSSValue method
            of the CSSStyleDeclaration interface. A CSSPrimitiveValue object
            only occurs in a context of a CSS property. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>50</completed>	
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssPrimitiveValue.PrimitiveType">
            <summary>
            The type of the value as defined by the constants specified above.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssPrimitiveValue.SetFloatValue(Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType,System.Double)">
            <summary>
            A method to set the float value with a specified unit. If the property attached with this value can not accept the specified unit or the float value, the value will be unchanged and a DOMException will be raised
            </summary>
            <param name="unitType">A unit code as defined above. The unit code can only be a float unit type (i.e. CSS_NUMBER, CSS_PERCENTAGE, CSS_EMS, CSS_EXS, CSS_PX, CSS_CM, CSS_MM, CSS_IN, CSS_PT, CSS_PC, CSS_DEG, CSS_RAD, CSS_GRAD, CSS_MS, CSS_S, CSS_HZ, CSS_KHZ, CSS_DIMENSION).</param>
            <param name="floatValue">The new float value.</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the attached property doesn't support the float value or the unit type.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssPrimitiveValue.GetFloatValue(Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType)">
            <summary>
            This method is used to get a float value in a specified unit. If this CSS value doesn't contain a float value or can't be converted into the specified unit, a DOMException is raised.
            </summary>
            <param name="unitType">A unit code to get the float value. The unit code can only be a float unit type (i.e. CSS_NUMBER, CSS_PERCENTAGE, CSS_EMS, CSS_EXS, CSS_PX, CSS_CM, CSS_MM, CSS_IN, CSS_PT, CSS_PC, CSS_DEG, CSS_RAD, CSS_GRAD, CSS_MS, CSS_S, CSS_HZ, CSS_KHZ, CSS_DIMENSION).</param>
            <returns>The float value in the specified unit.</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a float value or if the float value can't be converted into the specified unit.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssPrimitiveValue.SetStringValue(Ab2d.Internal.SvgDom.Dom.Css.CssPrimitiveType,System.String)">
            <summary>
            A method to set the string value with the specified unit. If the property attached to this value can't accept the specified unit or the string value, the value will be unchanged and a DOMException will be raised.
            </summary>
            <param name="stringType">A string code as defined above. The string code can only be a string unit type (i.e. CSS_STRING, CSS_URI, CSS_IDENT, and CSS_ATTR).</param>
            <param name="stringValue">The new string value.</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value or if the string value can't be converted into the specified unit.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssPrimitiveValue.GetStringValue">
            <summary>
            This method is used to get the string value. If the CSS value doesn't contain a string value, a DOMException is raised.
            Note: Some properties (like 'font-family' or 'voice-family') convert a whitespace separated list of idents to a string.
            </summary>
            <returns>The string value in the current unit. The current primitiveType can only be a string unit type (i.e. CSS_STRING, CSS_URI, CSS_IDENT and CSS_ATTR).</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssPrimitiveValue.GetCounterValue">
            <summary>
            This method is used to get the Counter value. If this CSS value doesn't contain a counter value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Counter interface
            </summary>
            <returns>The Counter value</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Counter value (e.g. this is not CSS_COUNTER).</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssPrimitiveValue.GetRectValue">
            <summary>
            This method is used to get the Rect value. If this CSS value doesn't contain a rect value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Rect interface.
            </summary>
            <returns>The Rect value</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Rect value. (e.g. this is not CSS_RECT).</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssPrimitiveValue.GetRgbColorValue">
            <summary>
            This method is used to get the RGB color. If this CSS value doesn't contain a RGB color value, a DOMException is raised. Modification to the corresponding style property can be achieved using the RGBColor interface.
            </summary>
            <returns>the RGB color value.</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_ACCESS_ERR: Raised if the attached property can't return a RGB color value (e.g. this is not CSS_RGBCOLOR).</exception>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssRule">
            <summary>
            The CSSRule interface is the abstract base interface for any
            type of CSS statement. This includes both rule sets and 
            at-rules. An implementation is expected to preserve all rules 
            specified in a CSS style sheet, even if the rule is not recognized 
            by the parser. Unrecognized rules are represented using the 
            CSSUnknownRule interface. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>	
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssRule.ParentStyleSheet">
            <summary>
            The type of the rule, as defined above. The expectation is that binding-specific casting methods can be used to cast down from an instance of the CSSRule interface to the specific derived interface implied by the type.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssRule.ParentRule">
            <summary>
            The style sheet that contains this rule.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssRule.Type">
            <summary>
            If this rule is contained inside another rule (e.g. a style rule inside an @media block), this is the containing rule. If this rule is not nested inside any other rules, this returns null
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssRule.CssText">
            <summary>
            The parsable textual representation of the rule. This reflects the current state of the rule and not its initial value
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_MODIFICATION_ERR: Raised if the specified CSS string value represents a different type of rule than the current one.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at this point in the style sheet.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if the rule is readonly.</exception>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssRuleList">
            <summary>
            The CSSRuleList interface provides the abstraction of an 
            ordered collection of CSS rules. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>	
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssRuleList.Length">
            <summary>
            The number of CSSRules in the list. The range of valid child rule indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssRuleList.Item(System.UInt64)">
            <summary>
            Used to retrieve a CSS rule by ordinal index. The order in this collection represents the order of the rules in the CSS style sheet. If index is greater than or equal to the number of rules in the list, this returns null.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleDeclaration">
            <summary>
            The CSSStyleDeclaration interface represents a single CSS 
            declaration block. This interface may be used to determine 
            the style properties currently set in a block or to set 
            style properties explicitly within the block. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>60</completed>	
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleDeclaration.SetProperty(System.String,System.String,System.String)">
            <summary>
            Used to set a property value and priority within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <param name="value">The new value of the property.</param>
            <param name="priority">The new priority of the property (e.g. "important").</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleDeclaration.GetPropertyPriority(System.String)">
            <summary>
            Used to retrieve the priority of a CSS property (e.g. the "important" qualifier) if the property has been explicitly set in this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>A string representing the priority (e.g. "important") if one exists. The empty string if none exists.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleDeclaration.RemoveProperty(System.String)">
            <summary>
            Used to remove a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleDeclaration.GetPropertyCssValue(System.String)">
            <summary>
            Used to retrieve the object representation of the value of a CSS property if it has been explicitly set within this declaration block. This method returns null if the property is a shorthand property. Shorthand property values can only be accessed and modified as strings, using the getPropertyValue and setProperty methods.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns null if the property has not been set.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleDeclaration.GetPropertyValue(System.String)">
            <summary>
            Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set.</returns>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleDeclaration.ParentRule">
            <summary>
            The CSS rule that contains this declaration block or null if this CSSStyleDeclaration is not attached to a CSSRule.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleDeclaration.Length">
            <summary>
            The number of properties that have been explicitly set in this declaration block. The range of valid indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleDeclaration.CssText">
            <summary>
            The parsable textual representation of the declaration block (excluding the surrounding curly braces). Setting this attribute will result in the parsing of the new value and resetting of all the properties in the declaration block including the removal or addition of properties.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or a property is readonly.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleDeclaration.Item(System.UInt64)">
            <summary>
            Used to retrieve the properties that have been explicitly set in this declaration block. The order of the properties retrieved using this method does not have to be the order in which they were set. This method can be used to iterate over all properties in this declaration block.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleRule">
            <summary>
            The CSSStyleRule interface represents a single rule set 
            in a CSS style sheet. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>90</completed>	
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleRule.SelectorText">
            <summary>
            The textual representation of the selector for the rule set. The implementation may have stripped out insignificant whitespace while parsing the selector.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleRule.Style">
            <summary>
            The declaration-block of this rule set.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleSheet">
            <summary>
            The CSSStyleSheet interface is a concrete interface used to 
            represent a CSS style sheet i.e., a style sheet whose 
            content type is "text/css". 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>70</completed>	
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleSheet.DeleteRule(System.UInt64)">
            <summary>
            Used to delete a rule from the style sheet.
            </summary>
            <param name="index">The index within the style sheet's rule list of the rule to remove.</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the style sheet's rule list.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleSheet.InsertRule(System.String,System.UInt64)">
            <summary>
            Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
            </summary>
            <param name="rule">The parsable text representing the rule. For rule sets this contains both the selector and the style declaration. For at-rules, this specifies both the at-identifier and the rule content.</param>
            <param name="index">The index within the style sheet's rule list of the rule before which to insert the specified rule. If the specified index is equal to the length of the style sheet's rule collection, the rule will be added to the end of the style sheet.</param>
            <returns>The index within the style sheet's rule collection of the newly inserted rule.</returns>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at the specified index e.g. if an @import rule is inserted after a standard rule set or other at-rule.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the style sheet's rule list.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified rule has a syntax error and is unparsable.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleSheet.CssRules">
            <summary>
            The list of all CSS rules contained within the style sheet. This includes both rule sets and at-rules.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssStyleSheet.OwnerRule">
            <summary>
            If this style sheet comes from an @import rule, the ownerRule attribute will contain the CSSImportRule. In that case, the ownerNode attribute in the StyleSheet interface will be null. If the style sheet comes from an element or a processing instruction, the ownerRule attribute will be null and the ownerNode attribute will contain the Node.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssUnknownRule">
            <summary>
            The CSSUnknownRule interface represents an at-rule not 
            supported by this user agent. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>	
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssValue">
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssValue.CssText">
            <summary>
            A string representation of the current value.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error (according to the attached property) or is unparsable</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_MODIFICATION_ERR: Raised if the specified CSS string value represents a different type of values than the values allowed by the CSS property.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this value is readonly.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssValue.CssValueType">
            <summary>
            A code defining the type of the value as defined above
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.ICssValueList">
            <summary>
            The CSSValueList interface provides the abstraction of an 
            ordered collection of CSS values.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>0</completed>	
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssValueList.Length">
            <summary>
            The number of CSSValues in the list. The range of valid values of the indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.ICssValueList.Item(System.UInt64)">
            <summary>
            Used to retrieve a CSSValue by ordinal index. The order in this collection represents the order of the values in the CSS style property. If index is greater than or equal to the number of values in the list, this returns null.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.IDocumentCss">
            <summary>
            This interface represents a document with a CSS view.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>0</completed>	
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.IDocumentCss.GetOverrideStyle(System.Xml.XmlElement,System.String)">
            <summary>
            This method is used to retrieve the override style declaration for a specified element and a specified pseudo-element.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.IDomImplementationCss">
            <summary>
            This interface allows the DOM user to create a CSSStyleSheet
            outside the context of a document. There is no way to 
            associate the new CSSStyleSheet with a document in DOM 
            Level 2. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>0</completed>
            <remarks>This interface should inherit from IDomImplementation
            but System.Xml does not have this interface, just a class.
            You can not inherit from a class in an interface.
            </remarks>	
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.IDomImplementationCss.CreateCssStyleSheet(System.String,System.String)">
            <summary>
            Creates a new CSSStyleSheet.
            </summary>
            <param name="title">The advisory title. See also the Style Sheet Interfaces section.</param>
            <param name="media">The comma-separated list of media associated with the new style sheet. See also the Style Sheet Interfaces section.</param>
            <returns>A new CSS style sheet.</returns>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.IElementCssInlineStyle">
            <summary>
            Inline style information attached to elements is exposed 
            through the style attribute. This represents the contents of 
            the STYLE attribute for HTML elements (or elements in other 
            schemas or DTDs which use the STYLE attribute in the same 
            way). The expectation is that an instance of the 
            ElementCSSInlineStyle interface can be obtained by using 
            binding-specific casting methods on an instance of the 
            Element interface when the element supports inline CSS 
            style informations. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>	
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.IElementCssInlineStyle.Style">
            <summary>
            The style attribute
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.IRect">
            <summary>
            The Rect interface is used to represent any rect value. This
            interface reflects the values in the underlying style 
            property. Hence, modifications made to the CSSPrimitiveValue
            objects modify the style property. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>	
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.IRect.Left">
            <summary>
            This attribute is used for the left of the rect.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.IRect.Bottom">
            <summary>
            This attribute is used for the bottom of the rect.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.IRect.Right">
            <summary>
            This attribute is used for the right of the rect.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.IRect.Top">
            <summary>
            This attribute is used for the top of the rect.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.IRgbColor">
            <summary>
            The RGBColor interface is used to represent any RGB color 
            value. This interface reflects the values in the underlying
            style property. Hence, modifications made to the 
            CSSPrimitiveValue objects modify the style property. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>	
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.IRgbColor.Alpha">
            <summary>
            This attribute is used for the alpha value of the RGB color
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.IRgbColor.Red">
            <summary>
            This attribute is used for the red value of the RGB color
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.IRgbColor.Green">
            <summary>
            This attribute is used for the green value of the RGB color.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.IRgbColor.Blue">
            <summary>
            This attribute is used for the blue value of the RGB color
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.IViewCss">
            <summary>
            This interface represents a CSS view. The getComputedStyle 
            method provides a read only access to the computed values of 
            an element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>	
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.IViewCss.GetComputedStyle(System.Xml.XmlElement,System.String)">
            <summary>
            This method is used to get the computed style as it is defined in [CSS2].
            </summary>
            <param name="elt">The element whose style is to be computed. This parameter cannot be null.</param>
            <param name="pseudoElt">The pseudo-element or null if none</param>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.Rect">
            <summary>
            The Rect interface is used to represent any rect value. This interface reflects the values in the underlying style property. Hence, modifications made to the CSSPrimitiveValue objects modify the style property.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.Rect.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new Rect
            </summary>
            <param name="s">The string to parse that contains the Rect structure</param>
            <param name="readOnly">Specifies if the Rect should be read-only</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.Rect.Left">
            <summary>
            This attribute is used for the left of the rect.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.Rect.Bottom">
            <summary>
            This attribute is used for the bottom of the rect.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.Rect.Right">
            <summary>
            This attribute is used for the right of the rect.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.Rect.Top">
            <summary>
            This attribute is used for the top of the rect.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.RgbColor">
            <summary>
            The RGBColor interface is used to represent any RGB color value. This interface reflects the values in the underlying style property. Hence, modifications made to the CSSPrimitiveValue objects modify the style property.
            A specified RGB color is not clipped (even if the number is outside the range 0-255 or 0%-100%). A computed RGB color is clipped depending on the device.
            Even if a style sheet can only contain an integer for a color value, the internal storage of this integer is a float, and this can be used as a float in the specified or the computed style.
            A color percentage value can always be converted to a number and vice versa
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>50</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.RgbColor.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a RgbColor based on the GDi color
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Css.RgbColor.#ctor(System.String)">
            <summary>
            Parses a contructs a RgbColor
            </summary>
            <param name="str">String to parse to find the color</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.RgbColor.GdiColor">
            <summary>
            A GDI Color representation of the RgbColor
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.RgbColor.Alpha">
            <summary>
            This attribute is used for the alpha value of the RGB color
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.RgbColor.Red">
            <summary>
            This attribute is used for the red value of the RGB color
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.RgbColor.Green">
            <summary>
            This attribute is used for the green value of the RGB color.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.RgbColor.Blue">
            <summary>
            This attribute is used for the blue value of the RGB color
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Css.SharpCssStyle">
            <summary>
            Internal class that stores a style in a declaration block
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.SharpCssStyle.Origin">
            <summary>
            The type of the owner stylesheet
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.SharpCssStyle.Name">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.SharpCssStyle.Value">
            <summary>
            The value of the style
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.SharpCssStyle.Priority">
            <summary>
            The prioroty of the style, e.g. "important"
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Css.SharpCssStyle.Specificity">
            <summary>
            The calculated specificity of the owner selector
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Css.XPathSelector.XPath">
            <summary>
            Only used for testing!
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Declaration">
            <summary>
            Summary description for Declaration.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Document">
            <summary>
            Summary description for Document.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.DocumentType">
            <summary>
            Summary description for DocumentType.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.DomImplementation">
            <summary>
            Summary description for DomImplementation.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Element">
            <summary>
            Summary description for Element.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.EntityReference">
            <summary>
            Summary description for EntityReference.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.IDocumentFragment">
            <summary>
            Summary description for IDocumentFragment.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.IDocumentType">
            <summary>
            Summary description for IDocumentType.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.IDomConfiguration">
            <summary>
            Summary description for IDomConfiguration.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.IDomImplementation">
            <summary>
            Summary description for IDomImplementation.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.IEntityReference">
            <summary>
            Summary description for IEntityReference.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.IProcessingInstruction">
            <summary>
            Summary description for IProcessingInstruction.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.NodeListAdapter">
            <summary>
            Summary description for NodeListAdapter.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.SignificantWhitespace">
            <summary>
            Summary description for SignificantWhitespace.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Stylesheets.IDocumentStyle">
            <summary>
            The DocumentStyle interface provides a mechanism by which 
            the style sheets embedded in a document can be retrieved. 
            The expectation is that an instance of the DocumentStyle 
            interface can be obtained by using binding-specific casting 
            methods on an instance of the Document interface. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IDocumentStyle.StyleSheets">
            <summary>
            A list containing all the style sheets explicitly linked into or embedded in a document. For HTML documents, this includes external style sheets, included via the HTML LINK element, and inline STYLE elements. In XML, this includes external style sheets, included via style sheet processing instructions (see [XML-StyleSheet]).
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Stylesheets.ILinkStyle">
            <summary>
            The LinkStyle interface provides a mechanism by which a 
            style sheet can be retrieved from the node responsible for 
            linking it into a document. An instance of the LinkStyle 
            interface can be obtained using binding-specific casting 
            methods on an instance of a linking node (HTMLLinkElement, 
            HTMLStyleElement or ProcessingInstruction in DOM Level 2). 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
            
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.ILinkStyle.Sheet">
            <summary>
            The style sheet
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Stylesheets.IMediaList">
            <summary>
            The MediaList interface provides the abstraction of an 
            ordered collection of media, without defining or constraining
            how this collection is implemented. An empty list is the same
            as a list that contains the medium "all". 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Stylesheets.IMediaList.AppendMedium(System.String)">
            <summary>
            Adds the medium newMedium to the end of the list. If the newMedium is already used, it is first removed.
            </summary>
            <param name="newMedium">The new medium to add.</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_CHARACTER_ERR: If the medium contains characters that are invalid in the underlying style language.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Stylesheets.IMediaList.DeleteMedium(System.String)">
            <summary>
            
            </summary>
            <param name="oldMedium"></param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NOT_FOUND_ERR: Raised if oldMedium is not in the list.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IMediaList.Length">
            <summary>
            The number of media in the list. The range of valid media is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IMediaList.MediaText">
            <summary>
            The parsable textual representation of the media list. This is a comma-separated list of media.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified string value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this media list is readonly.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IMediaList.Item(System.UInt64)">
            <summary>
            Returns the indexth in the list. If index is greater than or equal to the number of media in the list, this returns null.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Stylesheets.IStyleSheet">
            <summary>
            The StyleSheet interface is the abstract base interface for 
            any type of style sheet. It represents a single style sheet 
            associated with a structured document. In HTML, the 
            StyleSheet interface represents either an external style 
            sheet, included via the HTML LINK element, or an inline 
            STYLE element. In XML, this interface represents an external
            style sheet, included via a style sheet processing 
            instruction. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IStyleSheet.Media">
            <summary>
            The intended destination media for style information. The media is often specified in the ownerNode. If no media has been specified, the MediaList will be empty. See the media attribute definition for the LINK element in HTML 4.0, and the media pseudo-attribute for the XML style sheet processing instruction . Modifying the media list may cause a change to the attribute disabled.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IStyleSheet.Title">
            <summary>
            The advisory title. The title is often specified in the ownerNode. See the title attribute definition for the LINK element in HTML 4.0, and the title pseudo-attribute for the XML style sheet processing instruction.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IStyleSheet.Href">
            <summary>
            If the style sheet is a linked style sheet, the value of its attribute is its location. For inline style sheets, the value of this attribute is null. See the href attribute definition for the LINK element in HTML 4.0, and the href pseudo-attribute for the XML style sheet processing
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IStyleSheet.ParentStyleSheet">
            <summary>
            For style sheet languages that support the concept of style sheet inclusion, this attribute represents the including style sheet, if one exists. If the style sheet is a top-level style sheet, or the style sheet language does not support inclusion, the value of this attribute is null.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IStyleSheet.OwnerNode">
            <summary>
            The node that associates this style sheet with the document. For HTML, this may be the corresponding LINK or STYLE element. For XML, it may be the linking processing instruction. For style sheets that are included by other style sheets, the value of this attribute is null
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IStyleSheet.Disabled">
            <summary>
            false if the style sheet is applied to the document. true if it is not. Modifying this attribute may cause a new resolution of style for the document. A stylesheet only applies if both an appropriate medium definition is present and the disabled attribute is false. So, if the media doesn't apply to the current user agent, the disabled attribute is ignored.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IStyleSheet.Type">
            <summary>
            This specifies the style sheet language for this style sheet. The style sheet language is specified as a content type (e.g. "text/css"). The content type is often specified in the ownerNode. Also see the type attribute definition for the LINK element in HTML 4.0, and the type pseudo-attribute for the XML style sheet processing instruction.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Stylesheets.IStyleSheetList">
            <summary>
            The StyleSheetList interface provides the abstraction of an
            ordered collection of style sheets. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
            
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IStyleSheetList.Length">
            <summary>
            The number of StyleSheets in the list. The range of valid child stylesheet indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.IStyleSheetList.Item(System.UInt64)">
            <summary>
            Used to retrieve a style sheet by ordinal index. If index is greater than or equal to the number of style sheets in the list, this returns null.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList">
            <summary>
            The MediaList interface provides the abstraction of an ordered collection of media, without defining or constraining how this collection is implemented. An empty list is the same as a list that contains the medium "all".
            The items in the MediaList are accessible via an integral index, starting from 0.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>75</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList.Matches(Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList)">
            <summary>
            Compares this MediaList with another and see if the second fits this
            </summary>
            <param name="inMedia">The MediaList to compare</param>
            <returns>True if this list fits the specified</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList.AppendMedium(System.String)">
            <summary>
            Adds the medium newMedium to the end of the list. If the newMedium is already used, it is first removed.
            </summary>
            <param name="newMedium">The new medium to add.</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">INVALID_CHARACTER_ERR: If the medium contains characters that are invalid in the underlying style language.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this media list is readonly.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList.DeleteMedium(System.String)">
            <summary>
            Deletes the medium indicated by oldMedium from the list.
            </summary>
            <param name="oldMedium">The medium to delete in the media list.</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NOT_FOUND_ERR: Raised if oldMedium is not in the list.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this media list is readonly.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList.Length">
            <summary>
            The number of media in the list. The range of valid media is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList.MediaText">
            <summary>
            The parsable textual representation of the media list. This is a comma-separated list of media.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">SYNTAX_ERR: Raised if the specified string value has a syntax error and is unparsable.</exception>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this media list is readonly.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList.Item(System.UInt64)">
            <summary>
            Returns the indexth in the list. If index is greater than or equal to the number of media in the list, this returns null.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheet">
            <summary>
            The StyleSheet interface is the abstract base interface for any type of style sheet. It represents a single style sheet associated with a structured document. In HTML, the StyleSheet interface represents either an external style sheet, included via the HTML LINK element, or an inline STYLE element. In XML, this interface represents an external style sheet, included via a style sheet processing instruction.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>75</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheet.GetStylesForElement(System.Xml.XmlElement,System.String,Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList,Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration)">
            <summary>
            Used to find matching style rules in the cascading order
            </summary>
            <param name="elt">The element to find styles for</param>
            <param name="pseudoElt">The pseudo-element to find styles for</param>
            <param name="ml">The medialist that the document is using</param>
            <param name="csd">A CssStyleDeclaration that holds the collected styles</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheet.Media">
            <summary>
            The intended destination media for style information. The media is often specified in the ownerNode. If no media has been specified, the MediaList will be empty. See the media attribute definition for the LINK element in HTML 4.0, and the media pseudo-attribute for the XML style sheet processing instruction . Modifying the media list may cause a change to the attribute disabled.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheet.Title">
            <summary>
            The advisory title. The title is often specified in the ownerNode. See the title attribute definition for the LINK element in HTML 4.0, and the title pseudo-attribute for the XML style sheet processing instruction.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheet.Href">
            <summary>
            If the style sheet is a linked style sheet, the value of its attribute is its location. For inline style sheets, the value of this attribute is null. See the href attribute definition for the LINK element in HTML 4.0, and the href pseudo-attribute for the XML style sheet processing instruction.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheet.AbsoluteHref">
            <summary>
            The resolved absolute URL to the stylesheet
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheet.ParentStyleSheet">
            <summary>
            For style sheet languages that support the concept of style sheet inclusion, this attribute represents the including style sheet, if one exists. If the style sheet is a top-level style sheet, or the style sheet language does not support inclusion, the value of this attribute is null.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheet.OwnerNode">
            <summary>
            The node that associates this style sheet with the document. For HTML, this may be the corresponding LINK or STYLE element. For XML, it may be the linking processing instruction. For style sheets that are included by other style sheets, the value of this attribute is null.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheet.Disabled">
            <summary>
            false if the style sheet is applied to the document. true if it is not. Modifying this attribute may cause a new resolution of style for the document. A stylesheet only applies if both an appropriate medium definition is present and the disabled attribute is false. So, if the media doesn't apply to the current user agent, the disabled attribute is ignored.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheet.Type">
            <summary>
            This specifies the style sheet language for this style sheet. The style sheet language is specified as a content type (e.g. "text/css"). The content type is often specified in the ownerNode. Also see the type attribute definition for the LINK element in HTML 4.0, and the type pseudo-attribute for the XML style sheet processing instruction.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheetList">
            <summary>
            The StyleSheetList interface provides the abstraction of an ordered collection of style sheets.
            The items in the StyleSheetList are accessible via an integral index, starting from 0.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheetList.GetStylesForElement(System.Xml.XmlElement,System.String,Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration)">
            <summary>
            Used to find matching style rules in the cascading order
            </summary>
            <param name="elt">The element to find styles for</param>
            <param name="pseudoElt">The pseudo-element to find styles for</param>
            <param name="csd">A CssStyleDeclaration that holds the collected styles</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheetList.GetStylesForElement(System.Xml.XmlElement,System.String,Ab2d.Internal.SvgDom.Dom.Css.CssCollectedStyleDeclaration,Ab2d.Internal.SvgDom.Dom.Stylesheets.MediaList)">
            <summary>
            Used to find matching style rules in the cascading order
            </summary>
            <param name="elt">The element to find styles for</param>
            <param name="pseudoElt">The pseudo-element to find styles for</param>
            <param name="ml">The medialist that the document is using</param>
            <param name="csd">A CssStyleDeclaration that holds the collected styles</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheetList.Length">
            <summary>
            The number of StyleSheets in the list. The range of valid child stylesheet indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Stylesheets.StyleSheetList.Item(System.UInt64)">
            <summary>
            Used to retrieve a style sheet by ordinal index. If index is greater than or equal to the number of style sheets in the list, this returns null.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAElement">
            <summary>
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAngle">
            <summary>
            The SvgAngle interface corresponds to the angle basic data 
            type. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAngle.UnitType">
            <summary>
            The type of the value as specified by the SvgAngleType 
            enum class.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAngle.Value">
            <summary>
            The angle value as a floating point value, in degrees. 
            Setting this attribute will cause valueInSpecifiedUnits 
            and valueAsString to be updated automatically to reflect 
            this setting.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAngle.ValueInSpecifiedUnits">
            <summary>
            The angle value as a floating point value, in the units 
            expressed by unitType. Setting this attribute will cause
            value and valueAsString to be updated automatically to 
            reflect this setting.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAngle.ValueAsString">
            <summary>
            The angle value as a string value, in the units expressed
            by unitType. Setting this attribute will cause value and 
            valueInSpecifiedUnits to be updated automatically to 
            reflect this setting.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAngle.NewValueSpecifiedUnits(Ab2d.Internal.SvgDom.Dom.Svg.SvgAngleType,System.Double)">
            <summary>
            Reset the value as a number with an associated unitType,
            thereby replacing the values for all of the attributes on 
            the object.
            </summary>
            <param name="unitType"> The unitType for the angle value (e.g., SvgAngleTypeDEG).</param>
            <param name="valueInSpecifiedUnits">The angle value.</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAngle.ConvertToSpecifiedUnits(Ab2d.Internal.SvgDom.Dom.Svg.SvgAngleType)">
            <summary>
            Preserve the same underlying stored value, but reset the
            stored unit identifier to the given unitType. Object 
            attributes unitType, valueAsSpecified and valueAsString 
            might be modified as a result of this method.
            </summary>
            <param name="unitType">The unitType to switch to (e.g., SvgAngleTypeDEG).</param>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedBoolean">
            <summary>
            Used for attributes of type boolean which can be animated.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedBoolean.BaseVal">
            <summary>
            The base value of the given attribute before applying
            any animations.  Inheriting class should throw an exception 
            if it is readonly.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedBoolean.AnimVal">
            <summary>
            If the given attribute or property is being animated, 
            contains the current animated value of the attribute or 
            property. If the given attribute or property is not 
            currently being animated, contains the same value as 
            'baseVal'.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedEnumeration">
            <summary>
            Used for attributes whose value must be a constant from 
            a particular enumeration and which can be animated.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedEnumeration.BaseVal">
            <summary>
            The base value of the given attribute before 
            applying any animations.  Inheriting Class should throw
            an excpetion when the value is read only
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedEnumeration.AnimVal">
            <summary>
            If the given attribute or property is being animated, 
            contains the current animated value of the attribute or 
            property. If the given attribute or property is not 
            currently being animated, contains the same value as 
            'BaseVal'. 
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedLength">
            <summary>
            Used for attributes of basic type 'length' which can be 
            animated.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedLength.BaseVal">
            <summary>
            The base value of the given attribute before applying 
            any animations
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedLength.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                contains the current animated value of the attribute or property, and both the object itself and its contents are readonly. If the given attribute or property is not currently being animated, contains the same value as 'baseVal'.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedLengthList">
            <summary>
            Used for attributes of type SvgLengthList which can be 
            animated.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedLengthList.BaseVal">
            <summary>
            The base value of the given attribute before applying any
             animations.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedLengthList.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                contains the current animated value of the attribute
                or property, and both the object itself and its 
                contents are readonly. If the given attribute or 
                property is not currently being animated, contains 
                the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedNumber">
            <summary>
            Used for attributes of basic type 'number' which can be 
            animated.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedNumber.BaseVal">
            <summary>
            The base value of the given attribute before applying 
            any animations.  Inheriting class should throw an
            exception if the value is read only.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedNumber.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                contains the current animated value of the attribute
                or property, and both the object itself and its 
                contents are readonly. If the given attribute or 
                property is not currently being animated, contains 
                the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedNumberList">
            <summary>
            Used for attributes which take a list of numbers and 
            which can be animated.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedNumberList.BaseVal">
            <summary>
            The base value of the given attribute before applying 
            any animations
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedNumberList.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                then this attribute contains the current animated
                value of the attribute or property, and both the 
                object itself and its contents are readonly. If the
                given attribute or property is not currently being
                animated, then this attribute contains the same 
                value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedRect">
            <summary>
            Used for attributes of type SvgRect which can be animated.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedRect.BaseVal">
            <summary>
            The base value of the given attribute before applying 
            any animations.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedRect.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                contains the current animated value of the attribute
                or property, and both the object itself and its 
                contents are readonly. If the given attribute or 
                property is not currently being animated, contains 
                the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedString">
            <summary>
            Used for attributes of type DOMString which can be animated.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedString.BaseVal">
            <summary>
            The base value of the given attribute before applying 
            any animations.  Inheriting class should throw an
            exception if this value is read only.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedString.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                contains the current animated value of the attribute
                or property. If the given attribute or property is 
                not currently being animated, contains the same 
                value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgColor">
            <summary>
            The SvgColor interface corresponds to color value definition
            for properties 'stop-color', 'flood-color' and 
            'lighting-color' and is a base class for interface SvgPaint.
            It incorporates Svg's extended notion of color, which 
            incorporates ICC-based color specifications. 
            
            Interface SVGColor does not correspond to the color basic 
            data type. For the color basic data type, the applicable 
            DOM interfaces are defined in CSS; in particular, see 
            the ICssRgbColor interface. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgCursorElement">
            <summary>
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgEvent">
            <summary>
            </summary>
            <developer>don@donxml.com</developer>
            <completed>20</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgExternalResourcesRequired">
            <summary>
            Interface SvgExternalResourcesRequired defines an interface 
            which applies to all elements where this element or one of its 
            descendants can reference an external resource. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgExternalResourcesRequired.ExternalResourcesRequired">
            <summary>
            Corresponds to attribute externalResourcesRequired on the 
            given element.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgFitToViewBox">
            <summary>
            Interface SvgFitToViewBox defines DOM attributes that apply to 
            elements which have XML attributes viewBox and 
            preserveAspectRatio.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>80</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgIccColor">
            <summary>
            
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgIccColor.Colors">
            <summary>
            The list of color values that define this ICC color. 
            Each color value is an arbitrary floating point number. 
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgIccColor.ColorProfile">
            <summary>
            The name of the color profile, which is the first 
            parameter of an ICC color specification.  Inheriting
            class shouls throw exception on setting a read only value 
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgLangSpace">
            <summary>
            Interface SvgLangSpace defines an interface which applies to all elements which have attributes xml:lang and xml:space. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>niklas@protocol7.com</developer> 
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgLength">
            <summary>
            The SvgLength interface corresponds to the length basic data type. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>95</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgLengthList">
            <summary>
            This interface defines a list of SvgLength objects. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>20</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgList">
            <summary>
            This interface defines a all methods used in a Svg*List interface. 
            </summary>
            <developer>kevin@kevlidnev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgLocatable">
            <summary>
            Interface SvgLocatable is for all elements which either have a 
            transform attribute or don't have a transform attribute but whose
            content can have a bounding box in current user space. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>40</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgNumber">
            <summary>
            Used for attributes of basic type 'number'.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgNumberList">
            <summary>
            This interface defines a list of SvgNumber objects. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgRect">
            <summary>
            Rectangles are defined as consisting of a (x,y) coordinate pair identifying a minimum X value, a minimum Y value, and a width and height, which are usually constrained to be non-negative. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgStringList">
            <summary>
            This interface defines a list of string objects. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgStylable">
            <summary>
            
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgTransformable">
            <summary>
            Interface SvgTransformable contains properties and methods that apply to all elements which have attribute transform. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgURIReference">
            <summary>
            Interface SvgURIReference defines an interface which applies to all elements which have the collection of XLink attributes, such as xlink:href, which define a URI reference. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>25</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgViewElement">
            <summary>
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgViewSpec">
            <summary>
            The interface corresponds to an Svg View Specification. 
            </summary>
            <developer></developer>
            <completed>0</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgZoomAndPan">
            <summary>
            The SvgZoomAndPan interface defines attribute "zoomAndPan" and associated constants.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngleType">
            <summary>
            	The basic Angle Value Types
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
            	
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngleType.Unknown">
            <summary>
               The unit type is not one of predefined unit types. It is invalid to attempt to define a new value of this type or to attempt to switch an existing value to this type.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngleType.Unspecified">
            <summary>
            No unit type was provided (i.e., a unitless value was specified). For angles, a unitless value is treated the same as if degrees were specified.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngleType.Deg">
            <summary>
              The unit type was explicitly set to degrees.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngleType.Rad">
            <summary>
            The unit type is radians.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngleType.Grad">
            <summary>
            The unit type is grads.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgColorType">
            <summary>
            	Basic Color Type Enum
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgFilterBlendMode">
            <summary>
            	The basic Filter Blend Modes
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
            	
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgFilterChannelSelector">
            <summary>
            	The Filter Channel Selectors
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
            	
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgFilterColorMatrix">
            <summary>
            	The basic Filter Matrix Types
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
            	
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgFilterTransferType">
            <summary>
            	The Filter Component Transfer Types
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
            	
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgFilterCompositeOperator">
            <summary>
            	The Filter Composite Operators
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
            	
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgFilterEdgeMode">
            <summary>
            	The Filter Edge Mode Types
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
            	
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgFilterStitchOption">
            <summary>
            	The Filter Stitch Options
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgFilterTurbulenceType">
            <summary>
            	The Filter Turbulence Types
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgMorphologyOperator">
            <summary>
            	The Morphology Operator
            </summary>
            <developer>don@donxml.com</developer>
            <completed>100</completed>
            	
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgZoomAndPanType">
            <summary>
            Summary description for SvgZoomAndPanType.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedPoints">
            <summary>
            The SvgAnimatedPoints interface supports elements which have a 
            'points' attribute which holds a list of coordinate values and 
            which support the ability to animate that attribute. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>90</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgCircleElement">
            <summary>
            The SvgCircleElement interface corresponds to the 'circle' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>90</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgCircleElement.Cx">
            <summary>
            Corresponds to attribute cx on the given 'circle' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgCircleElement.Cy">
            <summary>
            Corresponds to attribute cy on the given 'circle' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgCircleElement.R">
            <summary>
            Corresponds to attribute r on the given 'circle' element.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgEllipseElement">
            <summary>
            The SvgEllipseElement interface corresponds to the 'ellipse' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgLineElement">
            <summary>
            The SvgLineElement interface corresponds to the 'line' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPolygonElement">
            <summary>
            The SvgPolygonElement interface corresponds to the 'polygon' element
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPolylineElement">
            <summary>
            The SvgPolylineElement interface corresponds to the 'polyline' element
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgRectElement">
            <summary>
            The SvgRectElement interface corresponds to the 'rect' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgRectElement.X">
            <summary>
            Corresponds to attribute x on the given 'rect' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgRectElement.Y">
            <summary>
            Corresponds to attribute y on the given 'rect' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgRectElement.Rx">
            <summary>
            Corresponds to attribute rx on the given 'rect' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgRectElement.Ry">
            <summary>
            Corresponds to attribute ry on the given 'rect' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgRectElement.Width">
            <summary>
            Corresponds to attribute width on the given 'rect' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgRectElement.Height">
            <summary>
            Corresponds to attribute height on the given 'rect' element.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngle">
            <summary>
            Summary description for SvgAngle.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngle.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a SvgAngle value
            </summary>
            <param name="baseVal">The string to parse for the angle value</param>
            <param name="defaultValue">The default value for the angle.</param>
            <param name="readOnly">Specifies if the value should be read-only</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngle.NewValueSpecifiedUnits(Ab2d.Internal.SvgDom.Dom.Svg.SvgAngleType,System.Double)">
            <summary>
             Reset the value as a number with an associated unitType, thereby replacing the values for all of the attributes on the object.
            </summary>
            <param name="unitType">The unitType for the angle value (e.g., SvgAngleTypeDEG).</param>
            <param name="valueInSpecifiedUnits">The angle value</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngle.ConvertToSpecifiedUnits(Ab2d.Internal.SvgDom.Dom.Svg.SvgAngleType)">
            <summary>
             Preserve the same underlying stored value, but reset the stored unit identifier to the given unitType. Object attributes unitType, valueAsSpecified and valueAsString might be modified as a result of this method.
            </summary>
            <param name="unitType">The unitType to switch to (e.g., SvgAngleTypeDEG).</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngle.UnitType">
            <summary>
            The type of the value as specified by one of the constants specified above
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngle.Value">
            <summary>
             The angle value as a floating point value, in degrees. Setting this attribute will cause valueInSpecifiedUnits and valueAsString to be updated automatically to reflect this setting.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngle.ValueInSpecifiedUnits">
            <summary>
             The angle value as a floating point value, in the units expressed by unitType. Setting this attribute will cause value and valueAsString to be updated automatically to reflect this setting.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgAngle.ValueAsString">
            <summary>
             The angle value as a string value, in the units expressed by unitType. Setting this attribute will cause value and valueInSpecifiedUnits to be updated automatically to reflect this setting.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedBoolean">
            <summary>
            Summary description for SvgAnimatedNumber.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedEnumeration">
            <summary>
            Summary description for SvgAnimatedEnumeration.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedLength">
            <summary>
            Used for attributes of basic type 'length' which can be 
            animated. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedLength.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedLength.AnimVal">
            <summary>
            If the given attribute or property is being animated, contains the current animated value of the attribute or property, and both the object itself and its contents are readonly. If the given attribute or property is not currently being animated, contains the same value as 'baseVal'. 
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedLengthList">
            <summary>
            Summary description for SvgAnimatedLengthList.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedNumber">
            <summary>
            Summary description for SvgAnimatedNumber.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedNumberList">
            <summary>
            Summary description for SvgAnimatedLengthList.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedPreserveAspectRatio">
            <summary>
            Summary description for SvgAnimatedPreserveAspectRatio.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedRect">
            <summary>
            
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedString">
            <summary>
            Summary description for SvgAnimatedLengthList.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgAnimatedTransformList">
            <summary>
            Used for the various attributes which specify a set of 
            transformations, such as the transform attribute which is 
            available for many of Svg's elements, and which can be animated.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgColor">
            <summary>
            Summary description for SvgColor.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgElement">
            <summary>
            Summary description for SvgElement.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>75</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgElement.ElementInstance">
            <summary>
            Whenever an SvgElementInstance is created for an SvgElement this
            property is set. The value of this property is used by the renderer 
            to dispatch events. SvgElements that are &lt;use&gt;d exist in a 
            conceptual "instance tree" and the target of events for those elements
            is the conceptual instance node represented by the SvgElementInstance.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgLengthDirection">
            <summary>
            Defines the direction of a SvgLength
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgLengthSource">
            <summary>
            Defines the origin type of the SvgLength value
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgLength.HasValueSet">
            <summary>
            If false than default value is used for the Value
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgLength.UnitType">
            <summary>
            The type of the value as specified by one of the constants specified above. 
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgLength.Value">
            <summary>
            The value as an floating point value, in user units. Setting this attribute will cause valueInSpecifiedUnits and valueAsString to be updated automatically to reflect this setting. 
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException"> NO_MODIFICATION_ALLOWED_ERR: Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgLength.ValueInSpecifiedUnits">
            <summary>
            The value as an floating point value, in the units expressed by unitType. Setting this attribute will cause value and valueAsString to be updated automatically to reflect this setting.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException"> NO_MODIFICATION_ALLOWED_ERR: Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgLength.ValueAsString">
            <summary>
            The value as a string value, in the units expressed by unitType. Setting this attribute will cause value and valueInSpecifiedUnits to be updated automatically to reflect this setting.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgLength.NewValueSpecifiedUnits(Ab2d.Internal.SvgDom.Dom.Svg.SvgLengthType,System.Double)">
            <summary>
            Reset the value as a number with an associated unitType, thereby replacing the values for all of the attributes on the object.
            </summary>
            <param name="unitType">The unitType for the value (e.g., MM). </param>
            <param name="valueInSpecifiedUnits">The new value</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgLength.ConvertToSpecifiedUnits(Ab2d.Internal.SvgDom.Dom.Svg.SvgLengthType)">
            <summary>
            Preserve the same underlying stored value, but reset the stored unit identifier to the given unitType. Object attributes unitType, valueAsSpecified and valueAsString might be modified as a result of this method. For example, if the original value were "0.5cm" and the method was invoked to convert to millimeters, then the unitType would be changed to MM, valueAsSpecified would be changed to the numeric value 5 and valueAsString would be changed to "5mm". 
            </summary>
            <param name="unitType">The unitType to switch to (e.g., MM).</param>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgLengthList">
            <summary>
            This interface defines a list of SvgLength objects
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgList">
            <summary>
            Base class for all SVG*List-derived classes.
            Note we're using ArrayList (as opposed to deriving from) to hide unneeded ArrayList methods
            Note that a CLR uint is equivalent to an IDL ulong, so uint is used for all index values
            </summary>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgList.#ctor">
            <summary>
            SvgList constructor
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgList.NumberOfItems">
            <summary>
            NumberOfItems
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgList.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgList.Initialize(System.Object)">
            <summary>
            Initialize
            </summary>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgList.GetItem(System.UInt32)">
            <summary>
            GetItem
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgList.InsertItemBefore(System.Object,System.UInt32)">
            <summary>
            InsertItemBefore
            </summary>
            <param name="newItem"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgList.ReplaceItem(System.Object,System.UInt32)">
            <summary>
            ReplaceItem
            </summary>
            <param name="newItem"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgList.RemoveItem(System.UInt32)">
            <summary>
            RemoveItem
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgList.AppendItem(System.Object)">
            <summary>
            AppendItem
            </summary>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgList.RemoveItem(System.Object)">
            <summary>
            RemoveItem - used to remove an item by value as opposed to by position
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgMatrix">
            <summary>
            Summary description for SvgMatrix.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgNumberList">
            <summary>
            Summary description for SvgNumberList.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPoint">
            <summary>
            Many of the SVG DOM interfaces refer to objects of class SvgPoint.
            An SvgPoint is an (x,y) coordinate pair. When used in matrix 
            operations, an SvgPoint is treated as a vector of the form:	
                [x]
                [y]
                [1]
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPointList">
            <summary>
            This class defines a list of SvgPoint objects. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgRect">
            <summary>
            Rectangles are defined as consisting of a (x,y) coordinate pair 
            identifying a minimum X value, a minimum Y value, and a width 
            and height, which are usually constrained to be non-negative. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgStringList">
            <summary>
            This interface defines a list of String objects
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgTransform">
            <summary>
            Summary description for SvgTransform.
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgTransformList">
            <summary>
            Summary description for SvgTransformList.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISharpMarkerHost">
            <summary>
            This is an extension to the Svg DOM. It denotes that an element can
            display markers.
            </summary>
            <remarks>
            <p>
            A marker is a symbol which is attached to one or more vertices of
            some Svg elements.  In order for a marker to be drawn correctly,
            its orientation and position needs to be known.
            See <a href="http://www.w3.org/TR/SVG/painting.html"
            >SVG 1.0 Masking - Establishing A New Clipping Path</a>
            </p>
            <p>
            This interface provides the information required to calculate the
            orientation and position for each marker of an Svg element.
            </p>
            <p>
            To give an Svg element the capability to draw markers, let the Svg
            element implement this interface.
            </p>
            </remarks>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISharpMarkerHost.MarkerPositions">
            <summary>
            An array specifying the position of each vertex in the Svg
            element's shape.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.ISharpMarkerHost.GetStartAngle(System.Int32)">
            <summary>
            Get the angle of the path segment entering the specified vertex.
            </summary>
            <param name="index">
            Specifies the vertex to which the path segment is entering.
            </param>
            <returns>
            The angle of the path segment entering the specified vertex
            in degrees.
            </returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.ISharpMarkerHost.GetEndAngle(System.Int32)">
            <summary>
            Get the angle of the path segment leaving the specified vertex
            in degrees.
            </summary>
            <param name="index">
            Specifies the vertex from which the path segment is leaving.
            </param>
            <returns>
            The angle of the path segment leaving the specified vertex.
            </returns>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgClipPathElement">
            <summary>
            Used by SvgClipPathElement.
            </summary>
            <developer>tabascopete78@yahoo.com</developer>
            <completed>50</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgMaskElement">
            <summary>
            Used by SvgMaskElement.
            </summary>
            <developer>tabascopete78@yahoo.com</developer>
            <completed>10</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgClipPathElement">
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgClipPathElement.GetGraphicsPath">
            <summary>
            
            </summary>
            <returns>Aggregate graphics path of children.</returns>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedPreserveAspectRatio">
            <summary>
            Used for attributes of type SvgPreserveAspectRatio which can be 
            animated.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedPreserveAspectRatio.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedPreserveAspectRatio.AnimVal">
            <summary>
                If the given attribute or property is being animated, contains the current animated value of the attribute or property, and both the object itself and its contents are readonly. If the given attribute or property is not currently being animated, contains the same
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedTransformList">
            <summary>
            Used for the various attributes which specify a set of transformations, such as the transform attribute which is available for many of Svg's elements, and which can be animated.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgMatrix">
            <summary>
            Interface for matrix operations used within the SVG DOM
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPoint">
            <summary>
            Many of the SVG DOM interfaces refer to objects of class SvgPoint.
            An SvgPoint is an (x,y) coordinate pair. When used in matrix
            operations, an SvgPoint is treated as a vector of the form:
            	[x]
            	[y]
            	[1]
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPointList">
            <summary>
            This interface defines a list of SvgPoint objects. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>60</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPreserveAspectRatio">
            <summary>
            The SvgPreserveAspectRatio interface corresponds to the preserveAspectRatio attribute, which is available for some of Svg's elements. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPreserveAspectRatio.Align">
            <summary>
            The type of the alignment value as specified by one of the constants specified above.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPreserveAspectRatio.MeetOrSlice">
            <summary>
            The type of the meet-or-slice value as specified by one of the constants specified above.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgTransform">
            <summary>
            SvgTransform is the interface for one of the component transformations within a SvgTransformList; thus, a SvgTransform object corresponds to a single component (e.g., "scale(..)" or "matrix(...)") within a transform attribute specification. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgTransformList">
            <summary>
            This interface defines a list of SvgTransform objects. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>50</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDefsElement">
            <summary>
            The SvgDefsElement interface corresponds to the 'defs' element.  
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>99</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDescElement">
            <summary>
            The SvgDescElement interface corresponds to the 'desc' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument">
            <summary>
            The root object in the document object hierarchy of an Svg document.
            </summary>
            <remarks>
            <p>
            When an 'svg'  element is embedded inline as a component of a
            document from another namespace, such as when an 'svg' element is
            embedded inline within an XHTML document
            [<a href="http://www.w3.org/TR/SVG/refs.html#ref-XHTML">XHTML</a>],
            then an
            <see cref="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument">ISvgDocument</see> object will not exist;
            instead, the root object in the
            document object hierarchy will be a Document object of a different
            type, such as an HTMLDocument object.
            </p>
            <p>
            However, an <see cref="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument">ISvgDocument</see> object will
            indeed exist when the root
            element of the XML document hierarchy is an 'svg' element, such as
            when viewing a stand-alone SVG file (i.e., a file with MIME type
            "image/svg+xml"). In this case, the
            <see cref="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument">ISvgDocument</see> object will be the
            root object of the document object model hierarchy.
            </p>
            <p>
            In the case where an SVG document is embedded by reference, such as
            when an XHTML document has an 'object' element whose href attribute
            references an SVG document (i.e., a document whose MIME type is
            "image/svg+xml" and whose root element is thus an 'svg' element),
            there will exist two distinct DOM hierarchies. The first DOM hierarchy
            will be for the referencing document (e.g., an XHTML document). The
            second DOM hierarchy will be for the referenced SVG document. In this
            second DOM hierarchy, the root object of the document object model
            hierarchy is an <see cref="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument">ISvgDocument</see> object.
            </p>
            <p>
            The <see cref="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument">ISvgDocument</see> interface contains a
            similar list of attributes and
            methods to the HTMLDocument interface described in the
            <a href="http://www.w3.org/TR/REC-DOM-Level-1/level-one-html.html">Document
            Object Model (HTML) Level 1</a> chapter of the
            [<a href="http://www.w3.org/TR/SVG/refs.html#ref-DOM1">DOM1</a>] specification.
            </p>
            </remarks>
            <developer>niklas@protocol7.com</developer>
            <completed>90</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument.Title">
            <summary>
            The title of a document as specified by the title sub-element of
            the 'svg' root element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument.Referrer">
            <summary>
            Returns the URI of the page that linked to this page. The value
            is an empty string if the user navigated to the page directly
            (not through a link, but, for example, via a bookmark).
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument.Domain">
            <summary>
            The domain name of the server that served the document, or a
            null string if the server cannot be identified by a domain name.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument.Url">
            <summary>
            The complete URI of the document.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument.RootElement">
            <summary>
            The root 'svg' element in the document hierarchy.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgElementInstance">
            <summary>
            For each 'use' element, the Svg DOM maintains a shadow tree (the "instance tree") of objects of type SvgElementInstance
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>0</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgElementInstanceList">
            <summary>
            The SvgElementInstanceList interface provides the abstraction of an ordered collection of SvgElementInstance objects, without defining or constraining how this collection is implemented.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>0</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgGElement">
            <summary>
            The SvgGElement interface corresponds to the 'g' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>99</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgImageElement">
            <summary>
            The SvgRectElement interface corresponds to the 'rect' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgImageElement.X">
            <summary>
            Corresponds to attribute x on the given 'rect' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgImageElement.Y">
            <summary>
            Corresponds to attribute y on the given 'rect' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgImageElement.Width">
            <summary>
            Corresponds to attribute width on the given 'rect' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.ISvgImageElement.Height">
            <summary>
            Corresponds to attribute height on the given 'rect' element.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgSwitchElement">
            <summary>
            The SvgSwitchElement interface corresponds to the 'switch' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgTitleElement">
            <summary>
            The SvgTitleElement interface corresponds to the 'title' element.  
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgUseElement">
            <summary>
            The SvgUseElement interface corresponds to the 'use' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>0</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgDefsElement">
            <summary>
            The SvgDefsElement interface corresponds to the 'defs' element. 
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgDescElement">
            <summary>
            The SvgDescElement interface corresponds to the 'desc' element. 
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgDocument">
            <summary>
            The root object in the document object hierarchy of an Svg document.
            </summary>
            <remarks>
            <p>
            When an 'svg'  element is embedded inline as a component of a
            document from another namespace, such as when an 'svg' element is
            embedded inline within an XHTML document
            [<a href="http://www.w3.org/TR/SVG/refs.html#ref-XHTML">XHTML</a>],
            then an
            <see cref="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument">ISvgDocument</see> object will not exist;
            instead, the root object in the
            document object hierarchy will be a Document object of a different
            type, such as an HTMLDocument object.
            </p>
            <p>
            However, an <see cref="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument">ISvgDocument</see> object will
            indeed exist when the root
            element of the XML document hierarchy is an 'svg' element, such as
            when viewing a stand-alone SVG file (i.e., a file with MIME type
            "image/svg+xml"). In this case, the
            <see cref="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument">ISvgDocument</see> object will be the
            root object of the document object model hierarchy.
            </p>
            <p>
            In the case where an SVG document is embedded by reference, such as
            when an XHTML document has an 'object' element whose href attribute
            references an SVG document (i.e., a document whose MIME type is
            "image/svg+xml" and whose root element is thus an 'svg' element),
            there will exist two distinct DOM hierarchies. The first DOM hierarchy
            will be for the referencing document (e.g., an XHTML document). The
            second DOM hierarchy will be for the referenced SVG document. In this
            second DOM hierarchy, the root object of the document object model
            hierarchy is an <see cref="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument">ISvgDocument</see> object.
            </p>
            <p>
            The <see cref="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgDocument">ISvgDocument</see> interface contains a
            similar list of attributes and
            methods to the HTMLDocument interface described in the
            <a href="http://www.w3.org/TR/REC-DOM-Level-1/level-one-html.html">Document
            Object Model (HTML) Level 1</a> chapter of the
            [<a href="http://www.w3.org/TR/SVG/refs.html#ref-DOM1">DOM1</a>] specification.
            </p>
            </remarks>
            <developer>niklas@protocol7.com</developer>
            <completed>60</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgDocument.buildTypeDictionary">
            <summary>
            buildTypeDictionary
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgDocument.Load(System.String)">
            <overloads>
            Loads an XML document.Loads the specified XML data.
            <blockquote>
            <b>Note</b>   The Load method always preserves significant white
            space. The PreserveWhitespace property determines whether or not
            white space is preserved. The default is false, whites space is
            not preserved.
            </blockquote>
            </overloads>
            <summary>
            Loads the XML document from the specified URL.
            </summary>
            <param name="url">
            URL for the file containing the XML document to load.
            </param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgDocument.Load(System.IO.Stream,System.String)">
            <summary>
            Loads the XML document from the specified stream.
            </summary>
            <param name="stream">
            The stream containing the XML document to load.
            </param>
            <param name="baseUri">baseUri</param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgDocument.Load(System.IO.Stream)">
            <summary>
            Loads the XML document from the specified stream.
            </summary>
            <param name="stream">
            The stream containing the XML document to load.
            </param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgDocument.LoadAndFire(System.Xml.XmlReader)">
            <summary>
            Loads the specified XML data and fires load events.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader">XmlReader</see> describing the document
            to be loaded.
            </param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgDocument.Title">
            <summary>
            The title of the document which is the text content of the first child title element of the 'svg' root element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgDocument.Referrer">
            <summary>
            Returns the URI of the page that linked to this page. The value is an empty string if the user navigated to the page directly (not through a link, but, for example, via a bookmark).
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgDocument.Domain">
            <summary>
            The domain name of the server that served the document, or a null string if the server cannot be identified by a domain name.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgDocument.RootElement">
            <summary>
            The root 'svg' element in the document hierarchy
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgGElement">
            <summary>
            The SvgGElement interface corresponds to the 'g' element.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgStyleableElement">
            <summary>
            SvgStyleableElement is an extension to the Svg DOM to create a class for all elements that are styleable.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement">
            <summary>
            A key interface definition is the SVGSVGElement interface, which is the interface that corresponds to the 'svg' element. This interface contains various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.
            SVGSVGElement extends ViewCSS and DocumentCSS to provide access to the computed values of properties and the override style sheet as described in DOM2. 
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.X">
            <summary>
            Corresponds to attribute x on the given 'svg' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.Y">
            <summary>
            Corresponds to attribute y on the given 'svg' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.Width">
            <summary>
            Corresponds to attribute width on the given 'svg' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.Height">
            <summary>
            Corresponds to attribute height on the given 'svg' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.ContentScriptType">
            <summary>
            Corresponds to attribute contentScriptType on the given 'svg' element
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.ContentStyleType">
            <summary>
            Corresponds to attribute contentStyleType on the given 'svg' element.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.PixelUnitToMillimeterX">
            <summary>
            Size of a pixel units (as defined by CSS2) along the x-axis of the viewport, which represents a unit somewhere in the range of 70dpi to 120dpi, and, on systems that support this, might actually match the characteristics of the target medium. On systems where it is impossible to know the size of a pixel, a suitable default pixel size is provided.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.PixelUnitToMillimeterY">
            <summary>
            Corresponding size of a pixel unit along the y-axis of the viewport.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.ScreenPixelToMillimeterX">
            <summary>
            User interface (UI) events in DOM Level 2 indicate the screen positions at which the given UI event occurred. When the user agent actually knows the physical size of a "screen unit", this attribute will express that information; otherwise, user agents will provide a suitable default value such as .28mm.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.ScreenPixelToMillimeterY">
            <summary>
            Corresponding size of a screen pixel along the y-axis of the viewport.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.UseCurrentView">
            <summary>
            The initial view (i.e., before magnification and panning) of the current innermost SVG 
            document fragment can be either the "standard" view (i.e., based on attributes on 
            the 'svg' element such as fitBoxToViewport) or to a "custom" view (i.e., a hyperlink 
            into a particular 'view' or other element - see Linking into SVG content: URI 
            fragments and SVG views). If the initial view is the "standard" view, then this 
            attribute is false. If the initial view is a "custom" view, then this attribute is 
            true.
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.currentView">
            <summary>
            The definition of the initial view (i.e., before magnification and panning) of the current innermost SVG document fragment. The meaning depends on the situation:
            * If the initial view was a "standard" view, then:
             o the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly
             o the values for transform and viewTarget within currentView will be null
            * If the initial view was a link into a 'view' element, then:
             o the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will correspond to the corresponding attributes for the given 'view' element
             o the values for transform and viewTarget within currentView will be null
            * If the initial view was a link into another element (i.e., other than a 'view'), then:
             o the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly for the closest ancestor 'svg' element
             o the values for transform within currentView will be null
             o the viewTarget within currentView will represent the target of the link
            * If the initial view was a link into the SVG document fragment using an SVG view specification fragment identifier (i.e., #svgView(...)), then:
             o the values for viewBox, preserveAspectRatio, zoomAndPan, transform and viewTarget within currentView will correspond to the values from the SVG view specification fragment identifier
            The object itself and its contents are both readonly. 
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CurrentScale">
            <summary>
            This attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations, as described under Magnification and panning. DOM attributes currentScale and currentTranslate are equivalent to the 2x3 matrix [a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]. If "magnification" is enabled (i.e., zoomAndPan="magnify"), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost 'svg' element).
            </summary>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised on an attempt to change the value of a readonly attribute</exception>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.ViewBoxTransform">
            <summary>
            This function is super useful, calculates out the transformation matrix 
            (i.e., scale and translate) of the viewport to user space.
            </summary>
            <returns>A Matrix which has the translate and scale portions set.</returns>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CurrentTranslate">
            <summary>
            The corresponding translation factor that takes into account user "magnification".
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.SuspendRedraw(System.Int32)">
            <summary>
            Takes a time-out value which indicates that redraw shall not occur until: (a) the 
            corresponding unsuspendRedraw(suspend_handle_id) call has been made, (b) an 
            unsuspendRedrawAll() call has been made, or (c) its timer has timed out. In 
            environments that do not support interactivity (e.g., print media), then redraw shall 
            not be suspended. suspend_handle_id = suspendRedraw(max_wait_milliseconds) and 
            unsuspendRedraw(suspend_handle_id) must be packaged as balanced pairs. When you 
            want to suspend redraw actions as a collection of SVG DOM changes occur, then 
            precede the changes to the SVG DOM with a method call similar to 
            suspend_handle_id = suspendRedraw(max_wait_milliseconds) and follow the changes with 
            a method call similar to unsuspendRedraw(suspend_handle_id). Note that multiple 
            suspendRedraw calls can be used at once and that each such method call is treated
            independently of the other suspendRedraw method calls.
            </summary>
            <param name="maxWaitMilliseconds">The amount of time in milliseconds to hold off 
            before redrawing the device. Values greater than 60 seconds will be truncated 
            down to 60 seconds.</param>
            <returns>A number which acts as a unique identifier for the given suspendRedraw() call. This value must be passed as the parameter to the corresponding unsuspendRedraw() method call.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.UnsuspendRedraw(System.Int32)">
            <summary>
            Cancels a specified suspendRedraw() by providing a unique suspend_handle_id.
            </summary>
            <param name="suspendHandleId">A number which acts as a unique identifier for the desired suspendRedraw() call. The number supplied must be a value returned from a previous call to suspendRedraw()</param>
            <exception cref="T:Ab2d.Internal.SvgDom.Dom.DomException">This method will raise a DOMException with value NOT_FOUND_ERR if an invalid value (i.e., no such suspend_handle_id is active) for suspend_handle_id is provided.</exception>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.UnsuspendRedrawAll">
            <summary>
            Cancels all currently active suspendRedraw() method calls. This method is most 
            useful 
            at the very end of a set of SVG DOM calls to ensure that all pending suspendRedraw() 
            method calls have been cancelled.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.ForceRedraw">
            <summary>
            In rendering environments supporting interactivity, forces the user agent to 
            immediately redraw all regions of the viewport that require updating.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.PauseAnimations">
            <summary>
            Suspends (i.e., pauses) all currently running animations that are defined within the 
            SVG document fragment corresponding to this 'svg' element, causing the animation clock 
            corresponding to this document fragment to stand still until it is unpaused.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.UnpauseAnimations">
            <summary>
            Unsuspends (i.e., unpauses) currently running animations that are defined within the 
            SVG document fragment, causing the animation clock to continue from the time at which 
            it was suspended.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.AnimationsPaused">
            <summary>
            Returns true if this SVG document fragment is in a paused state
            </summary>
            <returns>Boolean indicating whether this SVG document fragment is in a paused 
            state.</returns>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CurrentTime">
            <summary>
            The current time in seconds relative to the start time for the current SVG document 
            fragment.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.GetIntersectionList(Ab2d.Internal.SvgDom.Dom.Svg.ISvgRect,Ab2d.Internal.SvgDom.Dom.Svg.SvgElement)">
            <summary>
            Returns the list of graphics elements whose rendered content intersects the supplied 
            rectangle, honoring the 'pointer-events' property value on each candidate graphics 
            element.
            </summary>
            <param name="rect">The test rectangle. The values are in the initial coordinate 
            system for the current 'svg' element.</param>
            <param name="referenceElement">If not null, then only return elements whose drawing 
            order has them below the given reference element.</param>
            <returns>A list of Elements whose content intersects the supplied rectangle.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.GetEnclosureList(Ab2d.Internal.SvgDom.Dom.Svg.ISvgRect,Ab2d.Internal.SvgDom.Dom.Svg.SvgElement)">
            <summary>
            Returns the list of graphics elements whose rendered content is entirely contained 
            within the supplied rectangle, honoring the 'pointer-events' property value on each 
            candidate graphics element.
            </summary>
            <param name="rect">The test rectangle. The values are in the initial coordinate system 
            for the current 'svg' element.</param>
            <param name="referenceElement">If not null, then only return elements whose drawing 
            order has them below the given reference element.</param>
            <returns>A list of Elements whose content is enclosed by the supplied 
            rectangle.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CheckIntersection(Ab2d.Internal.SvgDom.Dom.Svg.SvgElement,Ab2d.Internal.SvgDom.Dom.Svg.ISvgRect)">
            <summary>
            Returns true if the rendered content of the given element intersects the supplied 
            rectangle, honoring the 'pointer-events' property value on each candidate graphics 
            element.
            </summary>
            <param name="element">The element on which to perform the given test.</param>
            <param name="rect">The test rectangle. The values are in the initial coordinate system 
            for the current 'svg' element.</param>
            <returns>True or false, depending on whether the given element intersects the supplied 
            rectangle.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CheckEnclosure(Ab2d.Internal.SvgDom.Dom.Svg.SvgElement,Ab2d.Internal.SvgDom.Dom.Svg.ISvgRect)">
            <summary>
            Returns true if the rendered content of the given element is entirely contained within 
            the supplied rectangle, honoring the 'pointer-events' property value on each candidate 
            graphics element.
            </summary>
            <param name="element">The element on which to perform the given test</param>
            <param name="rect">The test rectangle. The values are in the initial coordinate system 
            for the current 'svg' element.</param>
            <returns>True or false, depending on whether the given element is enclosed by the 
            supplied rectangle.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.DeselectAll">
            <summary>
            Unselects any selected objects, including any selections of text strings and type-in 
            bars.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CreateSvgNumber">
            <summary>
            Creates an SVGNumber object outside of any document trees. The object is initialized 
            to a value of zero.
            </summary>
            <returns>An SVGNumber object.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CreateSvgLength">
            <summary>
            Creates an SVGLength object outside of any document trees. The object is initialized 
            to the value of 0 user units.
            </summary>
            <returns>An SVGLength object.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CreateSvgAngle">
            <summary>
            Creates an SVGAngle object outside of any document trees. The object is initialized to 
            the value 0 degrees (unitless).
            </summary>
            <returns>An SVGAngle object.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CreateSvgPoint">
            <summary>
            Creates an SVGPoint object outside of any document trees. The object is initialized to 
            the point (0,0) in the user coordinate system.
            </summary>
            <returns>An SVGPoint object.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CreateSvgMatrix">
            <summary>
            Creates an SVGMatrix object outside of any document trees. The object is initialized 
            to the identity matrix.
            </summary>
            <returns>An SVGMatrix object.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CreateSvgRect">
            <summary>
            Creates an SVGRect object outside of any document trees. The object is initialized 
            such that all values are set to 0 user units.
            </summary>
            <returns>An SVGRect object.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CreateSvgTransform">
            <summary>
            Creates an SVGTransform object outside of any document trees. The object is initialized
            to an identity matrix transform (SVG_TRANSFORM_MATRIX).
            </summary>
            <returns>An SVGTransform object.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.CreateSvgTransformFromMatrix(Ab2d.Internal.SvgDom.Dom.Svg.ISvgMatrix)">
            <summary>
            Creates an SVGTransform object outside of any document trees. The object is 
            initialized to the given matrix transform (i.e., SVG_TRANSFORM_MATRIX).
            </summary>
            <param name="matrix">The transform matrix.</param>
            <returns>An SVGTransform object.</returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgSvgElement.GetElementById(System.String)">
            <summary>
            Searches this SVG document fragment (i.e., the search is restricted to a subset of the 
            document tree) for an Element whose id is given by elementId. If an Element is found, 
            that Element is returned. If no such element exists, returns null. Behavior is not 
            defined if more than one element has this id.
            </summary>
            <param name="elementId">The unique id value for an element.</param>
            <returns>The matching element.</returns>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgSwitchElement">
            <summary>
            The SvgSwitchElement interface corresponds to the 'switch' 
            element. 
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgTitleElement">
            <summary>
            The SvgTitleElement interface corresponds to the 'title' element. 
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgTransformableElement.GetCTM">
            <summary>
            For each given element, the accumulation of all transformations that have been defined 
            on the given element and all of its ancestors up to and including the element that 
            established the current viewport (usually, the 'svg' element which is the most 
            immediate ancestor to the given element) is called the current transformation matrix 
            or CTM. 
            </summary>
            <returns>A matrix representing the mapping of current user coordinates to viewport 
            coordinates.</returns>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgGradientElement">
            <summary>
            The SvgGradientElement interface is a base interface used by SvgLinearGradientElement and SvgRadialGradientElement. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>20</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgLinearGradientElement">
            <summary>
            The SvgLinearGradientElement interface corresponds to the 'linearGradient' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgRadialGradientElement">
            <summary>
            The ISvgRadialGradientElement interface corresponds to the 'radialGradient' element. 
            </summary>
            <developer>Rick.Bullotta@lighthammer.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgStopElement">
            <summary>
            The SvgStopElement interface corresponds to the 'stop' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgRadialGradientElement">
            <summary>
            Summary description for SvgRadialGradientElement.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgStopElement">
            <summary>
            Summary description for SvgStopElement.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISharpDoNotPaint">
            <summary>
            This is an extension to the Svg DOM.  It denotes that an element
            shouldn't be painted.
            </summary>
            <remarks>
            To prevent an Svg element from being painted, let the Svg
            element implement this interface.
            </remarks>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISharpGDIPath">
            <summary>
            This is an extension to the Svg DOM. It denotes that an element has a
            drawable shape.
            </summary>
            <remarks>
            To give an Svg element the capability to be drawn, let the Svg
            element implement this interface.  To implement this interface,
            the element needs to maintain a
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath">GraphicsPath</see>
            object that is populated with drawing information.  The
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath">GraphicsPath</see>
            object should be returned from
            <see cref="M:Ab2d.Internal.SvgDom.Dom.Svg.ISharpGDIPath.GetGraphicsPath">GetGraphicsPath</see> method and
            invalidated with the
            <see cref="M:Ab2d.Internal.SvgDom.Dom.Svg.ISharpGDIPath.Invalidate">Invalidate</see> method.
            </remarks>
            <developer>niklas@protocol7.com</developer>
            <completed>50</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.ISharpGDIPath.GetGraphicsPath">
            <summary>
            Returns the
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath">GraphicsPath</see>
            object that describes the shape
            of the SvgElement.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.ISharpGDIPath.Invalidate">
            <summary>
            Invalidates the
            <see cref="M:Ab2d.Internal.SvgDom.Dom.Svg.ISharpGDIPath.GetGraphicsPath">GetGraphicsPath</see>
            object.
            </summary>
            <remarks>
            When this method is called, the object will remove the stored
            reference to the <see cref="T:System.Drawing.Drawing2D.GraphicsPath">GraphicsPath</see>
            so that the next call to
            <see cref="M:Ab2d.Internal.SvgDom.Dom.Svg.ISharpGDIPath.GetGraphicsPath">GetGraphicsPath</see> will generate
            a new <see cref="T:System.Drawing.Drawing2D.GraphicsPath">GraphicsPath</see> object.
            </remarks>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPaint">
            <summary>
            The SvgPaint interface corresponds to basic type paint and represents the values of properties 'fill' and 'stroke'. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>50</completed>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerOrient.Unknown">
            <summary>
            The marker orientation is not one of predefined types. It is invalid to attempt to define a new value of this type or to attempt to switch an existing value to this type.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerOrient.Auto">
            <summary>
            Attribute orient has value 'auto'.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerOrient.Angle">
            <summary>
            Attribute orient has an angle value.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerUnit.Unknown">
            <summary>
            The marker unit type is not one of predefined types. It is invalid to attempt to define a new value of this type or to attempt to switch an existing value to this type.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerUnit.UserSpaceOnUse">
            <summary>
            The value of attribute markerUnits is 'userSpaceOnUse'.
            </summary>
        </member>
        <member name="F:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerUnit.StrokeWidth">
            <summary>
            The value of attribute markerUnits is 'strokeWidth'.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerElement.SetOrientToAuto">
            <summary>
             Sets the value of attribute orient to 'auto'.
            </summary>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerElement.SetOrientToAngle(Ab2d.Internal.SvgDom.Dom.Svg.ISvgAngle)">
            <summary>
             Sets the value of attribute orient to the given angle.
            </summary>
            <param name="angle"> The angle value to use for attribute orient.</param>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerElement.RefX">
            <summary>
            Corresponds to attribute refX on the given 'marker' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerElement.RefY">
            <summary>
            Corresponds to attribute refY on the given 'marker' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerElement.MarkerUnits">
            <summary>
            Corresponds to attribute markerUnits on the given 'marker' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerElement.MarkerWidth">
            <summary>
            Corresponds to attribute markerWidth on the given 'marker' element
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerElement.MarkerHeight">
            <summary>
            Corresponds to attribute markerHeight on the given 'marker' element.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerElement.OrientType">
            <summary>
            Corresponds to attribute orient on the given 'marker' element. One of the Marker Orientation Types defined above.
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgMarkerElement.OrientAngle">
            <summary>
            Corresponds to attribute orient on the given 'marker' element. If markerUnits is SVG_MARKER_ORIENT_ANGLE, the angle value for attribute orient; otherwise, it will be set to zero.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgAnimatedPathData">
            <summary>
            The SvgAnimatedPathData interface supports elements which have a 'd' attribute which holds Svg path data, and supports the ability to animate that attribute. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathElement">
            <summary>
            The SvgPathElement interface corresponds to the 'path' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>10</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSeg">
            <summary>
            The SvgPathSeg interface is a base interface that corresponds to a single command within a path data specification. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegArcAbs">
            <summary>
            The SvgPathSegArcAbs interface corresponds to an "absolute arcto" (A) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegArcRel">
            <summary>
            The SvgPathSegArcRel interface corresponds to a "relative arcto" (a) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegClosePath">
            <summary>
            The SvgPathSegClosePath interface corresponds to a "closepath" (z) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegCurvetoCubicAbs">
            <summary>
            The SvgPathSegCurvetoCubicAbs interface corresponds to an "absolute cubic Bézier curveto" (C) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegCurvetoCubicRel">
            <summary>
            The SvgPathSegCurvetoCubicRel interface corresponds to a "relative cubic Bézier curveto" (c) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegCurvetoCubicSmoothAbs">
            <summary>
            The SvgPathSegCurvetoCubicSmoothAbs interface corresponds to an "absolute smooth cubic curveto" (S) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegCurvetoCubicSmoothRel">
            <summary>
            The SvgPathSegCurvetoCubicSmoothRel interface corresponds to a "relative smooth cubic curveto" (s) path data command.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegCurvetoQuadraticAbs">
            <summary>
            The SvgPathSegCurvetoQuadraticAbs interface corresponds to an "absolute quadratic Bézier curveto" (Q) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegCurvetoQuadraticRel">
            <summary>
            The SvgPathSegCurvetoCubicRel interface corresponds to a "relative cubic Bézier curveto" (c) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegCurvetoQuadraticSmoothAbs">
            <summary>
            The SvgPathSegCurvetoQuadraticSmoothAbs interface corresponds to an "absolute smooth quadratic curveto" (T) path data command.
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegCurvetoQuadraticSmoothRel">
            <summary>
            The SvgPathSegCurvetoQuadraticSmoothRel interface corresponds to a "relative smooth quadratic curveto" (t) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegLinetoAbs">
            <summary>
            The SvgPathSegLinetoAbs interface corresponds to an "absolute lineto" (L) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegLinetoHorizontalAbs">
            <summary>
            The SvgPathSegLinetoHorizontalAbs interface corresponds to an "absolute horizontal lineto" (H) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegLinetoHorizontalRel">
            <summary>
            The SvgPathSegLinetoHorizontalRel interface corresponds to a "relative horizontal lineto" (h) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegLinetoRel">
            <summary>
            The SvgPathSegLinetoRel interface corresponds to an "relative lineto" (l) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegLinetoVerticalAbs">
            <summary>
            The SvgPathSegLinetoVerticalAbs interface corresponds to an "absolute vertical lineto" (V) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegLinetoVerticalRel">
            <summary>
            The SvgPathSegLinetoVerticalRel interface corresponds to a "relative vertical lineto" (v) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegList">
            <summary>
            This interface defines a list of SvgPathSeg objects. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>90</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegMovetoAbs">
            <summary>
            The SvgPathSegMovetoAbs interface corresponds to an "absolute moveto" (M) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgPathSegMovetoRel">
            <summary>
            The SvgPathSegMovetoRel interface corresponds to an "relative moveto" (m) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgSimlePathElement">
            <summary>
            The SvgPathElement interface corresponds to the 'path' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>10</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegArcAbs">
            <summary>
            Summary description for SvgPathSegLinetoAbs.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegArcRel">
            <summary>
            Summary description for SvgPathSegLinetoAbs.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegClosePath">
            <summary>
            Summary description for SvgPathSegClosePath.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegCurvetoCubicRel">
            <summary>
            Summary description for SvgPathSegCurvetoCubicRel.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegCurvetoCubicSmoothRel">
            <summary>
            Summary description for SvgPathSegCurvetoCubicSmoothAbs.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegCurvetoQuadraticAbs">
            <summary>
            Summary description for SvgPathSegCurvetoCubicAbs.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegCurvetoQuadraticRel">
            <summary>
            Summary description for SvgPathSegCurvetoCubicAbs.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothAbs">
            <summary>
            The SvgPathSegCurvetoQuadraticSmoothAbs interface corresponds to an "absolute smooth quadratic curveto" (T) path data command. 
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothAbs.X">
            <summary>
            The absolute X coordinate for the end point of this path segment. 
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothAbs.Y">
            <summary>
            The absolute Y coordinate for the end point of this path segment. 
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothRel">
            <summary>
            The SvgPathSegCurvetoQuadraticSmoothRel interface corresponds to an "relative smooth quadratic curveto" (t) path data command. 
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothRel.X">
            <summary>
            The absolute X coordinate for the end point of this path segment. 
            </summary>
        </member>
        <member name="P:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothRel.Y">
            <summary>
            The absolute Y coordinate for the end point of this path segment. 
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegMoveto">
            <summary>
            Summary description for SvgMoveToSeg.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPathSegMovetoRel">
            <summary>
            The SvgPathSegMovetoRel interface corresponds to an "relative moveto" (m) path data command. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgScriptElement">
            <summary>
            The SvgScriptElement interface corresponds to the 'script' element. 
            </summary>
            <developer>kevin@kevlindev.com</developer>
            <completed>99</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgScriptElement">
            <summary>
            The SVGScriptElement interface corresponds to the 'script' element.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgCircleElement">
            <summary>
            The SVGCircleElement interface corresponds to the 'rect' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgEllipseElement">
            <summary>
            The SvgEllipseElement class corresponds to the 'ellipse' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgLineElement">
            <summary>
            The SVGLineElement interface corresponds to the 'line' element.  
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPolygonElement">
            <summary>
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>90</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgPolylineElement">
            <summary>
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>90</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgRectElement">
            <summary>
            The SVGRectElement interface corresponds to the 'rect' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgTextContentElement">
            <summary>
            The SvgTextContentElement interface is inherited by various text-related interfaces, such as SvgTextElement, SvgTSpanElement, SvgTRefElement, SvgAltGlyphElement and SvgTextPathElement. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>10</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgTextElement">
            <summary>
            The SvgTextElement interface corresponds to the 'text' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgTextPathElement">
            <summary>
            The SvgTextPathElement interface corresponds to the 'textPath' element. 
            </summary>
            <developer></developer>
            <completed>0</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgTextPositioningElement">
            <summary>
            The SvgTextPositioningElement interface is inherited by text-related interfaces: SvgTextElement, SvgTSpanElement, SvgTRefElement and SvgAltGlyphElement. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgTRefElement">
            <summary>
            The SvgTRefElement interface corresponds to the 'tref' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.ISvgTSpanElement">
            <summary>
            The SvgTSpanElement interface corresponds to the 'tspan' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgTextContentElement">
            <summary>
            Summary description for SvgTextContentElement.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgTextElement">
            <summary>
            Summary description for SvgTextElement.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgTextPathElement">
            <summary>
            Summary description for SvgTextElement.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgTextPositioningElement">
            <summary>
            The SvgTextPositioningElement interface is inherited by text-related interfaces: SvgTextElement, SvgTSpanElement, SvgTRefElement and SvgAltGlyphElement. 
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgTRefElement">
            <summary>
            Summary description for SvgTRefElement.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Svg.SvgTSpanElement">
            <summary>
            The SvgTSpanElement interface corresponds to the 'tspan' element. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Text">
            <summary>
            Summary description for Text.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Dom.Whitespace">
            <summary>
            Summary description for Whitespace.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Enumerators.SvgLengthListEnumerator">
            <summary>
            Summary description for SvgLengthListEnumerator.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Enumerators.SvgNumberListEnumerator">
            <summary>
            Summary description for SvgLengthListEnumerator.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Enumerators.SvgPointListEnumerator">
            <summary>
            Summary description for SvgLengthListEnumerator.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Enumerators.SvgStringListEnumerator">
            <summary>
            Summary description for SvgLengthListEnumerator.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Enumerators.SvgTransformListEnumerator">
            <summary>
            Summary description for SvgLengthListEnumerator.
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Polynomials.Polynomial">
            <summary>
            Summary description for Polynomial.
            </summary>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Polynomials.Polynomial.#ctor(System.Double[])">
            <summary>
            Polynomial constuctor
            </summary>
            <param name="coefficients"></param>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Polynomials.Polynomial.Interpolate(System.Double[],System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Interpolate - adapted from "Numerical Recipes in C"
            </summary>
            <param name="xs"></param>
            <param name="ys"></param>
            <param name="n"></param>
            <param name="offset"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Polynomials.Polynomial.trapezoid(System.Double,System.Double,System.Int32)">
            <summary>
            trapezoid - adapted from "Numerical Recipes in C"
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Polynomials.Polynomial.Evaluate(System.Double)">
            <summary>
            Evaluate
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Polynomials.Polynomial.Simpson(System.Double,System.Double)">
            <summary>
            Simspon - adapted from "Numerical Recipes in C"
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Internal.SvgDom.Polynomials.Polynomial.Romberg(System.Double,System.Double)">
            <summary>
            Romberg - adapted from "Numerical Recipes in C"
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Polynomials.ValueWithError">
            <summary>
            Stucture used to return values with associated error tolerances
            </summary>
        </member>
        <member name="T:Ab2d.Internal.SvgDom.Polynomials.SqrtPolynomial">
            <summary>
            This class overrides Polynomial's evaluate method to return the square root of that value.  We need to integrate the square root of a polynomial when finding the arc length of a Bezier curve.
            </summary>
            <developer>kevin@kevlindev.com</developer>
            <completed>100</completed>
        </member>
        <member name="T:Ab2d.ReaderSvg">
            <summary>
            ReaderSvg is a class library for reading svg and svgz files and converting its elements into WPF elements. For usage in XAML see <see cref="T:Ab2d.Controls.SvgViewbox"/> and <see cref="T:Ab2d.Controls.SvgDrawing"/>.
            </summary>
            <remarks>
            <para>
            Ab2d.ReaderSvg class can be used to read svg and svgz files from the code.
            </para>
            <para>
            They can be read as Shapes with <see cref="M:Ab2d.ReaderSvg.Read(System.String)"/> method or as Drawing objects with <see cref="M:Ab2d.ReaderSvg.ReadGeometry(System.String)"/>.
            </para>
            <para>
            After the file has been read, it is possible to get the xaml of the read Viewbox or Image with <see cref="M:Ab2d.ReaderSvg.GetXaml"/> method.
            </para>
            <para>
            If your application needs images and shapes from many svg and svgz files, it is recommended that they are stored in a ResourceDictionary.
            To simplify creating ResourceDictionaries a <see cref="T:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter"/> class can be used. There is also a sample Ab2d.ReaderSvg.ResourceDictionaryWriter application available to simplify this process.
            </para>
            <para>
            When svg file was created with Microsoft Visio, than the ReaderSvg can also read custom properties and layers data from the svg file.
            To read more about reading custom properties see <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.String)"/> method. To read more about accessing layers data see <see cref="M:Ab2d.ReaderSvg.GetLayerNames"/> method.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows the most simple use of ReaderSvg. It loads the mySample.svg file and adds it to the myStackPanel.
            </para>
            <code>
            Viewbox sampleViewbox = Ab2d.ReaderSvg.Instance.Read(@"c:\mySample.svg");
            myStackPanel.Children.Add(sampleViewbox);
            </code>
            <para>
            The following sample shows how to read svg from Application's Resource.
            The <see cref="M:Ab2d.ReaderSvg.ReadGeometry(System.String,Ab2d.Common.ReaderSvg.GeometrySettings)"/> reads svg file into Drawing objects and fully optimizes it for best performance.
            </para>
            <code>
            Image clipartFromResource;
            Ab2d.Common.ReaderSvg.GeometrySettings settings;
            
            // gets Drawing objects optimized for best performance
            // NOTE: Because of heavy optimization it is possible that some anomalies appear on the image
            settings = Ab2d.Common.ReaderSvg.GeometrySettings.FullOptimization;
            
            Uri uri = new Uri("/cliparts/mySample.svg", UriKind.Relative);
            using (Stream svgStream = Application.GetResourceStream(uri).Stream)
            {
                clipartFromResource = Ab2d.ReaderSvg.Instance.ReadGeometry(svgStream, settings);
            }
            
            myStackPanel.Children.Add(clipartFromResource);
            </code> 
            <para>
            The following sample reads the mySample.svg file, gets its xaml for Silverlight and saves it into a file.
            </para>
            <code>
            var myReader = new Ab2d.ReaderSvg();
            
            Viewbox sampleViewbox = myReader.Read(@"c:\mySample.svg");
            string xaml = myReader.GetXaml(new Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings());
            
            System.IO.File.WriteAllText(@"c:\mySample_for_Silverlight.xaml", xaml);
            </code>  
            <para>The next example uses the <see cref="M:Ab2d.ReaderSvg.RenderToBitmap(System.Int32,System.Int32,System.Windows.Media.Brush)"/> method to render the read svg file to image with custom size and saves it to disk:</para>
            <code>
            var readerSvg = new Ab2d.ReaderSvg();
            readerSvg.Read(@"c:\mySample.svg");
            
            // Render to bitmap with 1024 width - height will be set automatically so that the
            // Image aspect ratio is preserved
            var wpfBitmap = readerSvg.RenderToBitmap(1024, 0, Brushes.White);
            
            var encoder = new System.Windows.Media.Imaging.PngBitmapEncoder();
            // Uncomment to save to jpg
            //var encoder = new JpegBitmapEncoder();
            //encoder.QualityLevel = 85;
            
            encoder.Frames.Add(System.Windows.Media.Imaging.BitmapFrame.Create(wpfBitmap));
                        
            using (var stream = System.IO.File.OpenWrite("c:\\svgImage.png"))
            {
                encoder.Save(stream);
            }     
            </code>            
            </example>
        </member>
        <member name="T:Ab2d.ReaderSvg.SwitchElementProcessingTypes">
            <summary>
            The SwitchElementsProcessingTypes enum defines the possible values for the SwitchElementsProcessingType property.
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.SwitchElementProcessingTypes.Disabled">
            <summary>
            Svg switch element will not be imported.
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.SwitchElementProcessingTypes.ShowFirstDiscardOthers">
            <summary>
            Only the first switch child will be imported. Other children will not be imported.
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.SwitchElementProcessingTypes.ShowFirstHideOthers">
            <summary>
            All switch children will be imported. Only the first element will be shown. Other children will have their Visibility set to Hidden.
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.SwitchElementProcessingTypes.ShowFirstCollapseOthers">
            <summary>
            All switch children will be imported. Only the first element will be shown. Other children will have their Visibility set to Collapsed.
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.SwitchElementProcessingTypes.ShowAll">
            <summary>
            All switch children will be imported and shown.
            </summary>
        </member>
        <member name="T:Ab2d.ReaderSvg.SvgCreators">
            <summary>
            SvgCreators enum defines common applications that can produce svg files.
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.SvgCreators.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.SvgCreators.Visio">
            <summary>
            Microsoft Visio
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.SvgCreators.CorelDraw">
            <summary>
            CorelDraw
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.SvgCreators.AdobeIllustrator">
            <summary>
            Adobe Illustrator
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.SvgCreators.Inkscape">
            <summary>
            Inkscape
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.SvgCreator">
            <summary>
            Gets an application that was used to create this svg file.
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.Title">
            <summary>
            Title defined in svg file
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.Description">
            <summary>
            Description defined in svg file
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.NamedObjects">
            <summary>
            Dictionary with elements ids as keys and its appropriate objects as values
            Ids (keys) can be defined in a drawing application
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.SetNameProperty">
            <summary>
            Gets or sets a Boolean that determines if the object's Name property is set to the name defined in svg file (default value is true).
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.Width">
            <summary>
            Gets or sets the Width of the returned Viewbox element
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.Height">
            <summary>
            Gets or sets the Height of the returned Viewbox element
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.WidthInUnits">
            <summary>
            Gets a string that represents width of svg element in specified units (for example "2cm" or "2in"). If the read sgv element does not specify units, than this value is null.
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.HeightInUnits">
            <summary>
            Gets a string that represents height of svg element in specified units (for example "2cm" or "2in"). If the read sgv element does not specify units, than this value is null.
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.InnerWidth">
            <summary>
            Gets the Width of all read svg elements
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.InnerHeight">
            <summary>
            Gets Height of all read svg elements
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.SvgBounds">
            <summary>
            Gets the bounds of the svg elements.
            Note: Usually svg elements does not start at (0,0) but are places in a virtual letter. To work only with svg elements so they can be sized according to the host element (for example StackPanel, Page, etc.) two Canvases and a Viewbox is used. But with SvgBounds property it is possible to get the original bounds of the svg elements. If <see cref="P:Ab2d.ReaderSvg.AutoSize"/> is set to false, the SvgBounds are get from the root svg element.
            Also this property makes InnerWeight and InnerHeight obsolete.
            </summary>
        </member>
        <member name="T:Ab2d.ReaderSvg.NamedObjectsSourceType">
            <summary>
            Enum that defines the available sources for the object's name.
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.NamedObjectsSourceType.Auto">
            <summary>
            Automatically tries to define the source of the name with checking which application created the svg file - for example for files created in Microsoft Visio the TitleIfExist is used internally.
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.NamedObjectsSourceType.Id">
            <summary>
            Name is get from svg element's id.
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.NamedObjectsSourceType.Title">
            <summary>
            Name is get from svg element's title child element (useful for Microsoft Visio or other applications that set title).
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.NamedObjectsSourceType.TitleIfExist">
            <summary>
            Name is get from svg element's title child element. If the title child element does not exist the element's id is used for the name (useful for Microsoft Visio or other applications that set title).
            </summary>
        </member>
        <member name="F:Ab2d.ReaderSvg.NamedObjectsSourceType.InkscapeLabel">
            <summary>
            Name is get from the Label set in Inkscape (written to inkscape:label attribute). Note that the leading hash '#' is removed from the name.
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.NamedObjectsSource">
            <summary>
            Gets or sets one of the <see cref="T:Ab2d.ReaderSvg.NamedObjectsSourceType"/> as the source to get the object's name. Default value is NamedObjectsSourceType.Auto.
            </summary>
            <remarks>
            <para>
            The name is used to fill the <see cref="P:Ab2d.ReaderSvg.NamedObjects"/> dictionary or as the Name property in the exported XAML.
            The names can be get from the id attribute of the svg element or from the title element. Usually names are set from id attribute. But some applications (for example Microsoft Visio) do not allow to change id attribute but instead set the title element.
            </para>
            <para>
            Setting NamedObjectsSource to Title or TitleIfExist (Id is used if title does not exist) is useful so users can specify the name of the created WPF elements in the application that created the svg file.
            </para>
            <para>
            By default NamedObjectsSource is set to <b>Auto</b>. This means that ReaderSvg tries to define the source of the name with checking which application created the svg file - for example for files created in Microsoft Visio the TitleIfExist is used internally.
            </para>
            <para>
            Note that the name must start with a letter or underscore and can contain only letters, digits, or underscores. If this is not the case than the name is corrected by ReaderSvg (underscores are used instead of invalid characters).
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.SetSvgNameToParentTransformCanvas">
            <summary>
            Gets or sets a boolean that specifies if object name is set to the Canvas that is created to contain object's transformation when the object also defines the Canvas.Left and Canvas.Top properties. Default value is false.
            </summary>
            <remarks>
            <para>
            When svg element uses both position (x and y attributes) and transformation, then ReaderSvg creates a parent Canvas that contains object's transformation.
            This way the object can preserve the same position values as in svg file (specified with Canvas.Left and Canvas.Top properties) and also the same transformation.
            </para>
            <para>
            For example (first svg element and then WPF element):
            </para>
            <code>
            &lt;rect id="rect1" x="20" y="10" transform="matrix(-1 0 0 1 0 0)" /&gt;
            </code>
            <code>
            &lt;Canvas Name="rect1_transform" RenderTransform="-1 0 0 1 0 0" &gt;
                &lt;Rectangle Name="rect1" Canvas.Left="20" Canvas.Top="10" /&gt;
            &lt;/Canvas&gt;
            </code>
            <para>
            The sample shows that in order to preserve all the attribute values a new parent canvas needs to be created.
            </para>
            <para>
            The property <b>SetSvgNameToParentTransformCanvas</b> is used to specify which element (in our example Canvas or Rectangle) will get the name of the
            original svg element ("rect1" in our example).
            </para>
            <para>
            When the SetSvgNameToParentTransformCanvas is set to false (by default) the Rectangle gets the name from svg element 
            and the created Canvas gets the name created from svg name and the format string specified by the <see cref="P:Ab2d.ReaderSvg.TransformCanvasNameFormatString"/> property -
            by default "_transform" suffix.
            </para>
            <para>
            When the SetSvgNameToParentTransformCanvas is set to true, the svg name is set to the Canvas element. The Rectangle does not get any name specified.
            This value can be used to preserve the backward compatibility with older version of ReaderSvg.
            </para>
            <para>
            NOTE: If you want to optimize the hierarchy of the objects and do not want to have many Canvas objects,
            you can set the <see cref="P:Ab2d.ReaderSvg.FlattenHierarchies"/> property to true before reading the svg file and
            the read objects will have only minimal amount of Canvases.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.TransformCanvasNameFormatString">
            <summary>
            Gets or sets a string that specifies how the Transform Canvas that is created to contain object's transformation is named.
            Default value is "{0}_transform".
            </summary>
            <remarks>
            <para>
            <b>TransformCanvasNameFormatString</b> gets or sets a string that specifies how the Transform Canvas that is created to contain object's transformation is named.
            </para>
            <para>
            Default value is "{0}_transform".
            </para>
            <para>
            See <see cref="P:Ab2d.ReaderSvg.SetSvgNameToParentTransformCanvas"/> for more information when the Transform Canvas is created.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.IsCorrectingNamesForWpf">
            <summary>
            Gets or sets a Boolean that specifies if the names are corrected so that they can be used in XAML.
            The following rule is applied in this case: name must start with a letter or underscore and can contain only letters, digits, or underscores.
            If true, then invalid characters are replaced with underscore. If false, then the <see cref="P:Ab2d.ReaderSvg.NamedObjects"/> dictionary contains unchanged names, but the GetXaml method still corrects the names.
            Default value is true (for backwards compatibility).
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.MakeNamesUnique">
            <summary>
            Gets or sets a Boolean that specifies if ReaderSvg adds index text to the names of objects that were already used to make them unique.
            For example if svg object has a name "SvgObject" and if the second svg object has the same name, the second svg object will be named "SvgObject2".
            Default value is true.
            </summary>
        </member>
        <member name="T:Ab2d.ReaderSvg.GetCustomSvgElementNameDelegate">
            <summary>
            GetCustomSvgElementNameDelegate is used for <see cref="F:Ab2d.ReaderSvg.GetCustomSvgElementNameCallback"/> to provide custom element names.
            </summary>
            <param name="originalSvgElementName">svg name defined in svg file (can be null)</param>
            <param name="createdWpfObject">WPF objects created from svg element</param>
            <returns>name of the created WPF object (can be null)</returns>
        </member>
        <member name="F:Ab2d.ReaderSvg.GetCustomSvgElementNameCallback">
            <summary>
            GetCustomSvgElementNameCallback can be used to provide custom naming of WPF objects created from svg elements. 
            The object names are written into <see cref="P:Ab2d.ReaderSvg.NamedObjects"/> dictionary.
            Note that when <see cref="P:Ab2d.ReaderSvg.IsCorrectingNamesForWpf"/> or <see cref="P:Ab2d.ReaderSvg.MakeNamesUnique"/> are true, the name can be corrected after calling the GetCustomSvgElementNameCallback.
            Also names used for XAML are always corrected.
            </summary>
            <remarks>
            <para>
            GetCustomSvgElementNameCallback can be used to provide custom naming of WPF objects created from svg elements.
            </para>
            <para>
            Note that when <see cref="P:Ab2d.ReaderSvg.IsCorrectingNamesForWpf"/> is true, the name can be corrected after calling the GetCustomSvgElementNameCallback.
            </para>
            <para>
            The GetCustomSvgElementNameCallback get two parameters: <br/>
            - svg name defined in svg file (can be null)<br/>
            - WPF objects created from svg element.
            </para>
            <para>
            The GetCustomSvgElementNameCallback can also return null or empty string. In this case the name will not be written to <see cref="P:Ab2d.ReaderSvg.NamedObjects"/> dictionary.
            </para>
            </remarks>
        </member>
        <member name="T:Ab2d.ReaderSvg.BeforeWpfObjectCreatedDelegate">
            <summary>
            BeforeWpfObjectCreatedDelegate is used for <see cref="F:Ab2d.ReaderSvg.BeforeWpfObjectCreatedCallback"/> to provide a way to create custom WPF objects from svg elements.
            </summary>
            <param name="svgElementOuterXml">OuterXml text for the svg element</param>
            <param name="objectName">name of the objects - read from svg element attributes based on the value of the <see cref="P:Ab2d.ReaderSvg.NamedObjectsSource"/></param>
            <param name="parentObject">parent WPF object that the created objects will be added to</param>
            <returns>When a WPF object as FrameworkElement is returned, then it is added to the parentObject. When null is returned, then standard ReaderSvg code is used to create a WPF object from the svg element.</returns>
        </member>
        <member name="F:Ab2d.ReaderSvg.BeforeWpfObjectCreatedCallback">
            <summary>
            BeforeWpfObjectCreatedCallback can be used to provide a way to create custom WPF objects from svg elements. See remarks for more info.
            </summary>
            <remarks>
            <para>
            BeforeWpfObjectCreatedCallback can be used to provide a way to create custom WPF objects from svg elements.
            </para>
            <para>
            The signature of the callback method is defined by the <see cref="T:Ab2d.ReaderSvg.BeforeWpfObjectCreatedDelegate"/> delegate.
            </para>
            <para>
            To adjust the WPF object that is created by ReaderSvg, then use the <see cref="F:Ab2d.ReaderSvg.AfterWpfObjectCreatedCallback"/> instead.
            </para>
            </remarks>
        </member>
        <member name="T:Ab2d.ReaderSvg.AfterWpfObjectCreatedDelegate">
            <summary>
            AfterWpfObjectCreatedDelegate is used for <see cref="F:Ab2d.ReaderSvg.AfterWpfObjectCreatedCallback"/> to provide a way to customize WPF objects that are created with ReaderSvg from svg elements.
            </summary>
            <param name="svgElementOuterXml">OuterXml text for the svg element</param>
            <param name="objectName">name of the objects - read from svg element attributes based on the value of the <see cref="P:Ab2d.ReaderSvg.NamedObjectsSource"/></param>
            <param name="parentObject">parent WPF object that the created objects will be added to</param>
            <param name="createdWpfObject">WPF object that was created by ReaderSvg from the svgElementOuterXml</param>
            <returns>Usually the same object as is passed to the createdWpfObject should be returned. This object is added to the parentObject. It is also possible to return a completely different object. When null is returned, then no object is added to the parentObject.</returns>
        </member>
        <member name="F:Ab2d.ReaderSvg.AfterWpfObjectCreatedCallback">
            <summary>
            AfterWpfObjectCreatedCallback can be used to provide a way to customize WPF objects that are created with ReaderSvg from svg elements. See remarks for more info.
            </summary>
            <remarks>
            <para>
            BeforeWpfObjectCreatedCallback can be used to provide a way to customize WPF objects that are created with ReaderSvg from svg elements.
            </para>
            <para>
            The signature of the callback method is defined by the <see cref="T:Ab2d.ReaderSvg.AfterWpfObjectCreatedDelegate"/> delegate.
            </para>
            <para>
            To create your own WPF objects from svg elements, you can also use the <see cref="F:Ab2d.ReaderSvg.BeforeWpfObjectCreatedCallback"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.AutoSize">
            <summary>
            When AutoSize is false the size of read svg objects is determined by the width and height defined in the svg header.
            For example when svg header define the size as Letter, than the read svg objects will retain the position within the letter area.
            When AutoSize is set to true (by default), the size defined in svg header is ignored. Instead the size of the actual svg content is calculated
            so that the read objects do not have any empty area around them. The calculated or read size of svg elements can be read from <see cref="P:Ab2d.ReaderSvg.SvgBounds"/> property.
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.UseSimpleText">
            <summary>
            If true text is always rendered as TextBlock - also if text is using custom strokes and fill patters.
            If false than in case of custom strokes and fill patterns text is converted into Path elements and the appropriate effects are applied to it.
            Default value is false;
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.UseOldSizeMeasurement">
            <summary>
            If true than size measurement from ReaderSvg v1.2 is used - if your application depends on previous sizes of read elements than use this property.
            Note: Size measurement is used so svg elements can be used inside other controls - so its size is adjusted regarding to the desired size - set with Width and Height properties or by the parent element.
            This property will exit only in ReaderSvg v1.3
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.ConvertTransformationsToMatrixTransform">
            <summary>
            Gets or sets a Boolean that specifies if all transformations are converted to MatrixTransform.
            Default values is false that preserves the type of transformation defined in svg file.
            </summary>
            <remarks>
            <para>
            <b>ConvertTransformationsToMatrixTransform</b> gets or sets a Boolean that specifies if all transformations are converted to MatrixTransform.
            </para>
            <para>
            Default values is false that preserves the type of transformation defined in svg file.
            </para>
            <para>
            For example the following svg transform value: &quot;translate(100,30) rotate(30)&quot; will be converted into the following XAML when ConvertTransformationsToMatrixTransform is set to false (note that the order of transformation need to be reversed):
            </para>
            <code>
            &lt;Canvas.RenderTransform&gt;
                &lt;TransformGroup&gt;
                    &lt;RotateTransform Angle="30" /&gt;
                    &lt;ScaleTransform ScaleX="100" ScaleY="30"/&gt;
                &lt;/TransformGroup&gt;
            &lt;/Canvas.RenderTransform&gt;
            </code>
            <para>
            When ConvertTransformationsToMatrixTransform is set to true, then all transformation will be converted into MatrixTransform - the following XAML will be created:
            </para>
            <code>
            &lt;Canvas.RenderTransform&gt;
                &lt;MatrixTransform Matrix="0.8660,0.5,-0.5,0.8660,100,30" /&gt;
            &lt;/Canvas.RenderTransform&gt;
            </code>
            <para>
            NOTE:<br/>
            ConvertTransformationsToMatrixTransform property controls what WPF objects are created from transformation defined in svg file.
            </para>
            <para>
            When exporting the WPF objects to XAML, you can also control how transformations are written to XAML.
            They can be written as elements (as shown above) or as simple RenderTransform attribute: RenderTransform="0.8660,0.5,-0.5,0.8660,100,30".
            This is controlled by <see cref="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.WriteTransformationsAsElement"/> property of XamlWriterSettings class.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.AddNewCanvasForTransformations">
            <summary>
            If true (default = false) transformations on elements are not set on the element itself but are set to a new canvas and the element is added as its parent.
            This property is added for backward compatibility with versions 2.3 and older.
            </summary>
            <remarks>
            <para>
            In Ab2d.ReaderSvg version 2.3 and older transformations were not applied to the element itself. Instead a new Canvas was created with a transformation and the element was set as its child.
            </para>
            <para>
            For performance reasons it is recommended that this property is false because less Canvases are created.
            </para>
            </remarks>
            <example>
            <para>
            For example the following input svg:
            </para>
            <code lang="xml">
            &lt;path transform="matrix(-3,0,-1,0,100,0)" d="..."/&gt;
            </code>
            If AddNewCanvasForTransformations is false (default) the following xaml is created from the previous svg element:
            <code lang="xaml">
            &lt;Path RenderTransform="-3,0,-1,0,100,0" Data="..."/&gt;
            </code>
            If AddNewCanvasForTransformations is true the following xaml is created from the previous svg element (this xaml would be also generated by the version 2.3 or older):
            <code lang="xaml">
            &lt;Canvas RenderTransform="-3,0,-1,0,100,0"&gt;
                &lt;Path Data="..."/&gt;
            &lt;/Canvas&gt;
            </code>
            </example>
        </member>
        <member name="P:Ab2d.ReaderSvg.InnerCanvas">
            <summary>
            Gets the inner canvas without the Viewbox control. See also <see cref="P:Ab2d.ReaderSvg.SvgBounds"/>.
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.OverrideMiterLimit">
            <summary>
            Gets or sets a value that is used instead of the miter limit specified in the svg file.
            If value is 0, than the miter limit from svg file is used. Default value is 0.
            </summary>
            <remarks>
            <para>
            <b>OverrideMiterLimit</b> gets or sets a value that is used instead of the miter limit specified in the svg file.
            </para>
            <para>
            This property is required to workaround the problems that are created because WPF and svg use the miter limit value differently.
            </para>
            <para>
            In sgv the miter limit defines an angle at which the miter line cap is changed into bevel line cap. 
            For example the if miter limit in svg is 4 (default value for svg), this means that when the angle between two lines is less than 29 degrees, the bevel line cab will be used instead of miter line cab.
            </para>
            <para>
            In WPF the miter limit defines how far away the miter is allowed to go.
            For example if miter limit in WPF is 4 and line thickness is 20, than the miter can extent 20 * 4 = 80 points away from the line connection point.
            </para>
            <para>
            The WPF of using miter limit on one hand provides more control over the rendered line cap, but in cases where the angles between lines are very small, the rendering can create some strange artifacts that are not created in svg.
            If there are some artifacts in the image, it is recommended to set the default value of <b>OverrideMiterLimit</b> to 2 or 1.
            </para>
            <para>
            For backward compatibility the default the value of the <b>OverrideMiterLimit</b> is set to 0. This value does not override the miter limit svg value.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.LastReadViewbox">
            <summary>
            Gets the lastly read svg as WPF's Viewbox element (used when Read is used, when using ReadGeometry method see LastReadImage)
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.LastReadImage">
            <summary>
            Gets the lastly read svg as WPF's Image element (used when ReadGeometry is used, when using Read method see LastReadViewbox)
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.ShowDemoTextInEvaluation">
            <summary>
            ShowDemoTextInEvaluation is not used any more.
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.ReadPathAsPathGeometry">
            <summary>
            If false (default) the path is read as StreamGeometry (better performance). If true the path is read as PathGeometry (worse performance but path can be modified).
            </summary>
            <remarks>
            <para>
            If ReadPathAsPathGeometry is false (default) all the paths are read as StreamGeometry. The svg file is read much faster and also has better performance when drawn in WPF.
            </para>
            <para>
            If ReadPathAsPathGeometry is true all the paths are read as PathGeometry. It takes longer to read the svg file. Also the performance in WPF is not as good as with StreamGeometry (ReadPathAsPathGeometry == false). The advantage of PathGeometry is that it can be modified.
            </para>        
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.BitmapImages">
            <summary>
            Gets list of all bitmap images that are defined in svg file and cannot be converted to vector elements.
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.HasCustomProperties">
            <summary>
            Gets a Boolean that specifies if the read svg files has some custom properties defined.
            </summary>
            <remarks>
            <para>
            ReaderSvg can read embedded data and custom properties that were defined in Microsoft Visio.
            </para>
            <para>
            If HasCustomProperties is true, the <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.String)"/> or <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.Object)"/> can be used to get custom properties for the specified object.
            </para>
            <para>
            To get all defined custom properties as DataTable use the <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/> method.
            </para>
            <para>
            To get all objects that have custom properties defined use <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.OptimizeStyleProcessing">
            <summary>
            Gets or sets a Boolean that specifies if ReaderSvg is using an optimized style processing that improves speed of reading svg file (default value is true).
            </summary>
            <remarks>
            <para>
            If <b>OptimizeStyleProcessing</b> is true the ReaderSvg tries to optimize processing of styles in svg file. The optimizations can in some complex style declarations lead to inaccurate reading of svg file. In this case it is recommended to set <b>OptimizeStyleProcessing</b> to false.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.OptimizeObjectGroups">
            <summary>
            Gets or sets a Boolean that specifies if groups (Canvas or DrawingGroup) are optimized in such a way that they groups that contain only one other group (Canvas or DrawingGroup) are removed.
            Default value is false which preserves the groups as they are defined in the original svg file.
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.FlattenHierarchies">
            <summary>
            Gets or sets a Boolean that specifies if all child groups (Canvases or DrawingGroup) are removed and all elements are placed under the root group.
            The group transformations are added to child objects so that the rendered drawing looks the same.
            The exception to the removed groups are the groups that define clipping.
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.TransformShapes">
            <summary>
            Gets or sets a Boolean that specifies if all shape objects (Rectangles, Ellipses, Path, Polygons, etc.) that have simple transformation (only translate or scale) or canvas position are transformed with changing their data
            with the specified transformation. This can remove RenderTransform, Canvas.Left and Canvas.Top from most of the shapes (exception are shapes that render transform).
            </summary>
            <remarks>
            <para>
            <b>TransformShapes</b> gets or sets a Boolean that specifies if all shape objects (Rectangles, Ellipses, Path, Polygons, etc.) that have simple transformation (only translate or scale) or canvas position are transformed with changing their data
            with the specified transformation. This can remove RenderTransform, Canvas.Left and Canvas.Top from most of the shapes (exception are shapes that render transform).
            </para>
            <para>
            When rotate transformations are used on Path with curves, Rectangle and Ellipse shape, the shape object will still contain the transformation because it is not possible to rotate the object with changing its data (position and size).
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.AddHiddenElements">
            <summary>
            Gets or sets a Boolean that specifies if hidden elements are read. Default value is true.
            </summary>
            <remarks>
            <para>
            <b>AddHiddenElements</b> specifies if hidden elements are read.
            </para>
            <para>
            The elements is hidden if in svg file its visibility attribute is set to "hidden" or display attribute is set to "none".
            </para>
            <para>
            If visibility attribute is set to "hidden", than the element is hidden but it still occupies space (Visibility.Hidden).<br/>
            If display attribute is set to "none", that the element is hidden and it does not occupy space (Visibility.Collapsed). 
            </para>
            <para>
            If <b>AddHiddenElements</b> is true (default) the hidden elements are read and their Visibility is set to Hidden or Collapsed value.
            </para>
            <para>
            If <b>AddHiddenElements</b> is false the hidden elements are skipped.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.SwitchElementProcessingType">
            <summary>
            Specifies which children of the svg switch element will be imported and shown. Default value is ShowFirstCollapseOthers (imports all switch children but shows only the first one; others are Collapsed).
            </summary>
            <remarks>
            <para>
            <b>SwitchElementProcessingType</b> specifies which children of the svg switch element will be processed and shown.
            The switch element in svg file defines children that are shown based on the conditions defined in switch element.
            Because it is not possible to process svg conditions in WPF, it is possible to choose how the children will be imported.
            </para>
            <para>
            By default only the first switch child is imported - the <b>SwitchElementProcessingType</b> is set to <b>ShowFirstDiscardOthers</b>.
            </para>
            <para>
            With setting the <b>SwitchElementProcessingType</b> it is possible to disable importing switch children (<b>Disabled</b>),
            show the first child and set other to Hidden (<b>ShowFirstHideOthers</b>) or Collapsed (<b>ShowFirstCollapseOthers</b>).
            It is also possible to show all the children (<b>ShowAll</b>).
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.ReadForeignObjects">
            <summary>
            Gets or sets a boolean that specifies if foreignObject elements in svg files are read (currently only Visio metafiles are supported). Default value is true.
            </summary>
        </member>
        <member name="P:Ab2d.ReaderSvg.UseOnlyInstalledFontFamilies">
            <summary>
            When UseOnlyInstalledFontFamilies is false (by default), then FontFamily is created also with font names that are not installed on the system (this preserves the original font family name when exported to XAML).
            When UseOnlyInstalledFontFamilies is true and font family name in svg file is not installed on the system, then Arial font family is used.
            </summary>
        </member>
        <member name="E:Ab2d.ReaderSvg.ProgressChanged">
            <summary>
            ProgressChanged event can be used to get notifications of how much the svg file has been read.
            </summary>
            <remarks>
            <para>
            <b>ProgressChanged</b> event can be used to get notifications of how much the svg file has been read.
            </para>
            <para>
            Please note that in order to show changes with the progress bar, it should be shown on another thread and not on the thread where the ReaderSvg is working.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.ReaderSvg.Instance">
            <summary>
            Gets static instance of Ab2d.ReaderSvg so you do not need to create your own instance of it.
            </summary>
            <example>
            Instead of creating a new object to read one file, it is possible to simply use the Instance static property:
            <code>
            mySvgObject = Ab2d.ReaderSvg.Instance.Read(fileName);
            </code>
            </example>
        </member>
        <member name="M:Ab2d.ReaderSvg.#ctor">
            <summary>
            Constructor of ReaderSvg
            ReaderSvg is a class library for reading svg files and converting its elements into WPF elements
            </summary>
        </member>
        <member name="M:Ab2d.ReaderSvg.Read(System.String)">
            <summary>
            Reads svg or svgz file from file system or from online source. The file is read as Shapes (Canvas, Path, Ellipse, etc.).
            </summary>
            <example>
            <para>
            The following sample loads the mySample.svg file and adds it to the myStackPanel.
            </para>
            <code>
            Viewbox sampleViewbox = Ab2d.ReaderSvg.Instance.Read(@"c:\mySample.svg");
            myStackPanel.Children.Add(sampleViewbox);
            </code> 
            <para>
            The following sample loads the mySample.svg file from web site.
            </para>
            <code>
            Ab2d.ReaderSvg myReaderSvg = new Ab2d.ReaderSvg();
            
            Viewbox sampleViewbox = myReaderSvg.Read(@"http://www.myWeb.com/test/mySample.svg");
            myStackPanel.Children.Add(sampleViewbox);
            </code> 
            </example>
            <param name="url">url of file name of the svg file</param>
            <returns>Viewbox with elements defined in svg file</returns>
            <overloads>
            <summary>
            Reads svg or svgz file from file, from online source or from stream. The file is read as Shapes (Canvas, Path, Ellipse, etc.).
            </summary>
            <example>
            <para>
            The following sample loads the mySample.svg file and adds it to the myStackPanel.
            </para>
            <code>
            Viewbox sampleViewbox = Ab2d.ReaderSvg.Instance.Read(@"c:\mySample.svg");
            myStackPanel.Children.Add(sampleViewbox);
            </code> 
            <para>
            The following sample loads the mySample.svg file from web site.
            </para>
            <code>
            Ab2d.ReaderSvg myReaderSvg = new Ab2d.ReaderSvg();
            
            Viewbox sampleViewbox = myReaderSvg.Read(@"http://www.myWeb.com/test/mySample.svg");
            myStackPanel.Children.Add(sampleViewbox);
            </code> 
            The following sample shows how to read svg file from Application's Resource (mySample.svg file is included into the project under cliparts folder and its build action is set to Resource):
            <code>
            Uri uri = new Uri("/cliparts/mySample.svg", UriKind.Relative);
            using (Stream svgStream = Application.GetResourceStream(uri).Stream)
            {
                clipartFromResource = Ab2d.ReaderSvg.Instance.Read(svgStream);
            }
            
            myStackPanel.Children.Add(clipartFromResource);
            </code>          
            </example>
            </overloads>
        </member>
        <member name="M:Ab2d.ReaderSvg.Read(System.IO.Stream)">
            <summary>
            Reads svg file from stream - useful for reading svg files from resources. The file is read as Shapes (Canvas, Path, Ellipse, etc.).
            </summary>
            <example>
            The following sample shows how to read svg file from Application's Resource (mySample.svg file is included into the project under cliparts folder and its build action is set to Resource):
            <code>
            Uri uri = new Uri("/cliparts/mySample.svg", UriKind.Relative);
            using (Stream svgStream = Application.GetResourceStream(uri).Stream)
            {
                clipartFromResource = Ab2d.ReaderSvg.Instance.Read(svgStream);
            }
            
            myStackPanel.Children.Add(clipartFromResource);
            </code>  
            </example>
            <param name="stream">stream to read svg file</param>
            <returns>Viewbox with elements defined in svg file</returns>
        </member>
        <member name="M:Ab2d.ReaderSvg.ReadGeometry(System.String)">
            <summary>
            Reads svg or svgz file and returns System.Windows.Controls.Image with elements as Drawings (DrawingGeometry, EllipseGeometry, GlyphRunDrawing etc.) with no optimization.
            </summary>
            <remarks>
            <para>
            Drawing objects do not derive from the FrameworkElement class and provide a lighter-weight implementation for rendering shapes, images, and text. 
            Because of this Drawing objects on one side lack support for Layout System, input, and focus, but on the other side have much better performance and lower memory consumption.
            </para>
            <para>
            Returned Drawing has much better performance as Shapes that are returned with <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> method.
            </para>
            <para>
            If better layout support, input, focus and other functionality is needed use <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> method instead that returns elements as Shapes.
            </para>
            <para>
            It is also possible to optimize the read Drawing objects with the <see cref="T:Ab2d.Common.ReaderSvg.GeometrySettings">GeometrySettings</see> objects that is passed to the <see cref="M:Ab2d.ReaderSvg.ReadGeometry(System.String,Ab2d.Common.ReaderSvg.GeometrySettings)"/> method.
            </para>        
            </remarks>         
            <example>
            The following sample reads the mySample.svg file into sampleImage with no optimization:
            <code>
            Image sampleImage = myReader.ReadGeometry(@"c:\mySample.svg");
            </code>
            </example>
            <param name="uri">uri</param>
            <returns>Image</returns>
            <overloads>
            <summary>
            Reads svg or svgz file and returns System.Windows.Controls.Image with elements as Drawings (DrawingGeometry, EllipseGeometry, GlyphRunDrawing etc.) with no optimization.
            </summary>
            <remarks>
            <para>
            Drawing objects do not derive from the FrameworkElement class and provide a lighter-weight implementation for rendering shapes, images, and text. 
            Because of this Drawing objects on one side lack support for Layout System, input, and focus, but on the other side have much better performance and lower memory consumption.
            </para>
            <para>
            Returned Drawing has much better performance as Shapes that are returned with <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> method.
            </para>
            <para>
            If better layout support, input, focus and other functionality is needed use <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> method instead that returns elements as Shapes.
            </para>
            <para>
            It is also possible to optimize the read Drawing objects with the <see cref="T:Ab2d.Common.ReaderSvg.GeometrySettings">GeometrySettings</see> objects that is passed to the <see cref="M:Ab2d.ReaderSvg.ReadGeometry(System.String,Ab2d.Common.ReaderSvg.GeometrySettings)"/> method.
            </para>        
            </remarks>         
            <example>
            The following sample reads the mySample.svg file into sampleImage with no optimization:
            <code>
            Image sampleImage = myReader.ReadGeometry(@"c:\mySample.svg");
            </code>
            The following sample shows how to read svg file from Application's Resource (mySample.svg file is included into the project under cliparts folder and its build action is set to Resource).
            The svg file is read into Drawing objects with full geometry optimization.
            <code>
            Image clipartFromResource;
            Ab2d.Common.ReaderSvg.GeometrySettings settings;
            
            // gets Drawing objects optimized for best performance
            // NOTE: Because of heavy optimization it is possible that some anomalies appear on the image
            settings = Ab2d.Common.ReaderSvg.GeometrySettings.FullOptimization;
            
            Uri uri = new Uri("/cliparts/mySample.svg", UriKind.Relative);
            using (Stream svgStream = Application.GetResourceStream(uri).Stream)
            {
                clipartFromResource = Ab2d.ReaderSvg.Instance.ReadGeometry(svgStream, settings);
            }
            </code>         
            </example>
            </overloads>
        </member>
        <member name="M:Ab2d.ReaderSvg.ReadGeometry(System.IO.Stream)">
            <summary>
            Reads svg or svgz file and returns System.Windows.Controls.Image with elements as Drawings (DrawingGeometry, EllipseGeometry, GlyphRunDrawing etc.) with no optimization.
            </summary>
            <remarks>
            <para>
            Drawing objects do not derive from the FrameworkElement class and provide a lighter-weight implementation for rendering shapes, images, and text. 
            Because of this Drawing objects on one side lack support for Layout System, input, and focus, but on the other side have much better performance and lower memory consumption.
            </para>
            <para>
            Returned Drawing has much better performance as Shapes that are returned with <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> method.
            </para>
            <para>
            If better layout support, input, focus and other functionality is needed use <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> method instead that returns elements as Shapes.
            </para>
            <para>
            It is also possible to optimize the read Drawing objects with the <see cref="T:Ab2d.Common.ReaderSvg.GeometrySettings">GeometrySettings</see> objects that is passed to the <see cref="M:Ab2d.ReaderSvg.ReadGeometry(System.String,Ab2d.Common.ReaderSvg.GeometrySettings)"/> method.
            </para>
            </remarks>         
            <example>
            The following sample shows how to read svg file from Application's Resource (mySample.svg file is included into the project under cliparts folder and its build action is set to Resource):
            <code>
            Uri uri = new Uri("/cliparts/mySample.svg", UriKind.Relative);
            using (Stream svgStream = Application.GetResourceStream(uri).Stream)
            {
                clipartFromResource = Ab2d.ReaderSvg.Instance.ReadGeometry(svgStream);
            }
            
            myStackPanel.Children.Add(clipartFromResource);
            </code>          
            </example>    
            <param name="stream">stream</param>
            <returns>Image</returns>
        </member>
        <member name="M:Ab2d.ReaderSvg.ReadGeometry(System.String,Ab2d.Common.ReaderSvg.GeometrySettings)">
            <summary>
            Reads svg or svgz file and returns System.Windows.Controls.Image with elements as Drawings (DrawingGeometry, EllipseGeometry, GlyphRunDrawing etc.).
            </summary>
            <remarks>
            <para>
            Drawing objects do not derive from the FrameworkElement class and provide a lighter-weight implementation for rendering shapes, images, and text. 
            Because of this Drawing objects on one side lack support for Layout System, input, and focus, but on the other side have much better performance and lower memory consumption.
            </para>
            <para>
            Returned Drawing has much better performance as Shapes that are returned with <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> method.
            </para>
            <para>
            If better layout support, input, focus and other functionality is needed use <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> method instead that returns elements as Shapes.
            </para>
            <para>
            It is also possible to optimize the read Drawing objects with the <see cref="T:Ab2d.Common.ReaderSvg.GeometrySettings">GeometrySettings</see> objects that is passed to the ReadGeometry method.
            </para>        
            </remarks>         
            <example>
            The following sample reads the mySample.svg file into sampleImage:
            <code>
            Ab2d.Common.ReaderSvg.GeometrySettings settings;
            
            // gets Drawing objects optimized for best performance
            // NOTE: Because of heavy optimization it is possible that some anomalies appear on the image
            settings = Ab2d.Common.ReaderSvg.GeometrySettings.FullOptimization;
            
            Image sampleImage = myReader.ReadGeometry(@"c:\mySample.svg", settings);
            </code>
            </example>
            <param name="uri">uri</param>
            <param name="settings">GeometrySettings that defines how the geometry will be created</param>
            <returns>Image</returns>
        </member>
        <member name="M:Ab2d.ReaderSvg.ReadGeometry(System.IO.Stream,Ab2d.Common.ReaderSvg.GeometrySettings)">
            <summary>
            Reads svg or svgz file and returns System.Windows.Controls.Image with elements as Drawings (DrawingGeometry, EllipseGeometry, GlyphRunDrawing etc.).
            </summary>
            <remarks>
            <para>
            Drawing objects do not derive from the FrameworkElement class and provide a lighter-weight implementation for rendering shapes, images, and text. 
            Because of this Drawing objects on one side lack support for Layout System, input, and focus, but on the other side have much better performance and lower memory consumption.
            </para>
            <para>
            Returned Drawing has much better performance as Shapes that are returned with <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> method.
            </para>
            <para>
            If better layout support, input, focus and other functionality is needed use <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> method instead that returns elements as Shapes.
            </para>
            <para>
            It is also possible to optimize the read Drawing objects with the <see cref="T:Ab2d.Common.ReaderSvg.GeometrySettings">GeometrySettings</see> objects that is passed to the ReadGeometry method.
            </para>
            </remarks>         
            <example>
            The following sample reads the mySample.svg file into sampleImage:
            <code>
            Image sampleImage = myReader.ReadGeometry(@"c:\mySample.svg");
            </code>
            </example>
            <example>
            The following sample shows how to read svg file from Application's Resource (mySample.svg file is included into the project under cliparts folder and its build action is set to Resource).
            The svg file is read into Drawing objects with full geometry optimization.
            <code>
            Image clipartFromResource;
            Ab2d.Common.ReaderSvg.GeometrySettings settings;
            
            // gets Drawing objects optimized for best performance
            // NOTE: Because of heavy optimization it is possible that some anomalies appear on the image
            settings = Ab2d.Common.ReaderSvg.GeometrySettings.FullOptimization;
            
            Uri uri = new Uri("/cliparts/mySample.svg", UriKind.Relative);
            using (Stream svgStream = Application.GetResourceStream(uri).Stream)
            {
                clipartFromResource = Ab2d.ReaderSvg.Instance.ReadGeometry(svgStream, settings);
            }
            </code>
            </example>        
            <param name="stream">stream</param>
            <param name="settings">GeometrySettings that defines how the geometry will be created</param>
            <returns>Image</returns>
        </member>
        <member name="M:Ab2d.ReaderSvg.GetXaml">
            <summary>
            Gets xaml of the last read svg or svgz file with the default setting for WPF.
            </summary>
            <remarks>
            <para>
            <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> or <see cref="M:Ab2d.ReaderSvg.ReadGeometry(System.String,Ab2d.Common.ReaderSvg.GeometrySettings)">ReadGeometry</see> must be called before using GetXaml.
            </para>
            <para>
            To specify detailed options for xaml or to get xaml for Silverlight use <see cref="M:Ab2d.ReaderSvg.GetXaml(Ab2d.Common.ReaderSvg.BaseXamlWriterSettings)">GetXaml</see> method.
            </para>
            </remarks>
            <example>
            The following sample reads the mySample.svg file, gets its xaml (for WPF) and saves it into a file.
            <code>
            string xaml;
            Viewbox sampleViewbox;
            
            sampleViewbox = myReader.Read(@"c:\mySample.svg");
            xaml = myReader.GetXaml();
            
            System.IO.File.WriteAllText(@"c:\mySample.xaml", xaml);
            </code>        
            </example>
            <returns>xaml of the last read svg or svgz file</returns>
            <overloads>
            <summary>
            Gets xaml of the last read svg or svgz file.
            </summary>
            <remarks>
            <para>
            <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> or <see cref="M:Ab2d.ReaderSvg.ReadGeometry(System.String,Ab2d.Common.ReaderSvg.GeometrySettings)">ReadGeometry</see> must be called before using GetXaml.
            </para>
            <para>
            To specify detailed options for xaml or to get xaml for Silverlight use <see cref="M:Ab2d.ReaderSvg.GetXaml(Ab2d.Common.ReaderSvg.BaseXamlWriterSettings)">GetXaml</see> method.
            </para>
            </remarks>
            <example>
            The following sample reads the mySample.svg file, gets its xaml (for WPF) and saves it into a file.
            <code>
            string xaml;
            Viewbox sampleViewbox;
            
            sampleViewbox = myReader.Read(@"c:\mySample.svg");
            xaml = myReader.GetXaml();
            
            System.IO.File.WriteAllText(@"c:\mySample.xaml", xaml);
            </code>  
            The following sample reads the mySample.svg file, gets its xaml for Silverlight and saves it into a file.
            <code>
            string xaml;
            Viewbox sampleViewbox;
            
            sampleViewbox = myReader.Read(@"c:\mySample.svg");
            xaml = myReader.GetXaml(new Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings());
            
            System.IO.File.WriteAllText(@"c:\mySample_for_Silverlight.xaml", xaml);
            </code>        
            <para>
            The GetXaml method by default writes image uri-s as "image_0.png", "image_1.png", and so on. The default format for the uri is controlled by <see cref="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.DefaultImageUriFormatString"/>.
            With <see cref="T:Ab2d.Common.ReaderSvg.ResolveImagePathDelegate"/> it is possible to control the image uri of each of the used images.
            The following code reads the svg file, saves the images to disk and creates xaml text with image uri-s that point to saved images.
            </para>
            <code>
            // Use the code with:
            // string xamlText = GetXaml("images_test.svg", @"c:\temp\", "image_{0}.png");
            
            private Dictionary&lt;BitmapSource, string&gt; _imageFileNames;
            
            private string GetXaml(string svgFileName, string imagesPath, string imageFormatString)
            {
                string xamlText;
                Ab2d.ReaderSvg myReaderSvg;
                Ab2d.Common.ReaderSvg.WpfXamlWriterSettings xamlSettings;
            
            
                // Read the svg file
                myReaderSvg = new Ab2d.ReaderSvg();
                myReaderSvg.Read(svgFileName);
            
            
                _imageFileNames = new Dictionary&lt;BitmapSource, string&gt;();
            
                for (int i = 0; i &lt; myReaderSvg.BitmapImages.Count; i++)
                {
                    BitmapSource oneBitmap;
                    string filePath;
            
                    oneBitmap = myReaderSvg.BitmapImages[i];
                    filePath = System.IO.Path.Combine(imagesPath, string.Format(imageFormatString, i + 1));
            
                    using (System.IO.FileStream fs = new System.IO.FileStream(filePath, System.IO.FileMode.Create))
                    {
                        PngBitmapEncoder enc = new PngBitmapEncoder();
            
                       // NOTE:
                       // If break on exception is turned on in VS, 
                       // the next line will throw an exception, but it is handled in .net framework (so click continue)
                       // See also: http://social.msdn.microsoft.com/Forums/en-US/wpf/thread/9f23dde5-f281-4175-a6a2-5f4ad14a4dfe/?lc=1033&amp;ffpr=0
                       enc.Frames.Add(BitmapFrame.Create(oneBitmap));
                        enc.Save(fs);
            
                        _imageFileNames.Add(oneBitmap, filePath);
                    }
                }
            
            
                xamlSettings = new Ab2d.Common.ReaderSvg.WpfXamlWriterSettings();
                xamlSettings.ResolveImagePath = ResolveImagePath;
            
                xamlText = myReaderSvg.GetXaml(xamlSettings);
            
                return xamlText;
            }
            
            private string ResolveImagePath(BitmapSource imageToResolve)
            {
                string retImagePath;
                
                if (imageToResolve == null)
                    retImagePath = "";
                else
                    _imageFileNames.TryGetValue(imageToResolve, out retImagePath);
            
                return retImagePath;
            }
            </code>        
            </example>
            </overloads>
        </member>
        <member name="M:Ab2d.ReaderSvg.GetXaml(Ab2d.Common.ReaderSvg.BaseXamlWriterSettings)">
            <summary>
            Gets xaml of the last read svg or svgz.
            </summary>
            <remarks>
            <para>
            <see cref="M:Ab2d.ReaderSvg.Read(System.String)">Read</see> or <see cref="M:Ab2d.ReaderSvg.ReadGeometry(System.String,Ab2d.Common.ReaderSvg.GeometrySettings)">ReadGeometry</see> must be called before using GetXaml.
            </para>
            <para>
            To get xaml for WPF, use <see cref="T:Ab2d.Common.ReaderSvg.WpfXamlWriterSettings">Ab2d.Common.ReaderSvg.WpfXamlWriterSettings</see>. For Silverlight use <see cref="T:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings">Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings</see>.
            </para>   
            <para>
            If the read svg file contains bitmap images, it is possible to use the <see cref="T:Ab2d.Common.ReaderSvg.ResolveImagePathDelegate"/> delegate to specify the path to the image that will be used in the returned xaml.
            If the delegate is not specified, the format of the image uri-s is defined by <see cref="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.DefaultImageUriFormatString"/>. With its default value the image uri-s are written as "image_0.png", "image_1.png", and so on. The sample below described the use of <see cref="T:Ab2d.Common.ReaderSvg.ResolveImagePathDelegate"/> delegate.
            </para>
            </remarks>
            <example>
            The following sample reads the mySample.svg file, gets its xaml for Silverlight and saves it into a file.
            <code>
            string xaml;
            Viewbox sampleViewbox;
            
            sampleViewbox = myReader.Read(@"c:\mySample.svg");
            xaml = myReader.GetXaml(new Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings());
            
            System.IO.File.WriteAllText(@"c:\mySample_for_Silverlight.xaml", xaml);
            </code>        
            <para>
            The GetXaml method by default writes image uri-s as "image_0.png", "image_1.png", and so on. The default format for the uri is controlled by <see cref="P:Ab2d.Common.ReaderSvg.BaseXamlWriterSettings.DefaultImageUriFormatString"/>.
            With <see cref="T:Ab2d.Common.ReaderSvg.ResolveImagePathDelegate"/> it is possible to control the image uri of each of the used images.
            The following code reads the svg file, saves the images to disk and creates xaml text with image uri-s that point to saved images.
            </para>
            <code>
            // Use the code with:
            // string xamlText = GetXaml("images_test.svg", @"c:\temp\", "image_{0}.png");
            
            private Dictionary&lt;BitmapSource, string&gt; _imageFileNames;
            
            private string GetXaml(string svgFileName, string imagesPath, string imageFormatString)
            {
                string xamlText;
                Ab2d.ReaderSvg myReaderSvg;
                Ab2d.Common.ReaderSvg.WpfXamlWriterSettings xamlSettings;
            
            
                // Read the svg file
                myReaderSvg = new Ab2d.ReaderSvg();
                myReaderSvg.Read(svgFileName);
            
            
                _imageFileNames = new Dictionary&lt;BitmapSource, string&gt;();
            
                for (int i = 0; i &lt; myReaderSvg.BitmapImages.Count; i++)
                {
                    BitmapSource oneBitmap;
                    string filePath;
            
                    oneBitmap = myReaderSvg.BitmapImages[i];
                    filePath = System.IO.Path.Combine(imagesPath, string.Format(imageFormatString, i + 1));
            
                    using (System.IO.FileStream fs = new System.IO.FileStream(filePath, System.IO.FileMode.Create))
                    {
                        PngBitmapEncoder enc = new PngBitmapEncoder();
            
                       // NOTE:
                       // If break on exception is turned on in VS, 
                       // the next line will throw an exception, but it is handled in .net framework (so click continue)
                       // See also: http://social.msdn.microsoft.com/Forums/en-US/wpf/thread/9f23dde5-f281-4175-a6a2-5f4ad14a4dfe/?lc=1033&amp;ffpr=0
                       enc.Frames.Add(BitmapFrame.Create(oneBitmap));
                        enc.Save(fs);
            
                        _imageFileNames.Add(oneBitmap, filePath);
                    }
                }
            
            
                xamlSettings = new Ab2d.Common.ReaderSvg.WpfXamlWriterSettings();
                xamlSettings.ResolveImagePath = ResolveImagePath;
            
                xamlText = myReaderSvg.GetXaml(xamlSettings);
            
                return xamlText;
            }
            
            private string ResolveImagePath(BitmapSource imageToResolve)
            {
                string retImagePath;
                
                if (imageToResolve == null)
                    retImagePath = "";
                else
                    _imageFileNames.TryGetValue(imageToResolve, out retImagePath);
            
                return retImagePath;
            }
            </code>
            </example>        
            <param name="settings">XamlWriterSettings that define advanced options for xaml writer. To get xaml for WPF, use <see cref="T:Ab2d.Common.ReaderSvg.WpfXamlWriterSettings">Ab2d.Common.ReaderSvg.WpfXamlWriterSettings</see>. For Silverlight use <see cref="T:Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings">Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings</see>.</param>
            <returns>xaml of the last read svg or svgz</returns>
        </member>
        <member name="M:Ab2d.ReaderSvg.GetElementSvgText(System.String,Ab2d.ReaderSvg.NamedObjectsSourceType)">
            <summary>
            GetElementSvgText can be called after the svg file has been read. 
            It returns svg text of the element with with the specified elementName and elementNameType.
            If the element is not found, null is returned.
            </summary>
            <remarks>
            <para>
            <b>GetElementSvgText</b> returns svg text of the element with with the specified elementName. If the element is not found, null is returned.
            The method can be called after the svg file has been read.
            </para>
            <para>
            Elements in svg file can use different attributes or inner elements to define their names.
            Usually id attribute is used for that. But some files (for example files from Visio) define title element for naming.
            Files created in Inkscape also define inkscape:label attribute that can also be used for naming.
            </para>
            <para>
            To specify which attribute or element to use for naming the <b>elementNameType</b> parameter is used.
            By default it is set to Auto. This means that the same naming specification used to read the current svg file is used - defined by the <see cref="P:Ab2d.ReaderSvg.NamedObjectsSource"/> property.
            Other values specify other way to get the name.
            </para>
            </remarks>
            <param name="elementName">name of the svg element</param>
            <param name="elementNameType">elementNameType specifies the what element or attribute in svg file defines the element name</param>
            <returns>svg text of the element with elementName or null if not found</returns>
        </member>
        <member name="M:Ab2d.ReaderSvg.Transform(System.Windows.Media.Transform,System.Boolean)">
            <summary>
            Transform method transforms all the coordinates, sizes and other values in the last read Viewbox with using transformation.
            </summary>
            <remarks>
            <para>
            <b>Transform</b> method transforms all the coordinates, sizes and other values in the last read Viewbox with using transformation.
            </para>
            <para>
            The method is using <see cref="T:Ab2d.Utility.ReaderSvg.TrueTransform"/> to do the transformation. Check the class info to get more information.
            </para>
            <para>
            If the method is called with setting updateLastReadViewbox parameter to true, than the LastReadViewbox is also changed. This allows calling GetXaml method and get the xaml with the transformed objects.
            </para> 
            </remarks>
            <param name="transformation">transformation</param>
            <param name="updateLastReadViewbox">if true than LastReadViewbox is also changed. This allows calling GetXaml method and get the xaml with the transformed objects.</param>
            <returns>transformed Viewbox</returns>
        </member>
        <member name="M:Ab2d.ReaderSvg.TransformFromPixelsToMM(System.Int32,System.Boolean)">
            <summary>
            TransformFromPixelsToMM method transforms all the coordinates, sizes and other values in the last read Viewbox in such a way that it converts all units in pixels into millimeters with using specified dpi setting.
            </summary>
            <remarks>
            <para>
            Some drawing applications (for example Inkscape) allows user to draw with using real units (for example mm). But when the drawing is saved into svg file, it is converted into pixel units.
            The <b>TransformFromPixelsToMM</b> method can convert the units used in svg file back to the unints that were used when creating the drawing.
            </para>
            <para>
            The method needs a dpi (dots per inch) parameter. For files created with Inkscape 90 should be used.
            Note that it is possible to get the application that was used to create the svg file with <see cref="P:Ab2d.ReaderSvg.SvgCreator"/> property.
            </para>
            <para>
            This method is using <see cref="M:Ab2d.ReaderSvg.Transform(System.Windows.Media.Transform,System.Boolean)"/> method. 
            It creates the ScaleTransform with specifying the scale as:<br/>
            scale = 25.4 / (double)dpi; // 25.4 mm in one inch
            </para>
            <para>
            If the method is called with setting updateLastReadViewbox parameter to true, than the LastReadViewbox is also changed. This allows calling GetXaml method and get the xaml with the transformed objects.
            </para>
            </remarks>
            <param name="dpi">Dots per inch setting (for Inkscape use 90)</param>
            <param name="updateLastReadViewbox">if true than LastReadViewbox is also changed. This allows calling GetXaml method and get the xaml with the transformed objects.</param>
            <returns>transformed Viewbox</returns>
        </member>
        <member name="M:Ab2d.ReaderSvg.GetObjectName(System.Object)">
            <summary>
            Gets the name of the object read with ReadSvg. This is the opposite as using NamedObjects dictionary. Returns null if object is not found or it does not have a name defined.
            </summary>
            <param name="objectToFind">object whose name will be returned.</param>
            <returns>object's name or null if object is not found or it does not have a name defined.</returns>
        </member>
        <member name="M:Ab2d.ReaderSvg.RenderToBitmap(System.Windows.Media.Brush)">
            <summary>
            Renders the read svg objects into bitmap. Bitmap will have the same size as read svg object and will be rendered at 96 dpi.
            </summary>
            <param name="backgroundBrush">background brush</param>
            <returns>BitmapSource</returns>
            <example>
            <para>The following example uses this method to render the read svg file to wpfBitmap:</para>
            <code>
            var readerSvg = new Ab2d.ReaderSvg();
            readerSvg.Read(@"c:\mySample.svg");
            
            // Render to bitmap
            var wpfBitmap = readerSvg.RenderToBitmap(Brushes.White);
            </code>
            <para>The next example uses the <see cref="M:Ab2d.ReaderSvg.RenderToBitmap(System.Int32,System.Int32,System.Windows.Media.Brush)"/> method to render the read svg file to image with custom size and saves it to disk:</para>
            <code>
            var readerSvg = new Ab2d.ReaderSvg();
            readerSvg.Read(@"c:\mySample.svg");
            
            // Render to bitmap with 1024 width - height will be set automatically so that the
            // Image aspect ratio is preserved
            var wpfBitmap = readerSvg.RenderToBitmap(1024, 0, Brushes.White);
            
            var encoder = new System.Windows.Media.Imaging.PngBitmapEncoder();
            // Uncomment to save to jpg
            //var encoder = new JpegBitmapEncoder();
            //encoder.QualityLevel = 85;
            
            encoder.Frames.Add(System.Windows.Media.Imaging.BitmapFrame.Create(wpfBitmap));
                        
            using (var stream = System.IO.File.OpenWrite("c:\\svgImage.png"))
            {
                encoder.Save(stream);
            }        
            </code>
            </example>        
        </member>
        <member name="M:Ab2d.ReaderSvg.RenderToBitmap(System.Windows.Media.Brush,System.Int32)">
            <summary>
            Renders the read svg objects into bitmap. Bitmap will have the same size as read svg object and will be rendered at dpi specified in the parameter.
            </summary>
            <param name="backgroundBrush">background brush</param>
            <param name="dpi">dpi used to render the bitmap</param>
            <returns>BitmapSource</returns>
            <example>
            <para>The following example uses this method to render the read svg file to wpfBitmap:</para>
            <code>
            var readerSvg = new Ab2d.ReaderSvg();
            readerSvg.Read(@"c:\mySample.svg");
            
            // Render to bitmap
            var wpfBitmap = readerSvg.RenderToBitmap(Brushes.White);
            </code>
            <para>The next example uses the <see cref="M:Ab2d.ReaderSvg.RenderToBitmap(System.Int32,System.Int32,System.Windows.Media.Brush)"/> method to render the read svg file to image with custom size and saves it to disk:</para>
            <code>
            var readerSvg = new Ab2d.ReaderSvg();
            readerSvg.Read(@"c:\mySample.svg");
            
            // Render to bitmap with 1024 width - height will be set automatically so that the
            // Image aspect ratio is preserved
            var wpfBitmap = readerSvg.RenderToBitmap(1024, 0, Brushes.White);
            
            var encoder = new System.Windows.Media.Imaging.PngBitmapEncoder();
            // Uncomment to save to jpg
            //var encoder = new JpegBitmapEncoder();
            //encoder.QualityLevel = 85;
            
            encoder.Frames.Add(System.Windows.Media.Imaging.BitmapFrame.Create(wpfBitmap));
                        
            using (var stream = System.IO.File.OpenWrite("c:\\svgImage.png"))
            {
                encoder.Save(stream);
            }        
            </code>
            </example>        
        </member>
        <member name="M:Ab2d.ReaderSvg.RenderToBitmap(System.Int32,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Renders the read svg objects into bitmap with custom width and height and at 96 dpi.
            </summary>
            <param name="customWidth">width of the rendered bitmap (use 0 to preserve the existing width or preserve the aspect ratio when setting only height)</param>
            <param name="customHeight">height of the rendered bitmap (use 0 to preserve the existing height or preserve the aspect ratio when setting only width)</param>
            <param name="backgroundBrush">background brush</param>
            <returns>BitmapSource</returns>
            <example>
            <para>The following example uses the <see cref="M:Ab2d.ReaderSvg.RenderToBitmap(System.Windows.Media.Brush)"/> method to render the read svg file to wpfBitmap:</para>
            <code>
            var readerSvg = new Ab2d.ReaderSvg();
            readerSvg.Read(@"c:\mySample.svg");
            
            // Render to bitmap
            var wpfBitmap = readerSvg.RenderToBitmap(Brushes.White);
            </code>
            <para>The next example uses this method to render the read svg file to image with custom size and saves it to disk:</para>
            <code>
            var readerSvg = new Ab2d.ReaderSvg();
            readerSvg.Read(@"c:\mySample.svg");
            
            // Render to bitmap with 1024 width - height will be set automatically so that the
            // Image aspect ratio is preserved
            var wpfBitmap = readerSvg.RenderToBitmap(1024, 0, Brushes.White);
            
            var encoder = new System.Windows.Media.Imaging.PngBitmapEncoder();
            // Uncomment to save to jpg
            //var encoder = new JpegBitmapEncoder();
            //encoder.QualityLevel = 85;
            
            encoder.Frames.Add(System.Windows.Media.Imaging.BitmapFrame.Create(wpfBitmap));
                        
            using (var stream = System.IO.File.OpenWrite("c:\\svgImage.png"))
            {
                encoder.Save(stream);
            }        
            </code>
            </example>         
        </member>
        <member name="M:Ab2d.ReaderSvg.RenderToBitmap(System.Int32,System.Int32,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Renders the read svg objects into bitmap with custom width and height and at dpi specified with parameter to the method.
            </summary>
            <param name="customWidth">width of the rendered bitmap (use 0 to preserve the existing width or preserve the aspect ratio when setting only height)</param>
            <param name="customHeight">height of the rendered bitmap (use 0 to preserve the existing height or preserve the aspect ratio when setting only width)</param>
            <param name="dpi">dpi used to render the bitmap</param>
            <param name="backgroundBrush">background brush</param>
            <returns>BitmapSource</returns>
            <example>
            <para>The following example uses the <see cref="M:Ab2d.ReaderSvg.RenderToBitmap(System.Windows.Media.Brush)"/> method to render the read svg file to wpfBitmap:</para>
            <code>
            var readerSvg = new Ab2d.ReaderSvg();
            readerSvg.Read(@"c:\mySample.svg");
            
            // Render to bitmap
            var wpfBitmap = readerSvg.RenderToBitmap(Brushes.White);
            </code>
            <para>The next example uses this method to render the read svg file to image with custom size and saves it to disk:</para>
            <code>
            var readerSvg = new Ab2d.ReaderSvg();
            readerSvg.Read(@"c:\mySample.svg");
            
            // Render to bitmap with 1024 width - height will be set automatically so that the
            // Image aspect ratio is preserved
            var wpfBitmap = readerSvg.RenderToBitmap(1024, 0, Brushes.White);
            
            var encoder = new System.Windows.Media.Imaging.PngBitmapEncoder();
            // Uncomment to save to jpg
            //var encoder = new JpegBitmapEncoder();
            //encoder.QualityLevel = 85;
            
            encoder.Frames.Add(System.Windows.Media.Imaging.BitmapFrame.Create(wpfBitmap));
                        
            using (var stream = System.IO.File.OpenWrite("c:\\svgImage.png"))
            {
                encoder.Save(stream);
            }        
            </code>
            </example>         
        </member>
        <member name="M:Ab2d.ReaderSvg.GetLayerNames">
            <summary>
            Returns a List of layer names that were defined in Microsoft Visio.
            </summary>
            <returns>List of layer names that were defined in Microsoft Visio.</returns>
            <remarks>
            <para>
            Ab2d.ReaderSvg has some methods that are specialized to read additional data from svg files that were created with <b>Microsoft Visio</b>.
            </para>
            <para>
            It is possible to get the data about the <b>layers</b> and <b>custom properties and data</b>.
            </para>
            <para>
            To get information about the layers use <see cref="M:Ab2d.ReaderSvg.GetLayerNames"/> or <see cref="M:Ab2d.ReaderSvg.GetElementsForLayerName(System.String)"/>.
            </para>
            <para>
            To get custom properties and associated data use:<br/>
            <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.String)"/><br/>
            <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.Object)"/><br/>
            <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/><br/>
            <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/>
            </para>
            </remarks>  
            <example>
            <para>
            The following code is taken from OfficePlanSample and shows how to fill a LayersPanel with checkboxes - one for each layer defined in svg file.
            With checking or unchecking the checkboxes the elements associated to the layer are shown or hidden. The svg file is read with SvgViewbox that is defined in xaml.
            </para>
            <code lang="xaml">
            &lt;svg:SvgViewbox Name="SvgOfficePlan" Source="Resources/Office plan.svg"/&gt;
            </code>
            <code lang="cs">
            private void CollectLayers(Ab2d.ReaderSvg readerSvg)
            {
                List&lt;string&gt; layers;
            
                // Get names of the layers defined in Visio
                // SvgOfficePlan is a SvgViewbox control defined in XAML
                layers = SvgOfficePlan.InnerReaderSvg.GetLayerNames();
            
                foreach (string oneLayerName in layers)
                {
                    CheckBox newCheckBox;
            
                    // Create a checkbox for each layer
                    newCheckBox = new CheckBox();
                    newCheckBox.Content = oneLayerName;
                    newCheckBox.IsChecked = true;
                    newCheckBox.Checked += new RoutedEventHandler(LayerRadioButton_Checked);
                    newCheckBox.Unchecked += new RoutedEventHandler(LayerRadioButton_Checked);
            
                    // Fill LayersPanel with checkboxes
                    LayersPanel.Children.Add(newCheckBox);
                }
            }
            
            void LayerRadioButton_Checked(object sender, RoutedEventArgs e)
            {
                string layerName;
                CheckBox changedCheckBox;
            
                changedCheckBox = (CheckBox)sender;
            
                layerName = (string)changedCheckBox.Content;
            
                // Show or hide all elements in the layer
                ShowHideLayerElements(layerName, changedCheckBox.IsChecked ?? false);
            }
            
            private void ShowHideLayerElements(string layerName, bool isVisible)
            {
                List&lt;UIElement&gt; elementsForLayerName;
            
                // Get all UIElements that are connected to specified layer
                elementsForLayerName = SvgOfficePlan.InnerReaderSvg.GetElementsForLayerName(layerName);
            
                // TODO:
                // Because one object can be in multiple layers 
                // we should check that when showing an object 
                // all the layers for the objects should be visible
            
                foreach (UIElement oneElement in elementsForLayerName)
                {
                    if (isVisible)
                        oneElement.Visibility = Visibility.Visible;
                    else
                        oneElement.Visibility = Visibility.Collapsed;
                }
            }        
            
            public List&lt;string&gt; GetLayerNames()
            {
                if (!Ab.Common.Licensing.ReaderSvg.CommonLicensing.IsCalledFromWellKnowApplication())
                    CheckIfProVersion(true);
            
                if (_visioLayers == null)
                    return null;
                else
                    return _visioLayers.GetLayerNames();
            }  
            </code>
            </example>         
        </member>
        <member name="M:Ab2d.ReaderSvg.GetElementsForLayerName(System.String)">
            <summary>
            Returns a List of UIElements that are assigned to the layer with layerName (layers can be only defined in Microsoft Visio).
            </summary>
            <param name="layerName">name of the layer</param>
            <returns>List of UIElements that are assigned to the layerName or null if layer does not exist.</returns>
            <remarks>
            <para>
            Ab2d.ReaderSvg has some methods that are specialized to read additional data from svg files that were created with <b>Microsoft Visio</b>.
            </para>
            <para>
            It is possible to get the data about the <b>layers</b> and <b>custom properties and data</b>.
            </para>
            <para>
            To get information about the layers use <see cref="M:Ab2d.ReaderSvg.GetLayerNames"/> or <see cref="M:Ab2d.ReaderSvg.GetElementsForLayerName(System.String)"/>.
            </para>
            <para>
            To get custom properties and associated data use:<br/>
            <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.String)"/><br/>
            <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.Object)"/><br/>
            <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/><br/>
            <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/>
            </para>
            </remarks> 
            <example>
            <para>
            The following code is taken from OfficePlanSample and shows how to fill a LayersPanel with checkboxes - one for each layer defined in svg file.
            With checking or unchecking the checkboxes the elements associated to the layer are shown or hidden. The svg file is read with SvgViewbox that is defined in xaml.
            </para>
            <code lang="xaml">
            &lt;svg:SvgViewbox Name="SvgOfficePlan" Source="Resources/Office plan.svg"/&gt;
            </code>
            <code lang="cs">
            private void CollectLayers(Ab2d.ReaderSvg readerSvg)
            {
                List&lt;string&gt; layers;
            
                // Get names of the layers defined in Visio
                // SvgOfficePlan is a SvgViewbox control defined in XAML
                layers = SvgOfficePlan.InnerReaderSvg.GetLayerNames();
            
                foreach (string oneLayerName in layers)
                {
                    CheckBox newCheckBox;
            
                    // Create a checkbox for each layer
                    newCheckBox = new CheckBox();
                    newCheckBox.Content = oneLayerName;
                    newCheckBox.IsChecked = true;
                    newCheckBox.Checked += new RoutedEventHandler(LayerRadioButton_Checked);
                    newCheckBox.Unchecked += new RoutedEventHandler(LayerRadioButton_Checked);
            
                    // Fill LayersPanel with checkboxes
                    LayersPanel.Children.Add(newCheckBox);
                }
            }
            
            void LayerRadioButton_Checked(object sender, RoutedEventArgs e)
            {
                string layerName;
                CheckBox changedCheckBox;
            
                changedCheckBox = (CheckBox)sender;
            
                layerName = (string)changedCheckBox.Content;
            
                // Show or hide all elements in the layer
                ShowHideLayerElements(layerName, changedCheckBox.IsChecked ?? false);
            }
            
            private void ShowHideLayerElements(string layerName, bool isVisible)
            {
                List&lt;UIElement&gt; elementsForLayerName;
            
                // Get all UIElements that are connected to specified layer
                elementsForLayerName = SvgOfficePlan.InnerReaderSvg.GetElementsForLayerName(layerName);
            
                // TODO:
                // Because one object can be in multiple layers 
                // we should check that when showing an object 
                // all the layers for the objects should be visible
            
                foreach (UIElement oneElement in elementsForLayerName)
                {
                    if (isVisible)
                        oneElement.Visibility = Visibility.Visible;
                    else
                        oneElement.Visibility = Visibility.Collapsed;
                }
            }        
            
            public List&lt;string&gt; GetLayerNames()
            {
                if (!Ab.Common.Licensing.ReaderSvg.CommonLicensing.IsCalledFromWellKnowApplication())
                    CheckIfProVersion(true);
            
                if (_visioLayers == null)
                    return null;
                else
                    return _visioLayers.GetLayerNames();
            }  
            </code>
            </example>           
        </member>
        <member name="M:Ab2d.ReaderSvg.GetCustomProperties(System.String)">
            <summary>
            Returns a Dictionary of custom properties defined for the object with objectName (only custom properties defined in Microsoft Visio are supported).
            </summary>
            <param name="objectName">object name</param>
            <returns>Dictionary of custom properties defined for the object with objectName - key = custom property name, value = custom property value</returns>
            <remarks>
            <para>
            Every shape that is defined in Microsoft Visio can contain custom properties.
            When saving the drawing into svg, the custom properties are preserved and can be get with
            <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.String)"/>, <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.Object)"/>,
            <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/> or <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/>.
            </para>
            <para>
            Every custom property has its associated object, key as string and a value.
            The value is not always of type string. The following types are supported: string, double, Boolean, DateTime, TimeSpan, decimal (for Currency).
            </para>
            <para>
            <b>GetCustomProperties</b> method can be called with object or with string representing an object name. The method returns a Dictionary&lt;string, object&gt;.
            </para>
            <para>
            Ab2d.ReaderSvg has some methods that are specialized to read additional data from svg files that were created with <b>Microsoft Visio</b>.
            </para>
            <para>
            To get all objects that have custom properties defined use <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/> method.
            </para>
            <para>
            To get all custom properties in a DataTable use <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/> method.
            </para>
            <para>
            Ab2d.ReaderSvg also supports layers defined in Microsoft Visio. To get information about the layers use <see cref="M:Ab2d.ReaderSvg.GetLayerNames"/> or <see cref="M:Ab2d.ReaderSvg.GetElementsForLayerName(System.String)"/>.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows how to display all the custom properties to the Output window.
            </para>
            <code lang="cs">
            Ab2d.ReaderSvg myReaderSvg;
            
            myReaderSvg = new Ab2d.ReaderSvg();
            Viewbox myDiagram = myReaderSvg.Read(@"c:\myDiagram.svg");
            
            // NOTE:
            // When SvgViewbox or SvgDrawing is used in XAML to read the svg file,
            // use its InnerReaderSvg property to get the ReaderSvg object.
            
            
            // To get all custom properties as a DataTable use GetCustomPropertiesDataTable method:
            // DataTable svgData = myReaderSvg.GetCustomPropertiesDataTable();
            
            // Get all objects that have custom properties defined
            List&lt;object&gt; objectsList = myReaderSvg.GetObjectsWithCustomProperties();
            
            foreach (object oneObject in objectsList)
            {
                string objectName;
            
                // First display the object name
                if (oneObject is FrameworkElement)
                    objectName = ((FrameworkElement)oneObject).Name;
                else
                    objectName = "Unknown";
            
                System.Diagnostics.Debug.WriteLine("Object name: " + objectName);
            
            
                // Get custom properties dictionary for current object
                Dictionary&lt;string, object&gt; customProperties;
                customProperties = myReaderSvg.GetCustomProperties(oneObject);
            
                // Display its keys and values
                foreach (KeyValuePair&lt;string,object&gt; oneProperty in customProperties)
                    System.Diagnostics.Debug.WriteLine(string.Format("  {0}: {1}", oneProperty.Key, oneProperty.Value));
            
                System.Diagnostics.Debug.WriteLine("");
            }
            </code>
            </example>        
            <overloads>
            <summary>
            Returns a Dictionary of custom properties defined for the object with objectName (only custom properties defined in Microsoft Visio are supported).
            </summary>
            <remarks>
            <para>
            Every shape that is defined in Microsoft Visio can contain custom properties.
            When saving the drawing into svg, the custom properties are preserved and can be get with
            <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.String)"/>, <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.Object)"/>,
            <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/> or <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/>.
            </para>
            <para>
            Every custom property has its associated object, key as string and a value.
            The value is not always of type string. The following types are supported: string, double, Boolean, DateTime, TimeSpan, decimal (for Currency).
            </para>
            <para>
            <b>GetCustomProperties</b> method can be called with object or with string representing an object name. The method returns a Dictionary&lt;string, object&gt;.
            </para>
            <para>
            Ab2d.ReaderSvg has some methods that are specialized to read additional data from svg files that were created with <b>Microsoft Visio</b>.
            </para>
            <para>
            To get all objects that have custom properties defined use <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/> method.
            </para>
            <para>
            To get all custom properties in a DataTable use <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/> method.
            </para>
            <para>
            Ab2d.ReaderSvg also supports layers defined in Microsoft Visio. To get information about the layers use <see cref="M:Ab2d.ReaderSvg.GetLayerNames"/> or <see cref="M:Ab2d.ReaderSvg.GetElementsForLayerName(System.String)"/>.
            </para>
            </remarks> 
            <example>
            <para>
            The following example shows how to display all the custom properties to the Output window.
            </para>
            <code lang="cs">
            Ab2d.ReaderSvg myReaderSvg;
            
            myReaderSvg = new Ab2d.ReaderSvg();
            Viewbox myDiagram = myReaderSvg.Read(@"c:\myDiagram.svg");
            
            // NOTE:
            // When SvgViewbox or SvgDrawing is used in XAML to read the svg file,
            // use its InnerReaderSvg property to get the ReaderSvg object.
            
            
            // To get all custom properties as a DataTable use GetCustomPropertiesDataTable method:
            // DataTable svgData = myReaderSvg.GetCustomPropertiesDataTable();
            
            // Get all objects that have custom properties defined
            List&lt;object&gt; objectsList = myReaderSvg.GetObjectsWithCustomProperties();
            
            foreach (object oneObject in objectsList)
            {
                string objectName;
            
                // First display the object name
                if (oneObject is FrameworkElement)
                    objectName = ((FrameworkElement)oneObject).Name;
                else
                    objectName = "Unknown";
            
                System.Diagnostics.Debug.WriteLine("Object name: " + objectName);
            
            
                // Get custom properties dictionary for current object
                Dictionary&lt;string, object&gt; customProperties;
                customProperties = myReaderSvg.GetCustomProperties(oneObject);
            
                // Display its keys and values
                foreach (KeyValuePair&lt;string,object&gt; oneProperty in customProperties)
                    System.Diagnostics.Debug.WriteLine(string.Format("  {0}: {1}", oneProperty.Key, oneProperty.Value));
            
                System.Diagnostics.Debug.WriteLine("");
            }
            </code>
            </example>
            </overloads>
        </member>
        <member name="M:Ab2d.ReaderSvg.GetCustomProperties(System.Object)">
            <summary>
            Returns a Dictionary of custom properties defined for the object with objectName (only custom properties defined in Microsoft Visio are supported).
            </summary>
            <param name="objectWithCustomProperties">object</param>
            <returns>Dictionary of custom properties defined for the object with objectName - key = custom property name, value = custom property value</returns>
            <remarks>
            <para>
            Every shape that is defined in Microsoft Visio can contain custom properties.
            When saving the drawing into svg, the custom properties are preserved and can be get with
            <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.String)"/>, <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.Object)"/>,
            <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/> or <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/>.
            </para>
            <para>
            Every custom property has its associated object, key as string and a value.
            The value is not always of type string. The following types are supported: string, double, Boolean, DateTime, TimeSpan, decimal (for Currency).
            </para>
            <para>
            <b>GetCustomProperties</b> method can be called with object or with string representing an object name. The method returns a Dictionary&lt;string, object&gt;.
            </para>
            <para>
            Ab2d.ReaderSvg has some methods that are specialized to read additional data from svg files that were created with <b>Microsoft Visio</b>.
            </para>
            <para>
            To get all objects that have custom properties defined use <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/> method.
            </para>
            <para>
            To get all custom properties in a DataTable use <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/> method.
            </para>
            <para>
            Ab2d.ReaderSvg also supports layers defined in Microsoft Visio. To get information about the layers use <see cref="M:Ab2d.ReaderSvg.GetLayerNames"/> or <see cref="M:Ab2d.ReaderSvg.GetElementsForLayerName(System.String)"/>.
            </para>
            </remarks>      
            <example>
            <para>
            The following example shows how to display all the custom properties to the Output window.
            </para>
            <code lang="cs">
            Ab2d.ReaderSvg myReaderSvg;
            
            myReaderSvg = new Ab2d.ReaderSvg();
            Viewbox myDiagram = myReaderSvg.Read(@"c:\myDiagram.svg");
            
            // NOTE:
            // When SvgViewbox or SvgDrawing is used in XAML to read the svg file,
            // use its InnerReaderSvg property to get the ReaderSvg object.
            
            
            // To get all custom properties as a DataTable use GetCustomPropertiesDataTable method:
            // DataTable svgData = myReaderSvg.GetCustomPropertiesDataTable();
            
            // Get all objects that have custom properties defined
            List&lt;object&gt; objectsList = myReaderSvg.GetObjectsWithCustomProperties();
            
            foreach (object oneObject in objectsList)
            {
                string objectName;
            
                // First display the object name
                if (oneObject is FrameworkElement)
                    objectName = ((FrameworkElement)oneObject).Name;
                else
                    objectName = "Unknown";
            
                System.Diagnostics.Debug.WriteLine("Object name: " + objectName);
            
            
                // Get custom properties dictionary for current object
                Dictionary&lt;string, object&gt; customProperties;
                customProperties = myReaderSvg.GetCustomProperties(oneObject);
            
                // Display its keys and values
                foreach (KeyValuePair&lt;string,object&gt; oneProperty in customProperties)
                    System.Diagnostics.Debug.WriteLine(string.Format("  {0}: {1}", oneProperty.Key, oneProperty.Value));
            
                System.Diagnostics.Debug.WriteLine("");
            }
            </code>
            </example>                
        </member>
        <member name="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties">
            <summary>
            Returns List of objects that have custom properties defined (only custom properties defined in Microsoft Visio are supported).
            </summary>
            <returns>List of objects that have custom properties</returns>
            <remarks>
            <para>
            Every shape that is defined in Microsoft Visio can contain custom properties.
            When saving the drawing into svg, the custom properties are preserved and can be get with
            <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.String)"/>, <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.Object)"/>,
            <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/> or <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/>.
            </para>
            <para>
            Every custom property has its associated object, key as string and a value.
            The value is not always of type string. The following types are supported: string, double, Boolean, DateTime, TimeSpan, decimal (for Currency).
            </para>
            <para>
            <b>GetCustomProperties</b> method can be called with object or with string representing an object name. The method returns a Dictionary&lt;string, object&gt;.
            </para>
            <para>
            Ab2d.ReaderSvg has some methods that are specialized to read additional data from svg files that were created with <b>Microsoft Visio</b>.
            </para>
            <para>
            To get all objects that have custom properties defined use <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/> method.
            </para>
            <para>
            To get all custom properties in a DataTable use <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/> method.
            </para>
            <para>
            Ab2d.ReaderSvg also supports layers defined in Microsoft Visio. To get information about the layers use <see cref="M:Ab2d.ReaderSvg.GetLayerNames"/> or <see cref="M:Ab2d.ReaderSvg.GetElementsForLayerName(System.String)"/>.
            </para>
            </remarks>      
            <example>
            <para>
            The following example shows how to display all the custom properties to the Output window.
            </para>
            <code lang="cs">
            Ab2d.ReaderSvg myReaderSvg;
            
            myReaderSvg = new Ab2d.ReaderSvg();
            Viewbox myDiagram = myReaderSvg.Read(@"c:\myDiagram.svg");
            
            // NOTE:
            // When SvgViewbox or SvgDrawing is used in XAML to read the svg file,
            // use its InnerReaderSvg property to get the ReaderSvg object.
            
            
            // To get all custom properties as a DataTable use GetCustomPropertiesDataTable method:
            // DataTable svgData = myReaderSvg.GetCustomPropertiesDataTable();
            
            // Get all objects that have custom properties defined
            List&lt;object&gt; objectsList = myReaderSvg.GetObjectsWithCustomProperties();
            
            foreach (object oneObject in objectsList)
            {
                string objectName;
            
                // First display the object name
                if (oneObject is FrameworkElement)
                    objectName = ((FrameworkElement)oneObject).Name;
                else
                    objectName = "Unknown";
            
                System.Diagnostics.Debug.WriteLine("Object name: " + objectName);
            
            
                // Get custom properties dictionary for current object
                Dictionary&lt;string, object&gt; customProperties;
                customProperties = myReaderSvg.GetCustomProperties(oneObject);
            
                // Display its keys and values
                foreach (KeyValuePair&lt;string,object&gt; oneProperty in customProperties)
                    System.Diagnostics.Debug.WriteLine(string.Format("  {0}: {1}", oneProperty.Key, oneProperty.Value));
            
                System.Diagnostics.Debug.WriteLine("");
            }
            </code>
            </example>        
        </member>
        <member name="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable">
            <summary>
            Returns a System.Data.DataTable with all custom properties defined in svg file (only custom properties defined in Microsoft Visio are supported).
            </summary>
            <returns>System.Data.DataTable with all custom properties defined in svg file</returns>
            <remarks>
            <para>
            Every shape that is defined in Microsoft Visio can contain custom properties.
            When saving the drawing into svg, the custom properties are preserved and can be get with
            <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.String)"/>, <see cref="M:Ab2d.ReaderSvg.GetCustomProperties(System.Object)"/>,
            <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/> or <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/>.
            </para>
            <para>
            Every custom property has its associated object, key as string and a value.
            The value is not always of type string. The following types are supported: string, double, Boolean, DateTime, TimeSpan, decimal (for Currency).
            </para>
            <para>
            <b>GetCustomProperties</b> method can be called with object or with string representing an object name. The method returns a Dictionary&lt;string, object&gt;.
            </para>
            <para>
            Ab2d.ReaderSvg has some methods that are specialized to read additional data from svg files that were created with <b>Microsoft Visio</b>.
            </para>
            <para>
            To get all objects that have custom properties defined use <see cref="M:Ab2d.ReaderSvg.GetObjectsWithCustomProperties"/> method.
            </para>
            <para>
            To get all custom properties in a DataTable use <see cref="M:Ab2d.ReaderSvg.GetCustomPropertiesDataTable"/> method.
            </para>
            <para>
            The first column of the returned DataTable is named ObjectName and contains the name of the object that is associated with each DataRow.
            Names of other columns represent the names of custom properties.
            </para>
            <para>
            Ab2d.ReaderSvg also supports layers defined in Microsoft Visio. To get information about the layers use <see cref="M:Ab2d.ReaderSvg.GetLayerNames"/> or <see cref="M:Ab2d.ReaderSvg.GetElementsForLayerName(System.String)"/>.
            </para>
            </remarks>      
            <example>
            <para>
            The following example shows how to read all custom properties into a DataTable
            </para>
            <code lang="cs">
            Ab2d.ReaderSvg myReaderSvg;
            
            myReaderSvg = new Ab2d.ReaderSvg();
            Viewbox myDiagram = myReaderSvg.Read(@"c:\myDiagram.svg");
            
            // NOTE:
            // When SvgViewbox or SvgDrawing is used in XAML to read the svg file,
            // use its InnerReaderSvg property to get the ReaderSvg object.
            
            
            // Get all custom properties as a DataTable
            DataTable svgData = myReaderSvg.GetCustomPropertiesDataTable();
            </code>
            </example>        
        </member>
        <member name="P:Ab2d.Utility.CustomBase64Encoder.CharPlusSign">
            <summary>
            Gets or sets the plus sign character.
            Default is '+'.
            </summary>
        </member>
        <member name="P:Ab2d.Utility.CustomBase64Encoder.CharSlash">
            <summary>
            Gets or sets the slash character.
            Default is '/'.
            </summary>
        </member>
        <member name="T:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter">
            <summary>
            ResourceDictionaryWriter class is a helper class that can be used to build ResourceDictionaries from multiple input files.
            </summary>
            <remarks>
            <para>
            <b>ResourceDictionaryWriter</b> class is a helper class that can be used to build ResourceDictionaries from multiple input files.
            </para>
            <para>
            Read more about how to use Resource Dictionaries on: http://msdn.microsoft.com/en-us/library/cc903952(VS.95).aspx
            </para>
            <para>
            To customize the behaviour of <b>ResourceDictionaryWriter</b> it is possible to derive a custom class form <b>ResourceDictionaryWriter</b> and change protected fields or override its virtual methods.
            </para>
            </remarks>
            <example>
            <para>
            The following code shows how to add three svg files to ResourceDictionary with basic optimization settings and get the xaml for the ResourceDictionary.
            </para>
            <code>
            GeometrySettings settings = GeometrySettings.BasicOptimization;
            
            ResourceDictionaryWriter resourceWriter = new ResourceDictionaryWriter();
            
            resourceWriter.AddGeometryFile("button1.svg", settings);
            resourceWriter.AddGeometryFile("button2.svg", settings);
            resourceWriter.AddGeometryFile("button3.svg", settings);
            
            string xaml = resourceWriter.GetXaml();
            </code>
            <para>
            The following code shows how to derive a class from <b>ResourceDictionaryWriter</b> to create a Silverlight ResourceDictionaryWriter with custom NumberFormatString.
            </para>
            <code>
            public class SilverlightResourceDictionaryWriter : Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter
            {
                protected override BaseXamlWriterSettings CreateXamlWriterSettings()
                {
                    SilverlightXamlWriterSettings newSilverlightXamlWriterSettings;
            
                    newSilverlightXamlWriterSettings = new SilverlightXamlWriterSettings();
            
                    // format decimal numbers to show only one decimal
                    newSilverlightXamlWriterSettings.NumberFormatString = "0.#";
            
                    return newSilverlightXamlWriterSettings;
                }
            }        
            </code>
            </example>
        </member>
        <member name="P:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.UsedSvgReader">
            <summary>
            Ab2d.ReaderSvg instance that is used to read svg files.
            </summary>
        </member>
        <member name="P:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.GeometrySettings">
            <summary>
            GeometrySettings that are used to read svg file as geometries.
            </summary>
        </member>
        <member name="P:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.XamlWriterSettings">
            <summary>
            BaseXamlWriterSettings that is used for GetXaml method.
            </summary>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.CreateXamlWriterSettings">
            <summary>
            Creates a BaseXamlWriterSettings. It can be overriden to provide different Xaml settings or use SilverlightXamlWriterSettings.
            </summary>
            <remarks>
            <para>
            The <b>CreateXamlWriterSettings</b> method by default creates an instance of WpfXamlWriterSettings that is used for GetXaml method.
            </para>
            <para>
            The method can be overriden to create an instance of SilverlightXamlWriterSettings instead of WpfXamlWriterSettings.
            The derived method can also set some properties, for example NumberFormatString.
            </para>
            <para>
            Note that in order to work correctly the following properties cannot be changed in derived class:<br/>
            NamedObjects, RootObject, XamlNamespace, StartComment, WriteElementNames and WriteRootObjectResouceKey.
            </para>
            <para>
            Other setting such as NumberFormatString and others can be changed to any other values.
            </para>
            </remarks>
            <example>
            <para>
            The following sample creates a new SilverlightResourceDictionaryWriter that derive from ResourceDictionaryWriter.
            It creates an instance of SilverlightXamlWriterSettings instead of WpfXamlWriterSettings and also sets a custom NumberFormatString.
            </para>
            <code>
            public class SilverlightResourceDictionaryWriter : Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter
            {
                protected override BaseXamlWriterSettings CreateXamlWriterSettings()
                {
                    SilverlightXamlWriterSettings newSilverlightXamlWriterSettings;
            
                    newSilverlightXamlWriterSettings = new SilverlightXamlWriterSettings();
            
                    // format decimal numbers to show only one decimal
                    newSilverlightXamlWriterSettings.NumberFormatString = "0.#";
            
                    return newSilverlightXamlWriterSettings;
                }
            }        
            </code>
            </example>
            <returns>BaseXamlWriterSettings</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.CreateReaderSvg">
            <summary>
            Creates a new instance of Ab2d.ReaderSvg class. Can be overridden to specify some special properties to created ReaderSvg.
            </summary>
            <returns>Ab2d.ReaderSvg</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.Reset">
            <summary>
            Resets the collected svg files so a new ResourceDictionary can be created.
            </summary>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.AddFile(System.String)">
            <summary>
            Adds a svg or svgz file to the ResourceDictionary as WPF Shapes.
            </summary>
            <param name="fileName">fileName</param>
            <returns>read svg or svgz file as Viewbox</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.ReadSvgFile(System.String)">
            <summary>
            Reads svg file as shapes.
            </summary>
            <remarks>
            <para>
            <b>ReadSvgStream</b> method is used to read svg file from file.
            </para>
            <para>
            The method reads svg file as shapes and returns a Viewbox. 
            It is also used for <see cref="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.AddGeometryFile(System.String,Ab2d.Common.ReaderSvg.GeometrySettings)"/> method. 
            In this case the read Viewbox is internally converted into Geometries.
            </para>
            </remarks>        
            <param name="fileName">fileName</param>
            <returns>Viewbox</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.AddStream(System.IO.Stream)">
            <summary>
            Adds a svg or svgz from stream to the ResourceDictionary as WPF Shapes.
            </summary>
            <param name="stream">stream</param>
            <returns>read svg or svgz file as Viewbox</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.ReadSvgStream(System.IO.Stream)">
            <summary>
            Reads svg stream as shapes.
            </summary>
            <remarks>
            <para>
            <b>ReadSvgStream</b> method is used to read svg file from stream.
            </para>
            <para>
            The method reads svg file as shapes and returns a Viewbox. 
            It is also used for <see cref="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.AddGeometryStream(System.IO.Stream,Ab2d.Common.ReaderSvg.GeometrySettings)"/> method. 
            In this case the read Viewbox is internally converted into Geometries.
            </para>
            </remarks>
            <param name="stream">Stream</param>
            <returns>Viewbox</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.AddGeometryFile(System.String,Ab2d.Common.ReaderSvg.GeometrySettings)">
            <summary>
            Adds a svg or svgz file to the ResourceDictionary as Geometry.
            </summary>
            <param name="fileName">fileName</param>
            <param name="geometrySettings">GeometrySettings used to read this file</param>
            <returns>read svg or svgz file as Image</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.AddGeometryStream(System.IO.Stream,Ab2d.Common.ReaderSvg.GeometrySettings)">
            <summary>
            Adds a svg or svgz from stream to the ResourceDictionary as Geometry.
            </summary>
            <param name="stream">stream</param>
            <param name="geometrySettings">GeometrySettings used to read this stream</param>
            <returns>read svg or svgz file as Image</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.GetXaml">
            <summary>
            Gets the xaml string of the ResourceDictionary with all added svg objects as resources.
            </summary>
            <remarks>
            <para>
            <b>GetXaml</b> method returns the xaml string of the ResourceDictionary with all added svg objects as resources.
            </para>
            <para>
            The method can be overriden in derived class.
            In this case call the base <b>GetXaml</b> method to create the xaml string than can be than further processed.
            </para>
            </remarks>
            <returns>xaml</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.GetRootResourceKey(System.Object,System.String,System.Int32)">
            <summary>
            GetRootResourceKey gets the name of the resource object that added by any Read method on ResourceDictionaryWriter.
            </summary>
            <param name="rootObject">read object</param>
            <param name="fileName">file name if exist (if the object was not read by stream)</param>
            <param name="rootResourceIndex">index of the read object</param>
            <returns>resource key as string</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.ResourceDictionaryWriter.ResolveResourceKeyCallback(System.Object,System.String)">
            <summary>
            ResolveResourceKeyCallback is used to change the recommendedKey that is used for resources
            </summary>
            <param name="resource">object that the key is used for</param>
            <param name="recommendedKey">recommendedKey</param>
            <returns>key as string that will be used for this resource</returns>
        </member>
        <member name="T:Ab2d.Utility.ReaderSvg.TrueTransform">
             <summary>
             TrueTransform class can be used to transfrom the coordinates, sizes and other values in the original WPF element and create a new WPF element with transformed values.
             </summary>
             <remarks>
             <para>
             <b>TrueTransform</b> class can be used to transfrom the coordinates, sizes and other values in the original WPF element and create a new WPF element with transformed values.
             </para>
             <para>
             In WPF the transormations are usually applied with setting a Transform property on a shape or other element. 
             This transform the object coordinates, sizes and other values before the object representation is sent to graphics card. This is done behind the scene.
             But if we want to transform the object and get transformed object without using Transform property we can use the <b>TrueTransform</b>.
             </para>
             <para>
             For example if we have:<br/>
             &lt;Rectangle Canvas.Left="100" Canvas.Top="50" Width="200" Height="300" /&gt;<br/>
             and send it to <see cref="M:Ab2d.Utility.ReaderSvg.TrueTransform.Transform(System.Windows.Shapes.Shape,System.Windows.Media.Transform)"/> method
             with transformation parameter set to ScaleTransform with ScaleX = ScaleY = 0.5, we get back:<br/>
             &lt;Rectangle Canvas.Left="50" Canvas.Top="25" Width="100" Height="150" /&gt;
             </para>
             <para>
             With using different version of <b>Transform</b> methods it is possible to transform objects that are derived from:<br/>
             - Panel (for example Canvas)<br/>
             - Shape (for example Rectangle, Ellipse)<br/>
             - Geometry (for example DrawingGeometry).
             </para>
             <para>
             Note that TrueTransform is primarily used to transform shapes and not common GUI elements like Buttons, TextBoxes, etc - therefore it cannot transform all possible WPF elements.
             </para>
             <example>
             <para>
             The following code can be used to translate and scale the objects read with ReaderSvg:
             </para>
             <code>
             var readViewbox = Ab2d.ReaderSvg.Instance.Read("mySvgFile.svg");
             
             // First get the inner canvas - this way we skip the size adjustments
             var rootCanvas = _lastSvgViewbox.Child as Canvas;
            
             if (rootCanvas == null || rootCanvas.Children.Count == 0)
                 return;
             
             var innerCanvas = rootCanvas.Children[0] as Canvas;
             
             if (innerCanvas == null)
                 return;
             
             // Create transformation (note that order of adding transformations to TransformGroup is important)
             var transformGroup = new TransformGroup();
             transformGroup.Children.Add(new TranslateTransform(100, 100));
             transformGroup.Children.Add(new ScaleTransform(0.5, 0.5));
             
             // Create transformed objects
             var transformedCanvas = Ab2d.Utility.ReaderSvg.TrueTransform.Transform(innerCanvas, transformGroup) as Canvas; // when using ReaderWmf use the Ab2d.Utility.ReaderWmf namespace
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.TrueTransform.Transform(System.Windows.Controls.Panel,System.Windows.Media.Transform)">
            <summary>
            Transforms the coordinats, sizes and other values in the originalElement with using transformation.
            </summary>
            <param name="originalPanel">originalPanel as Panel</param>
            <param name="transformation">transformation</param>
            <returns>Transformed FrameworkElement</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.TrueTransform.Transform(System.Windows.Shapes.Shape,System.Windows.Media.Transform)">
            <summary>
            Transforms the coordinats, sizes and other values in the originalShape with using transformation.
            </summary>
            <param name="originalShape">originalShape as Shape</param>
            <param name="transformation">transformation</param>
            <returns>Transformed FrameworkElement</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.TrueTransform.Transform(System.Windows.Media.Geometry,System.Windows.Media.Transform)">
            <summary>
            Transforms the coordinats, sizes and other values in the originalGeometry with using transformation.
            </summary>
            <param name="originalGeometry">originalGeometry as Geometry</param>
            <param name="transformation">transformation</param>
            <returns>Transformed Geometry</returns>
        </member>
        <member name="M:Ab2d.Utility.ReaderSvg.TrueTransform.Transform(System.Windows.Controls.Viewbox,System.Windows.Media.Transform)">
            <summary>
            Transforms the coordinats, sizes and other values in the originalGeometry with using transformation.
            </summary>
            <param name="originalViewbox">originalViewbox as Viewbox</param>
            <param name="transformation">transformation</param>
            <returns>Transformed Viewbox</returns>
        </member>
        <member name="P:Ab2d.PowerToys.Progress.ReportProgressHelper.DefaultSender">
            <summary>
            Object that is used as a sender in ProgressChangedEventHandler if the ReportProgress method is called without sener specified.
            </summary>
        </member>
        <member name="M:Ab2d.PowerToys.Progress.ReportProgressHelper.AddProgressRegion(System.String,System.Int32,System.Int32)">
            <summary>
            AddProgressRegion can be used to define regions where inside region progress goes from 0% to 100%
            but from the outside the shown total progress is defined by the region's fromPercent and toPercent
            </summary>
            <param name="regionName"></param>
            <param name="fromPercent"></param>
            <param name="toPercent"></param>
        </member>
        <member name="M:Ab2d.PowerToys.Progress.ReportProgressHelper.ClearRegions">
            <summary>
            ClearRegions
            </summary>
        </member>
        <member name="M:Ab2d.PowerToys.XamlWriter.SilverlightXamlWriter.#ctor(Ab2d.Common.ReaderSvg.SilverlightXamlWriterSettings)">
            <summary>
            Constructor
            </summary>
            <param name="settings">SilverlightXamlWriterSettings</param>
        </member>
    </members>
</doc>
